<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html401/loose.dtd">
<html><!-- Created on October, 8 2017 by texi2html 1.76 --><!--
Written by: Lionel Cons <Lionel.Cons@cern.ch> (original author)
            Karl Berry  <karl@freefriends.org>
            Olaf Bachmann <obachman@mathematik.uni-kl.de>
            and many others.
Maintained by: Many creative people <dev@texi2html.cvshome.org>
Send bugs and suggestions to <users@texi2html.cvshome.org>

--><head>
<title>R 扩展: R 扩展</title>

<meta name="description" content="R 扩展: R 扩展">
<meta name="keywords" content="R 扩展: R 扩展">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="texi2html 1.76">
<meta http-equiv="Content-Type" content="text/html; charset=GBK">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
pre.display {font-family: serif}
pre.format {font-family: serif}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: serif; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: serif; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.sansserif {font-family:sans-serif; font-weight:normal;}
ul.toc {list-style: none}
-->
</style>


</head>

<body link="#0000FF" lang="en" vlink="#800080" text="#000000" bgcolor="#FFFFFF" alink="#FF0000">

<a name="Top"></a>
<a name="SEC_Top"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h1 class="settitle">R 扩展</h1>

<p>这是一个介绍R扩展使用方法的指导手册，描述了：创建@R{}包，编写@R{}文档，
@R{}系统及与其它编程语言接口，@R{} <acronym>API</acronym>.
</p>
<p>本文档的当前版本为0.01 β。该文档译自 R-2.8.1 文档（2009年01月19日）。
</p>
<p>丁国徽（<a href="mailto:ghding@gmail.com">ghding@gmail.com</a>） 等译。
</p>
<p>本文档的一些发布信息放置在 <a href="http://www.biosino.org/R/R-doc/">http://www.biosino.org/R/R-doc/</a>。
</p>
<p>No value for ISBN-exts
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC1">致谢</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
<tr><td valign="top" align="left"><a href="#SEC2">1. 创建R的包</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
<tr><td valign="top" align="left"><a href="#SEC36">2. Writing R documentation files</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"> 编写R文档
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC53">3. Tidying and profiling R code</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"> R代码规范和优化
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC66">4. Debugging</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"> 代码测试
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC75">5. System and foreign language interfaces</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"> 系统和其它编程语言接口
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC108">6. The R <acronym>API</acronym>: entry points for C code</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"> R API
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC134">7. Generic functions and methods</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"> 泛型函数和方法
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC136">8. Linking GUIs and other front-ends to R</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"> 
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC146">Function and variable index</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"> 函数和变量索引 
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC147">Concept index</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"> 概念索引                             
</td></tr>
</tbody></table>

<hr size="1">
<a name="Acknowledgements"></a>
<a name="SEC1"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC_Top" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC2" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[ &lt;&lt; ]</td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC2" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h1 class="unnumbered"> 致谢 </h1>


<p>非常感谢Saikat DebRoy（编写了第一个使用<code>.Call</code>和<code>.External</code>的指南）
和Adrian Trapletti（提供了C++接口相关的信息）的贡献。
</p>
<hr size="6">
<a name="Creating-R-packages"></a>
<a name="SEC2"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC1" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC3" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC1" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h1 class="chapter"> 1. 创建R的包 </h1>

<p>@R{}包提供了一个装载代码和文档的机制。@R{}发布时提供了几个包。
</p>
<p>下面，我们假定你知道<samp>`library()'</samp>命令及其<samp>`lib.loc'</samp>参数，也假定
你知道关于<code>INSTALL</code>的基础知识。否则，请先查看@R{}的帮助页面：
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">?library
?INSTALL
</pre></td></tr></tbody></table>



<p>假定你有一个安装了许多工具的计算环境；"R Installation and Administration"里描述
了所需要的工具。类似Unix的操作系统默认地安装了大部分工具，而Windows和MacOS X系统
则需要仔细的手动安装。
</p>
<p>包创建以后，就可以用<code>R CMD INSTALL</code>命令安装。
</p>
<p>R也支持其它类型的扩展：请参考See section <a href="#SEC32">Package types</a>.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC3">1.1 包结构</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
<tr><td valign="top" align="left"><a href="#SEC8">1.2 配置和清理</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
<tr><td valign="top" align="left"><a href="#SEC12">1.3 检查和创建包</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
<tr><td valign="top" align="left"><a href="#SEC16">1.4 写包的vignettes</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
<tr><td valign="top" align="left"><a href="#SEC17">1.5 提交包到<acronym>CRAN</acronym></a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
<tr><td valign="top" align="left"><a href="#SEC18">1.6 包命名空间</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
<tr><td valign="top" align="left"><a href="#SEC25">1.7 写可移植的包</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
<tr><td valign="top" align="left"><a href="#SEC27">1.8 Diagnostic messages</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">         
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC28">1.9 Internationalization</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">        
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC31">1.10 CITATION files</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">              
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC32">1.11 Package types</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">               
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC35">1.12 Services</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                    
</td></tr>
</tbody></table>

<hr size="6">
<a name="Package-structure"></a>
<a name="SEC3"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC2" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC4" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC2" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 1.1 包结构 </h2>

<p>包由一个<tt>`DESCRIPTION'</tt>文件和多个子目录<tt>`R'</tt>, <tt>`data'</tt>,
<tt>`demo'</tt>, <tt>`exec'</tt>, <tt>`inst'</tt>, <tt>`man'</tt>, <tt>`po'</tt>,
<tt>`src'</tt>, and <tt>`tests'</tt>构成（某些子目录可以不要）。包的目录下还可以包括文件：
<tt>`INDEX'</tt>，<tt>`NAMESPACE'</tt>，<tt>`configure'</tt>，<tt>`cleanup'</tt>，<tt>`LICENSE'</tt>，
<tt>`LICENCE'</tt>，<tt>`COPYING'</tt>和<tt>`NEWS'</tt>。其它文件，如<tt>`README'</tt>或<tt>`ChangeLog'</tt>，
将会被R忽略掉，但可能对终端用户有用。
</p>
<p><tt>`DESCRIPTION'</tt>和<tt>`INDEX'</tt>文件将在下面描述。
<tt>`NAMESPACE'</tt>文件将在<a href="#SEC18">包命名空间</a>中描述。
</p>
<a name="IDX1"></a>
<a name="IDX2"></a>

<p>可选文件<tt>`configure'</tt>和<tt>`cleanup'</tt>是脚本文件（Bourne shell），分别在包安装
前和安装后（假定设置了参数"-clean"）执行，请参考<a href="#SEC8">配置和清理</a>。
</p>
<a name="IDX3"></a>
<a name="IDX4"></a>
<a name="IDX5"></a>

<p>可选文件<tt>`LICENSE'</tt>/<tt>`LICENCE'</tt>或<tt>`COPYING'</tt>（前者更常用）包括包的授权
拷贝，比如：<acronym>GNU</acronym>公共授权的拷贝。 你可以在自己的包中加入授权文件，但请
不要安装其它版本的<acronym>GNU</acronym> <tt>`COPYING'</tt>或<tt>`COPYING.LIB'</tt>文件，而是参考
<a href="http://www.r-project.org/Licenses/">http://www.r-project.org/Licenses/</a>或@R{}（（<tt>`share/licenses'</tt>目录）
里的授权拷贝。
</p>
<p>GNU项目里<tt>`NEWS'</tt>和<tt>`ChangeLog'</tt>文件的惯例，请参考
<a href="http://www.gnu.org/prep/standards/standards.html#Documentation">http://www.gnu.org/prep/standards/standards.html#Documentation</a>。
</p>
<p>包所在的子目录名必须和包的名字相同。一些操作系统对大小写不敏感（比如：Windows），
为了保持可移植性，强烈建议不同的包不能仅由大小写来区分。比如你已经有一个名为
"foo"的包，就不要再创建一个叫"Foo"的包。
</p>
<p>为了确保文件系统和操作系统支持文件名，<acronym>ASCII</acronym>控制字符、<samp>`"'</samp>、
<samp>`*'</samp>、<samp>`:'</samp>、<samp>`/'</samp>、<samp>`&lt;'</samp>、<samp>`&gt;'</samp>、<samp>`?'</samp>、<samp>`\'</samp>和<samp>`|'</samp>
都不能在文件名中使用。含有<samp>`con'</samp>、<samp>`prn'</samp>、<samp>`aux'</samp>、
<samp>`clock$'</samp>、<samp>`nul'</samp>、<samp>`com1'</samp>到<samp>`com9'</samp>、和<samp>`lpt1'</samp>到<samp>`lpt9'</samp>
的文件名在转换成小写后可能（如：<samp>`lpt5.foo.bar'</samp>），是不允许使用的。
同一目录下的文件名也不能仅有大小写区分（见上段）。另外，<samp>`.Rd'</samp>文件将用在URLs
中，因此它们的文件名应该由<acronym>ASCII</acronym>组成，而不包含<code>%</code>。为了达到最大的
移植性，文件名应仅包括未被排除的<acronym>ASCII</acronym>字符（
即<code>A-Za-z0-9._!#$%&amp;+,;=@^(){}'[]</code>。许多文件路径不接受空格，
因此我们排除了空格；非英语的文字字符在某些地区不被支持，因而也被排除了。避免使用
Shell的特殊字符<code>(){}'[]$</code>也是一个好的习惯。
</p>
<p>源包中应尽量不包括二进制的可执行文件：这些文件不可移植，而且也存在安全隐患。
如果不将它们列在包或包束<a name="DOCF1" href="#FOOT1">(1)</a>的<tt>`BinaryFiles'</tt>文件里（每行一个文件），
<code>R CMD check</code>命令将发出相应的警告
<a name="DOCF2" href="#FOOT2">(2)</a>。
</p>
<p>@R{}函数<code>package.skeleton</code>能帮助建立一个新包的结构，更细节的内容请参考帮助页面。
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC4">1.1.1 <tt>`DESCRIPTION'</tt>文件</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"> DESCRIPTION文件       
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC5">1.1.2 <tt>`INDEX'</tt>文件</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"> INDEX文件
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC6">1.1.3 包的子目录</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
<tr><td valign="top" align="left"><a href="#SEC7">1.1.4 包束</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
</tbody></table>

<hr size="6">
<a name="The-DESCRIPTION-file"></a>
<a name="SEC4"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC3" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC5" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC3" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.1.1 <tt>`DESCRIPTION'</tt>文件 </h3>

<p><tt>`DESCRIPTION'</tt>文件以如下的格式包括包的基本信息：
</p>
<blockquote><table class="cartouche" border="1"><tbody><tr><td>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">Package: pkgname
Version: 0.5-1
Date: 2004-01-01
Title: My First Collection of Functions
Author: Joe Developer &lt;Joe.Developer@some.domain.net&gt;, with
  contributions from A. User &lt;A.User@whereever.net&gt;.
Maintainer: Joe Developer &lt;Joe.Developer@some.domain.net&gt;
Depends: R (&gt;= 1.8.0), nlme
Suggests: MASS
Description: A short (one paragraph) description of what
  the package does and why it may be useful.
License: GPL (&gt;= 2)
URL: http://www.r-project.org, http://www.another.url
</pre></td></tr></tbody></table></td></tr></tbody></table>
</blockquote>


<p>这是`Debian Control File'格式的文件（参考<samp>`read.dcf'</samp>的帮助文档）。
续行是以空格或tab键开始（比如：多行的描述内容）。字段<samp>`Package'</samp>、
<samp>`Version'</samp>、<samp>`License'</samp>、<samp>`Description'</samp>、<samp>`Title'</samp>、
<samp>`Author'</samp>和<samp>`Maintainer'</samp>是必须有的，其它的字段（<samp>`Date'</samp>、
<samp>`Depends'</samp>、<samp>`URL'</samp>、…）是可选的。
</p>
<p><tt>`DESCRIPTION'</tt>文件应由<acronym>ASCII</acronym>书写以最大化可移植性。
</p>
<p>文件<samp>`Package'</samp>和<samp>`Version'</samp>分别给出了包的名字和版本。包的名字应由字母、
数字和点组成，并以字母开头。包的版本是由<samp>`.'</samp>或<samp>`-'</samp>分隔的至少<em>两个</em>
（通常是三个）非负整数组成。上面的例子中给出了版本的规范形式，
而<samp>`0.01'</samp>或<samp>`0.01.0'</samp>的写法会被当作<samp>`0.1-0'</samp>处理。
（翻译包允许使用类似<samp>`Translation-<var>ll</var>'</samp>的名字）
</p>
<p><samp>`License'</samp>字段应按如下的标准格式指定包的授权。可选的授权由竖线分隔。每个授权
的格式如下： 
</p><ul>
<li>
标准的短授权名称，如：
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">GPL-2 GPL-3 LGPL-2 LGPL-2.1 LGPL-3 AGPL-3 Artistic-1.0 Artistic-2.0
</pre></td></tr></tbody></table><p>就像<a href="http://www.r-project.org/Licenses/">http://www.r-project.org/Licenses/</a>里和R安装目录下的
<tt>`share/licenses'</tt>子目录中的那样。
</p></li><li>
自由或开放软件授权的名称简写，就像R源包或安装目录下的授权数据库
<tt>`share/licenses/license.db'</tt>里的名字。对有版本的授权，其名称后可以
<samp>`(<var>op</var> <var>v</var>)'</samp>的形式限制版本，也可由<samp>`,'</samp>组合多个版本（见下面的例子）。
<var>op</var>是比较操作符：<samp>`&lt;'</samp>、<samp>`&lt;='</samp>、<samp>`&gt;'</samp>、<samp>`&gt;='</samp>、<samp>`=='</samp>
或<samp>`!='</samp>；<var>v</var>是版本号（由<samp>`.'</samp>分隔的非负整数）。名称后也可以直接跟版本
号，或由<samp>`-'</samp>连接名称简写和版本号。如有需要，其它的自由软件
（<a href="http://www.fsf.org/licenses/license-list.html">http://www.fsf.org/licenses/license-list.html</a>）或开放软件
（<a href="http://www.opensource.org/licenses/bsd-license.php">http://www.opensource.org/licenses/bsd-license.php</a>）
授权也可以增加到该数据库。
</li><li>
字符串<samp>`file LICENSE'</samp>或<samp>`file LICENCE'</samp>，引用包目录（源或安装目录）里的
文件<tt>`LICENSE'</tt>或<tt>`LICENCE'</tt>。 
</li><li>
字符串<samp>`Unlimited'</samp>, 表示除了相关法律规定外，没有任何发布或使用的限制。
</li></ul>
<p>下面是一些标准的授权说明文字的格式：
</p><table><tbody><tr><td>&nbsp;</td><td><pre class="example">License: GPL-2
License: GPL (&gt;= 2) | BSD
License: LGPL (&gt;= 2.0, &lt; 3) | Mozilla Public License
License: GPL-2 | file LICENCE
</pre></td></tr></tbody></table><p>请特别注意"Public domain"不是一个有效的授权。这个信息对你非常重要，否则他人
即使散布包的拷贝也是不合法的。
</p>

<p><samp>`Description'</samp>字段全面的描述了包的用途。可以使用几个完整的句子，但只能有一
个段落。
</p>
<p><samp>`Title'</samp>字段给出了包的简短描述（即标题）。一些包的列表由于总大小的限制可能
只截取包标题的前65个字符。标题应该大写，不用任何的标记，不要续行，不以句号结尾。
老版本的@R{}用一个单独的文件file <tt>`TITLE'</tt>给出这些信息。现在已被废除，
改为使用<tt>`DESCRIPTION'</tt>文件里的必需字段<samp>`Title'</samp>。
</p>
<p><samp>`Author'</samp>字段记录了包的作者。它是纯文本格式的，适合读者阅读，却不适用于自动处
理（如：提取所列作者的邮件地址）。
</p>
<p><samp>`Maintainer'</samp>字段必须给出一个名字和尖括号括起的有效的邮件地址（RFC 2822），
用于报告程序存在的问题。结尾处不需要句号或逗号。
</p>
<p>可选字段<samp>`Date'</samp>给出了包当前版本的发行日期。强烈推荐用符合ISO标准的形如yyyy-mm-dd
的格式。
</p>
<p>可选字段<samp>`Depends'</samp>指定了该包依赖的其它包的名子，并用逗号分隔。在包名后面可
以用圆括号添加注释。注释必需包括一个比较操作符（@R{} 2.7.0前的版本只支持
<samp>`&gt;='</samp>和<samp>`&lt;='</samp>），一个空格，一个有效的版本号（即使包属于包束的一部分，包的
名子也需要列出来）。如果你的包依赖特定版本的@R{}，也可以用特殊的包名<samp>`R'</samp>。
例如：如果包只能在2.4.0或更新版本的R中使用，那在<samp>`Depends'</samp>字段里应添加
<samp>`R (&gt;= 2.4.0)'</samp>。<code>library</code>命令和@R{}包的验证程序都会用到<samp>`Depends'</samp>
字段，因此不适当的语法或误用<samp>`Depends'</samp>字段声明需要的包，都将会带来错误。
除@R{}系统外其它依赖的内容都应在<samp>`SystemRequirements'</samp>字段或一个单独的
<tt>`README'</tt>文件中列出。
</p>
<p>@R{}的<code>INSTALL</code>命令在安装包之前将会检查@R{}的版本是否符合要求。当调用
<code>library</code>命令，或用镜像保存包的代码，或懒加载时（lazy-loading），也会检查
依赖包的版本，并加载这些包。
</p>
<p>从@R{} 2.7.0开始，包（或<samp>`R'</samp>）能在<samp>`Depends'</samp>字段里出现多次，但早期版本的
R只识别第一个。（所有出现在<samp>`Depends'</samp>字段里的注释都会被检查，因此只有
<samp>`&gt;='</samp>和<samp>`&lt;='</samp>可以使用）
</p>
<p>可选字段<samp>`Imports'</samp>列出需要导入命名空间但不需要加载的包。通过操作符
<samp>`::'</samp>和<samp>`:::'</samp>访问的命名空间必须列在这里，或放在<samp>`Suggests'</samp>或<samp>`Enhances'</samp>
字段里（见下面）。理想地这个字段应包括所有的标准包，重要的是要包括使用S4的包
（因为它们的类定义能够改变，而且<tt>`DESCRIPTION'</tt>文件能用来决定那些包需要重安装）。
在<samp>`Depends'</samp>字段里声明的包不应该再出现在<samp>`Imports'</samp>字段里。<samp>`Imports'</samp>
字段里的包能指定特定的版本，但在导入命名空间的时候并不会检查版本。
</p> 
<p>可选字段<samp>`Suggests'</samp>的语法和<samp>`Depends'</samp>字段相同，列出不必需的包。这些包仅
在示例或vignette（see section <a href="#SEC16">写包的vignettes</a>）里使用，而且在函数体里被加
载。比如：@pkg{foo}包的一段代码例子中用到了@pkg{bar}包的一个数据集。只有在执行
这个例子的时候，才需要用到@pkg{bar}包，而一般使用@pkg{foo}包的时候@pkg{bar}包并
不是必需的。
</p>
<p>最后，可选字段<samp>`Enhances'</samp>列出将被当前包增强的包，比如：为这些包的类提供方法。
</p>
<p>一般的原则是：
</p>
<ul>
<li>
在用<code>library(<var>pkgname</var>)</code>加载当前包时，如果需要某些包的命名空间，那这些包
应列在<samp>`Imports'</samp>字段里，而不是放在<samp>`Depends'</samp>字段中。 
</li><li>
在用<code>library(<var>pkgname</var>)</code>加载当前包时，如果需要附带加载某些包，那这些包
应放在<samp>`Depends'</samp>字段里。
</li><li>
成功运行<code>R CMD check</code>命令所需要的包，都应该列在<samp>`Depends'</samp>、
<samp>`Suggests'</samp>或<samp>`Imports'</samp>字段里。

</li></ul>


<p>特别地，为了精简安装，那些仅为例子或vignette提供数据的比较大的包，应放在
<samp>`Suggests'</samp>字段，而不是<samp>`Depends'</samp>字段。
</p>
<p>目前仅<samp>`Depends'</samp>字段里的对包的版本限制是有效的，因为<code>library</code>命令仅
加载并检查<samp>`Depends'</samp>字段里的包的版本。
</p>
<p>可选字段<samp>`URL'</samp>给出由逗号或空格分隔的<acronym>URL</acronym>列表，如：作者的主页，该软件
的补充材料的网页。这些<acronym>URL</acronym>地址在<acronym>CRAN</acronym>被转换成超链接。
</p>
<p>基本包和推荐包分别有一个值为<samp>`base'</samp>或<samp>`recommended'</samp>的字段<samp>`Priority'</samp> 
（比如：整合在@R{}标准发布里的包，或<acronym>CRAN</acronym>上推荐包括到@R{}的二进制版本里
的包）。其它包不能使用这些优先权。
</p>
<p>在安装包时一个包里的所有@R{}代码文件将连接成一个单独的文件，可选字段<samp>`Collate'</samp>
（或操作系统特异的字段<samp>`Collate.<var>OStype</var>'</samp>，如<samp>`Collate.windows'</samp>）
用来控制这些@R{}代码文件的顺序。默认地根据<samp>`C'</samp>安排文件的顺序。当指定<samp>`Collate'</samp>
时，<samp>`Collate'</samp>字段里必须列出相对于<tt>`R'</tt>子目录的所有@R{}代码文件（考虑操作系统
特异的子目录，见<a href="#SEC6">包的子目录</a>），并用空格分隔。双引号不能出现在路
径名中。Windows操作系统下，带空格或引号的路径需要用引号括起来。操作系统特异的字
段（<samp>`Collate.unix'</samp>或<samp>`Collate.windows'</samp>）将替代<samp>`Collate'</samp>。
</p>
<p>可选字段<samp>`LazyLoad'</samp>和<samp>`LazyData'</samp>分别控制@R{}对象和数据集是否被懒加载：
字段值为<samp>`yes'</samp>或<samp>`true'</samp>时，将会懒加载；字段值为<samp>`no'</samp>或<samp>`false'</samp>时，
就不会懒加载（字段值也可大写）。
</p>
<p>如果你写的包用到了@pkg{methods}包，必须指定<samp>`LazyLoad: yes'</samp>。
</p>
<p>在创建Wubdiws包时，可选字段<samp>`ZipData'</samp>控制是否自动压缩数据目录。如果包不使用
压缩的数据目录，该字段设为<samp>`no'</samp>。
</p>
<p><tt>`DESCRIPTION'</tt>文件不一定全用<acronym>ASCII</acronym>编码，可在<samp>`Encoding'</samp>字段里指
定编码方式。指定的编码被用于<tt>`DESCRIPTION'</tt>文件、<tt>`R'</tt>代码文件和
<tt>`NAMESPACE'</tt>文件，也是<tt>`.Rd'</tt>文件的默认编码。运行<code>R CMD check</code>命
令时，示例代码也假定使用这种编码方式。@R{} 2.8.0后，该编码还用于<code>CITATION</code>
文件。<code>latin1</code>、<code>latin2</code>和<code>UTF-8</code>这几种编码方式被认为是可移植的。
（指定编码方式会降低包的可移植性，除非必要不要指定编码方式）
</p>
<p>可选字段<samp>`OS_type'</samp>指定包需要的操作系统。如果使用该字段，字段值必须为<code>unix</code>
或<code>windows</code>，表示该包只能安装在<samp>`.Platform$OS.type'</samp>给出的操作系统上。
</p>
<p>可选字段<samp>`Type'</samp>指定包的类型：see section <a href="#SEC32">Package types</a>。
</p>
<blockquote><p><b> 注意:</b> 不应该有<samp>`Built'</samp>或<samp>`Packaged'</samp>字段，因为它们会由包管理工具添加。
</p></blockquote>

<hr size="6">
<a name="The-INDEX-file"></a>
<a name="SEC5"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC4" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC6" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC3" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.1.2 <tt>`INDEX'</tt>文件 </h3>

<p>可选文件<tt>`INDEX'</tt>里的每一行是包中一个有用的对象，并给出对象的名字和描述
（未被显示调用的函数可能不放在里面）。通常这个文件是没有的，相关的信息在安装包
（see section <a href="#SEC12">检查和创建包</a>）时从文档自动生成（用@pkg{tools}包里
的<code>Rdindex()</code>函数）。
</p>
<p>推荐将包的相关信息放在一个总帮助页面（see section <a href="#SEC41">Documenting packages</a>）或vignette里
（see section <a href="#SEC16">写包的vignettes</a>），而不直接修改<tt>`INDEX'</tt>文件。
</p>
<hr size="6">
<a name="Package-subdirectories"></a>
<a name="SEC6"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC5" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC7" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC3" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.1.3 包的子目录 </h3>

<p>子目录<tt>`R'</tt>只包括@R{}代码文件。要安装的代码文件的名字必须以<acronym>ASCII</acronym>字母
（小写或大写）或数字开始，扩展名为<tt>`.R'</tt>、<tt>`.S'</tt>、<tt>`.q'</tt>、<tt>`.r'</tt>或
<tt>`.s'</tt>。我们推荐使用<tt>`.R'</tt>，因为这个扩展名好像没被其它软件使用过。可以用
<code>source()</code>命令读入文件，@R{}对象必须由创建。注意代码文件名和所创建的R对象间
没有必然联系。
</p>
<p>It should be possible to read in the files using <code>source()</code>, so
@R{} objects must be created by assignments.  Note that there need be no
connection between the name of the file and the R objects created by it.
Ideally, the @R{} code files should only directly assign @R{} objects
and definitely should not call functions with side effects such as
<code>require</code> and <code>options</code>.  If computations are required to
create objects these can use code `earlier' in the package (see the
<samp>`Collate'</samp> field) plus, <em>only if lazyloading is used</em>,
functions in the <samp>`Depends'</samp> packages provided that the objects
created do not depend on those packages except <em>via</em> name space
imports.  (Packages without namespaces will work under somewhat less
restrictive assumptions.)
</p>
<p>Two exceptions are allowed: if the <tt>`R'</tt> subdirectory contains a file
<tt>`sysdata.rda'</tt> (a saved image of @R{} objects) this will be
lazy-loaded into the name space/package environment - this is intended
for system datasets that are not intended to be user-accessible via
<code>data</code>.  Also, files ending in <samp>`.in'</samp> will be allowed in the
<tt>`R'</tt> directory to allow a <tt>`configure'</tt> script to generate
suitable files.
</p>
<p>代码文件里只允许使用<acronym>ASCII</acronym>字符（和控制字符 tab，换页符，换行符，回车符
）。其它字符可在注释里使用，但在UTF-8编码下可能是不可读的。对象名称里的非
<acronym>ASCII</acronym>字符通常会导致安装包的失败。
will normally<a name="DOCF3" href="#FOOT3">(3)</a> fail when the package is installed.  Any byte will be
allowed<a name="DOCF4" href="#FOOT4">(4)</a> in a quoted character string (but <code>\uxxxx</code>
escapes should not be used), but non-<acronym>ASCII</acronym> character strings
may not be usable in some locales and may display incorrectly in others.
</p>

<a name="IDX6"></a>
<a name="IDX7"></a>
<a name="IDX8"></a>
<p>一个包里有各种各样的@R{}函数可用于初始化和清理。对没有命名空间的包，用<code>.First.lib</code>
和<code>.Last.lib</code>函数（有命名空间的包，用See section <a href="#SEC21">Load hooks</a>函数）。按照惯例，在
一个名为zzz.R的文件里定义这些函数。如果定义了<code>.First.lib</code>，在加载包的时候会
调用这个函数，参数是<code>libname</code>和<code>pkgname</code>（如果包在安装时有版本信息，
包的名字会包含版本号，比如<samp>`ash_1.0.9'</samp>）。常用的是在<code>.First.lib</code>
里调用<code>library.dynam</code>，加载编译的代码。还可以调用会带来额外影响的函数。
如果存在函数<code>.Last.lib</code>，它将在包detach前被调用（参数是包的安装路径）。一般
不detach包，<code>.Last.lib</code>也很少用。<code>.Last.lib</code>的一个用途是调用
<code>library.dynam.unload</code>释放编译的代码。
子目录<tt>`man'</tt>应该只包括包中对象的Rd格式的文档文件。文件名应以<acronym>ASCII</acronym>
字母（小写或大写）或数字开头，扩展名为<tt>`.Rd'</tt>（默认）或<tt>`.rd'</tt>。而且文件名
必须在<samp>`file://'</samp>地址中有效，即<a name="DOCF5" href="#FOOT5">(5)</a>文件名应是不包括<samp>`%'</samp>的<acronym>ASCII</acronym>。
更详细的信息请参考See section <a href="#SEC36">Writing R documentation files</a>。
注意一个包中所有用户水平的对象都必须有其文档文件。如果包<var>pkg</var>包括一些仅在内部
使用的用户水平的对象，应用一个文件<tt>`<var>pkg</var>-internal.Rd'</tt>记录这些对象的帮助
文档，并明确地说明用户不需要调用这些对象。可以R标准发布中的grid包作为参考。
对使用大量内部对象的包，应注意在命名空间里隐藏这些内部对象，这样就不需要相关的文
档文件了（见 see section <a href="#SEC18">包命名空间</a>）。
</p>
<p>子目录<tt>`R'</tt>和<tt>`man'</tt>可以包括操作系统特异的名为<tt>`unix'</tt>或<tt>`windows'</tt>
的子目录。
</p>
<p>编译代码的源文件和头文件放在<tt>`src'</tt>目录里，也可能有<tt>`Makevars'</tt>或
<tt>`Makefile'</tt>文件。当用<code>R CMD INSTALL</code>命令安装包时，Make将控制编译，并且
连接到一个共享对象以便加载R。这个过程有默认的变量和规则（在配置@R{}的时候就决定了
，并记录在<tt>`<var>R_HOME</var>/etc<var>R_ARCH</var>/Makeconf'</tt>文件里），支持C、C++、
FORTRAN 77、Fortran 9x<a name="DOCF6" href="#FOOT6">(6)</a>、Objective C和Objective C++（其扩展名分别为：
<tt>`.c'</tt>；<tt>`.cc'</tt>或<tt>`.cpp'</tt>或<tt>`.C'</tt>；<tt>`.f'</tt>；<tt>`.f90'</tt>或<tt>`.f95'</tt>；
<tt>`.m'</tt>；<tt>`.mm'</tt>或<tt>`.M'</tt>）。对C++<a name="DOCF7" href="#FOOT7">(7)</a>或Fortran 9x文件，我们推荐用<tt>`.h'</tt>做头文件。默认的规则可通过
设置<tt>`src/Makevars'</tt>文件里的宏来改变 (见：see section <a href="#SEC9">Using <tt>`Makevars'</tt></a>)。注意这个
机制应该通用化，以避免使用包特异的<tt>`src/Makefile'</tt>文件。如果要发布这个文件，
应特别注意该文件的通用型，以便能在所有的@R{}平台上使用。它应当有一个恰当的最初
目标（一般称为<samp>`all'</samp>）和目标<samp>`clean'</samp>（可能是空的），<samp>`clean'</samp>会移除
Make产生的所有文件（执行<samp>`R CMD INSTALL --clean'</samp>和
<samp>`R CMD INSTALL --preclean'</samp>）。Windows下有平台特异的文件<tt>`src/Makevars.win'</tt>，
其优先权高于<tt>`src/Makevars'</tt>，而且必须使用<tt>`src/Makefile.win'</tt>。
</p>
<p>子目录<tt>`data'</tt>存放包的额外的数据文件，这些文件可由<code>data()</code>加载。目前，
有三种类型的数据文件，扩展名分别为：R代码（<tt>`.R'</tt>或<tt>`.r'</tt>），表（
<tt>`.tab'</tt>、<tt>`.txt'</tt>或<tt>`.csv'</tt>，文件格式可参考<code>?data</code>），
<code>save()</code>保存的镜像（<tt>`.RData'</tt>或<tt>`.rda'</tt>）。（R的所有端口都用同样的二
进制（XDR）格式，可以读取压缩的数据镜像。默认地可由<code>save(, compress = TRUE)</code>
保存镜像，以节省空间）。注意R代码应不用包中提供的其它功能，这样在没有加载包的时
候也可以用那些数据文件。<tt>`data'</tt>目录里不再需要提供<tt>`00Index'</tt>文件，相应的
信息可在安装或创建包的时候由文档自动产生（见see section <a href="#SEC12">检查和创建包</a>）。
如果数据文件非常大，你可在<tt>`data'</tt>子目录里提供一个<tt>`datalist'</tt>文件以加速安
装。<tt>`datalist'</tt>文件的每行表示<code>data()</code>里的一个数据。如果<code>data(foo)</code>
加载数据<samp>`foo'</samp>，就用格式<samp>`foo'</samp>；如果<code>data(foo)</code>加载数据<samp>`bar'</samp>和
<samp>`bah'</samp>，就用格式<samp>`foo: bar bah'</samp>。
</p>
<p>子目录<tt>`demo'</tt>里的R脚本用于演示包的功能（通过<code>demo()</code>运行）。演示可能是
交互的，且不被自动检查。如果需要测试代码，应放在<tt>`tests'</tt>目录里。脚本文件必须
以字母开头（小写或大写），扩展名为<tt>`.R'</tt>或<tt>`.r'</tt>。如果提供了演示，子目录
<tt>`demo'</tt>里应该有一个名为<tt>`00Index'</tt>的文件，一行为一个演示文件，给出用空格
分隔的名称和描述（注意这个索引文件不能自动生成）。
</p>
<p>子目录<tt>`inst'</tt>里的内容将会被递归复制到安装目录。<tt>`inst'</tt>里的子目录不能与
@R{}使用的目录重复（<tt>`R'</tt>、<tt>`data'</tt>、<tt>`demo'</tt>、<tt>`exec'</tt>、<tt>`libs'</tt>、
<tt>`man'</tt>、<tt>`help'</tt>、<tt>`html'</tt>、<tt>`latex'</tt>、<tt>`R-ex'</tt>、<tt>`chtml'</tt>和
<tt>`Meta'</tt>）。<tt>`inst'</tt>里的文件是在<tt>`src'</tt>创建后复制的，因而<tt>`Makefile'</tt>
能建立用于安装的文件。除了<tt>`INDEX'</tt>、<tt>`LICENSE'</tt>/<tt>`LICENCE'</tt>、
<tt>`COPYING'</tt>和<tt>`NEWS'</tt>外（从@R{} 2.7.0开始），其它的顶层文件<a name="DOCF8" href="#FOOT8">(8)</a>不会被安装，
使用Windows和MacOS X编译包的用户也看不到这些文件（用<code>R CMD INSTALL</code>或
<code>install.packages</code>命令的用户也看不到这些文件）。如果你希望终端用户能看到
某些文件，应把它们放在<tt>`inst'</tt>目录里。
</p>
<a name="IDX9"></a>
<a name="IDX10"></a>
<p>你可能需要增加<tt>`CITATION'</tt>文件到<tt>`inst'</tt>目录里，供citation()函数使用。
如果<tt>`inst'</tt>里有命名异常（named exception），<tt>`inst'</tt>里的版本应与安装包的
版本一致。如果你想在早版本的@R{}里安装<tt>`NEWS'</tt>文件，你需要将其放在<tt>`inst'</tt>
里。
</p>
<p>子目录<tt>`tests'</tt>用于存放具体包的测试代码，类似于@R{}版本里的测试程序。测试代码
可直接由<tt>`.R'</tt>文件提供，也可由<tt>`.Rin'</tt>文件间接创建<tt>`.R'</tt>文件（例如：
收集包中所有的函数对象，然后用临时参数调用它们）。<tt>`.R'</tt>文件的运行结果写在
<tt>`.Rout'</tt>文件中。如果还有个<tt>`.Rout.save'</tt>文件，将比较这两个文件，报告两者
的差异，但不会引起错误。<tt>`tests'</tt>目录被复制到检查区域，并将其作为工作目录进行
测试，还设置了<code>R_LIBS</code>以确保在测试时<code>library(<var>pkg_name</var>)</code>能找到安
装的包。
</p>
<p>子目录<tt>`exec'</tt>应包括包需要的其它可执行文件，典型的是一些解释程序的脚本，如
shell、Perl或Tcl。这个机制现在只有非常少的包用，仍然在试验阶段。
</p>
<p>子目录<tt>`po'</tt>存放与本地化（localization）相关的文件，见
see section <a href="#SEC28">Internationalization</a>。
</p>
<hr size="6">
<a name="Package-bundles"></a>
<a name="SEC7"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC6" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC8" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC3" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.1.4 包束 </h3>

<p>有时候将几个包合在一起作为一个包束发布是很方便的（@pkg{VR}就是一个包括四个包的
包束的例子）。类Unix和Windows操作系统上的安装过程，都可以处理包束。
</p>
<p>包束的<tt>`DESCRIPTION'</tt>文件有一个<samp>`Bundle'</samp>字段，但没有<samp>`Package'</samp>字段，
比如：
</p>
<blockquote><table class="cartouche" border="1"><tbody><tr><td>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">Bundle: VR
Priority: recommended
Contains: MASS class nnet spatial
Version: 7.2-36
Date: 2007-08-29
Depends: R (&gt;= 2.4.0), grDevices, graphics, stats, utils
Suggests: lattice, nlme, survival
Author: S original by Venables &amp; Ripley.
  R port by Brian Ripley &lt;ripley@stats.ox.ac.uk&gt;, following earlier
  work by Kurt Hornik and Albrecht Gebhardt.
Maintainer: Brian Ripley &lt;ripley@stats.ox.ac.uk&gt;
BundleDescription: Functions and datasets to support Venables and
  Ripley, 'Modern Applied Statistics with S' (4th edition).
License: GPL-2 | GPL-3
URL: http://www.stats.ox.ac.uk/pub/MASS4/
</pre></td></tr></tbody></table></td></tr></tbody></table>
</blockquote>

<p><samp>`Contains'</samp>字段列出了用空格分隔的包的名字，将按照它们的名字分别放到不同的子
目录中。在创建和安装的过程中，这些包将以<samp>`Contains'</samp>中给定的顺序安装。应注意
这个字段的顺序，以满足包之间的依赖关系。
</p>
<p>包束里的包和标准的包基本一样，只是用<tt>`DESCRIPTION.in'</tt>取代了<tt>`DESCRIPTION'</tt>
文件。包的<tt>`DESCRIPTION.in'</tt>文件包含了包束的<tt>`DESCRIPTION'</tt>文件里没有的字
段，比如：
</p>
<blockquote><table class="cartouche" border="1"><tbody><tr><td>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">Package: spatial
Description: Functions for kriging and point pattern analysis.
Title: Functions for Kriging and Point Pattern Analysis
</pre></td></tr></tbody></table></td></tr></tbody></table>
</blockquote>

<p>除了<tt>`DESCRIPTION'</tt>文件和包，包束里的其它文件都会被忽略。
</p>
<p>包束的<tt>`DESCRIPTION'</tt>文件中的<samp>`Depends'</samp>字段应列出所有包依赖的包
（<samp>`Imports'</samp>和<samp>`Suggests'</samp>字段也是这样），而<tt>`DESCRIPTION.in'</tt>文件
不应包括这些字段。 
</p>
<hr size="6">
<a name="Configure-and-cleanup"></a>
<a name="SEC8"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC7" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC9" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC2" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 1.2 配置和清理 </h2>

<p>注意本节的大部分内容都是针对Unix系统的：见后面对Windows端口的评价。
</p>
<p>如果你的包在安装前需要一些依赖系统的配置，你可以在包里用一个可执行的
（Bourne shell）脚本文件<tt>`configure'</tt>。在运行<code>R CMD INSTALL</code>时，这个脚本
将会被最先执行。该校本可由Autoconf机制创建，也可以是你自己写的。这样就可以检测
是否存在某些非标准库，相关的代码在安装包的时候出错，而不是在编译或使用包的时候
报错。总之，你的扩展包完全有Autoconf的能力（包括变量替代，搜索库等）。
</p>
<p>在Unix及类似的操作系统上，可执行（Bourne shell）脚本<tt>`cleanup'</tt>在用
<code>R CMD build</code>创建包时被执行。如果<code>R CMD INSTALL</code>命令给出了<samp>`--clean'</samp>
选项，其最后一步也会执行<tt>`cleanup'</tt>脚本。这个脚本能用来清理包的源目录树。特别
地，它将删除所有由<code>configure</code>生成的文件。
</p>
<p>我们以一个（C或FORTRAN）库<code>foo</code>提供的功能为例。用Autoconf，我们能创建一个
配置脚本。这个脚本将查找库，如果找到就将变量<code>HAVE_FOO</code>设置为<code>TRUE</code>，否
则设置为<code>FALSE</code>，并写入输出文件（用<code>HAVE_FOO</code>的值替换输入文件中的
<samp>`@HAVE_FOO@'</samp>）。比如，一个名为<code>bar</code>的函数，只有连接到<code>foo</code>库才
能实现其功能。可以在<tt>`configure.ac'</tt>中使用（假定Autoconf是2.50或更高版本）：
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">AC_CHECK_LIB(foo, <var>fun</var>, [HAVE_FOO=TRUE], [HAVE_FOO=FALSE])
AC_SUBST(HAVE_FOO)
......
AC_CONFIG_FILES([foo.R])
AC_OUTPUT
</pre></td></tr></tbody></table>


<p>相应的@R{}函数在<tt>`foo.R.in'</tt>里定义如下：
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">foo &lt;- function(x) {
    if(!@HAVE_FOO@)
      stop("Sorry, library 'foo' is not available"))
    ...
</pre></td></tr></tbody></table>

<p>如果没有找到<code>foo</code>库（和想要的功能），<code>configure</code>将生成如下的@R{}源
文件<tt>`foo.R'</tt>：
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">foo &lt;- function(x) {
    if(!FALSE)
      stop("Sorry, library 'foo' is not available"))
    ...
</pre></td></tr></tbody></table>

<p>上面的代码将使@R{}函数无效。
</p>
<p>针对可用或不可用的功能，可分别用不同的文件片断。
</p>
<p>You will very likely need to ensure that the same C compiler and
compiler flags are used in the <tt>`configure'</tt> tests as when compiling
你需要确保<tt>`configure'</tt>使用的C编译器和编译标识，与编译@R{}或包时使用的一样。
在Unix系统下，你可在<tt>`configure.ac'</tt>里增加一段代码以达到这个目的：
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">: ${R_HOME=`R RHOME`}
if test -z "${R_HOME}"; then
  echo "could not determine R_HOME"
  exit 1
fi
CC=`"${R_HOME}/bin/R" CMD config CC`
CFLAGS=`"${R_HOME}/bin/R" CMD config CFLAGS`
CPPFLAGS=`"${R_HOME}/bin/R" CMD config CPPFLAGS`
</pre></td></tr></tbody></table>

<p>（这个脚本将作为<code>R CMD INSTALL</code>命令的一部分运行，为了使用正确的@R{}版本，
必须用<samp>`${R_HOME}/bin/R'</samp>而不用<samp>`R'</samp>。）
</p>
<a name="IDX11"></a>
<p>注意早版本的文档推荐从<tt>`<var>R_HOME</var>/etc<var>R_ARCH</var>/Makeconf'</tt>直接提取（用
grep和sed）配置信息，这只适用于以文字记录的变量。你可以用<code>R CMD config</code>命令
得到基本配置变量的值，连接@R{}所必须的头文件和库标识，更详细的信息见<kbd>R
CMD config --help</kbd>。（从@R{} 2.6.0开始，也可在Windows下使用。）
</p>
<p>检查外部的BLAS库，可以使用官方的Autoconf宏库里的<code>ACX_BLAS</code>宏，如：
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">F77=`"${R_HOME}/bin/R" CMD config F77`
AC_PROG_F77
FLIBS=`"${R_HOME}/bin/R" CMD config FLIBS`
ACX_BLAS([], AC_MSG_ERROR([could not find your BLAS library], 1))
</pre></td></tr></tbody></table>
<p>注意@R{}决定的<code>FLIBS</code>必须确保FORTRAN 77能在所有的@R{}平台上使用。Autoconf的
宏<code>AC_F77_LIBRARY_LDFLAGS</code>会重写<code>FLIBS</code>，因而不要调用它（已从
<code>ACX_BLAS</code>里删除）。（当前版本的Autoconf允许将<code>FLIBS</code>设置成不考虑
FORTRAN连接标识；当前版本的@R{}也能检测BLAS和LAPACK库。）
</p>
<p>你应该记住配置脚本在Windows系统下可能不能正常运行（尽管简单的shell脚本能运行，
但Autoconf产生的脚本一般都不能运行）。如果你的包要公开发布，请给非Unix系统用户
足够的手动配置信息，或者提供一个<tt>`configure.win'</tt>脚本。（也可以有一个
<tt>`cleanup.win'</tt>脚本。它们都必须是由<code>ash</code>执行的脚本，<code>ash</code>
是Bourne类<code>sh</code>的最简版本。）
</p>
<p>在某些极少见的情况下，配置和清理脚本需要知道包的安装位置。比如；用C代码创建共享
object或DLLs的包。通常，@R{}动态加载的对象会连接到另一个依赖的对象。在某些操作系
统上，我们能给@R{}动态加载的对象添加依赖对象的位置。这意味着用户不需要设置环境
变量<code>LD_LIBRARY_PATH</code>（或类似变量）的值，二级对象会自动加载。另一个例子是，
当一个包安装运行时需要的支持文件时，它们的地址在安装时会被写入@R{}的数据结构中
（如@pkg{SJava}包里的Java存档文件）。
<a name="IDX12"></a>
<a name="IDX13"></a>
安装脚本通过两个环境变量<code>R_LIBRARY_DIR</code>和<code>R_PACKAGE_DIR</code>得到库目录
（由<samp>`-l'</samp>参数指定）和包目录。另外，<code>R_PACKAGE_NAME</code>变量里记录了将要安装
的包的名字（<samp>`survival'</samp>或<samp>`MASS'</samp>）。
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC9">1.2.1 Using <tt>`Makevars'</tt></a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"> 使用Makevars             
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC10">1.2.2 配置实例</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
<tr><td valign="top" align="left"><a href="#SEC11">1.2.3 用F95代码</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
</tbody></table>

<hr size="6">
<a name="Using-Makevars"></a>
<a name="SEC9"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC8" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC10" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC8" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.2.1 Using <tt>`Makevars'</tt> </h3>

<p>有时候用<tt>`Makevars'</tt>文件，可以避免你自己写<tt>`configure'</tt>脚本：一个最常见的
使用<tt>`configure'</tt>脚本的方法是从<tt>`Makevars.in'</tt>生成<tt>`Makevars'</tt>。
</p>
<p><tt>`Makevars'</tt>文件最常见的用途是通过<code>PKG_CPPFLAGS</code>设置额外的预处理标识
（如：路径），通过<code>PKG_CFLAGS</code>、<code>PKG_CXXFLAGS</code>和<code>PKG_FFLAGS</code>为
C、C++或FORTRAN分别设置编译器（见see section <a href="#SEC80">Creating shared objects</a>）。
</p>
<p><tt>`Makevars'</tt>也用于设置连接的标识，比如：选项<samp>`-L'</samp>或<samp>`-l'</samp>.
</p>
<p>当为一个你想要发布的包写<tt>`Makevars'</tt>文件时，注意确保该文件不能仅适用于你的编
译器：类似<samp>`-O2 -Wall -pedantic'</samp>的标识仅适用于GCC。
</p>
<p>有一些宏在配置@R{}的同时就已经建立了，在类似Unix的系统下放在
<tt>`<var>R_HOME</var>/etc<var>R_ARCH</var>/Makeconf'</tt>文件里，能在<tt>`Makevars'</tt>中使用。
包括：
</p>
<dl compact="compact">
<dt> <code>FLIBS</code></dt>
<dd><a name="IDX14"></a>
<p>这个宏包含了连接FORTRAN代码所需要的一套库。可能需要包括在<code>PKG_LIBS</code>里。
</p>
</dd>
<dt> <code>BLAS_LIBS</code></dt>
<dd><a name="IDX15"></a>
<p>这个宏包含了创建@R{}时用到的BLAS库。可能需要包括在<code>PKG_LIBS</code>里。必须注意如
果它是空的，@R{}将包含双精度和双复数（double-complex）的BLAS程序，但没有单精度或
复数程序。如果包括了<code>BLAS_LIBS</code>，那在类似Unix的系统下也需要<code>FLIBS</code>
<a name="DOCF9" href="#FOOT9">(9)</a>，因为大多数BLAS库都是用FORTRAN写的。
</p> 
</dd>
<dt> <code>LAPACK_LIBS</code></dt>
<dd><a name="IDX16"></a>
<p>这个宏包含了创建@R{}时用到的LAPACK库。可能需要包括在<code>PKG_LIBS</code>里。这可能会
指向一个动态库<code>libRlapack</code>，包括创建@R{}所需要的双精度的LAPACK程序、双复数
的LAPACK和BLAS程序；或者指向一个外部的LAPACK库；如果BLAS库包括了LAPACK，
它也可能为空。
</p>
<p>[不保证LAPACK库提供所有的双精度和双复数程序，某些不提供辅助程序。]
</p>
<p>宏<code>BLAS_LIBS</code>和<code>FLIBS</code>通常应放在<code>LAPACK_LIBS</code>后。
</p>
</dd>
<dt> <code>SAFE_FFLAGS</code></dt>
<dd><a name="IDX17"></a>
<p>这个宏包括了避免过度优化（over-optimization）FORTRAN代码的标识：典型地
对@cputype{ix86}平台上的<samp>`-g -O2 -ffloat-store'</samp>用<code>g77</code>或
<code>gfortran</code>。注意这个标识不是<code>PKG_FFLAGS</code>的一部分，而是<code>FFLAGS</code>
的代替品。 它专用于FORTRAN-77的编译器<samp>`F77'</samp>，但对Fortran 90/95的编译器
<samp>`FC'</samp>并不是必须的。见本节后面的例子。
</p></dd>
</dl>

<a name="IDX18"></a>
<p>在<tt>`Makevars'</tt>里设置的某些宏就不能在用<code>R CMD SHLIB</code>设置：特别地，如果
<tt>`Makevars'</tt>设置了<samp>`OBJECTS'</samp>，它就不能再用<code>make</code>命令行设置。
这在用隐式规则（implicit rule）进行关联时有用，允许编译其它类型的源代码，并将其
包括在共享对象里。
</p>
<p>注意<tt>`Makevars'</tt>通常不应该包括目标对象（target），因为<tt>`Makevars'</tt>放在默认
的makefile前（除了Windows系统），而且<code>make</code>是在没有外部对象时被调用。为了
解决这个问题，在实际对象前用一个合适的假对象：比如包@pkg{fastICA}用
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">SLAMC_FFLAGS=$(R_XTRA_FFLAGS) $(FPICFLAGS) $(SHLIB_FFLAGS) $(SAFE_FFLAGS)

all: $(SHLIB)

slamc.o: slamc.f
        $(F77) $(SLAMC_FFLAGS) -c -o slamc.o slamc.f
</pre></td></tr></tbody></table>

<p>确保LAPACK程序在有限次循环里找到某些常数。Windows下的等价写法如下：
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">slamc.o: slamc.f
        $(F77) $(SAFE_FFLAGS) -c -o slamc.o slamc.f
</pre></td></tr></tbody></table>
<p>更一般地，在类似Unix系统下可以用：
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">.PHONY: all

all: before $(SHLIB) after

before:
        Things that need to be done first like creating libraries

after:
        Cleanup needed after 'before'
</pre></td></tr></tbody></table>

<p>在Windows系统，可将依赖（dependencies）增加到所有的目标对象（要调用的对象），
以包@pkg{rcom}为例：
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">all: ../inst/tst/bin/rcom_test.exe extraclean

../inst/tst/bin/rcom_test.exe: rcom_test.exe
	$(MKDIR) -p ../inst/tst/bin
	$(CP) $? $&nbsp;rcom_test.exe: rcom_test.o
rcom_test-LIBS = -L. -lsupc++ -luuid -lole32 -loleaut32

extraclean:
        $(RM) rcom_test.exe
</pre></td></tr></tbody></table>

<p>增加的依赖将在DLL后被创建：命令里也可能有一个目标对象<samp>`all'</samp>（而不是依赖）
（这种做法并不明智）。
</p>
<p>另两个对象<samp>`before'</samp>和<samp>`after'</samp>，默认地没有依赖，也没有命令，因而在
<tt>`Makevars.win'</tt>里可以忽略。参考<a href="#SEC83">Linking to other packages</a>的例子。
</p>

<hr size="6">
<a name="Configure-example"></a>
<a name="SEC10"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC9" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC11" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC8" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.2.2 配置实例 </h3>

<p>基于@pkg{RODBC}包，下面给出一个由<tt>`configure'</tt>脚本创建<tt>`src/Makevars'</tt>的
例子。
</p>
<p>在包的最包层目录（包含<tt>`configure.ac'</tt>），运行<code>autoconf</code>命令从
<tt>`configure.ac'</tt>生成<tt>`configure'</tt>。<tt>`configure.ac'</tt>文件的内容如下：
</p>
<blockquote><table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">AC_INIT([RODBC], 1.1.8) dnl package name, version

dnl A user-specifiable option
odbc_mgr=""
AC_ARG_WITH([odbc-manager],
            AC_HELP_STRING([--with-odbc-manager=MGR],
                           [specify the ODBC manager, e.g. odbc or iodbc]),
            [odbc_mgr=$withval])

if test "$odbc_mgr" = "odbc" ; then
  AC_PATH_PROGS(ODBC_CONFIG, odbc_config)
fi

dnl Select an optional include path, from a configure option
dnl or from an environment variable.
AC_ARG_WITH([odbc-include],
            AC_HELP_STRING([--with-odbc-include=INCLUDE_PATH],
                           [the location of ODBC header files]),
            [odbc_include_path=$withval])
RODBC_CPPFLAGS="-I."
if test [ -n "$odbc_include_path" ] ; then
   RODBC_CPPFLAGS="-I. -I${odbc_include_path}"
else
  if test [ -n "${ODBC_INCLUDE}" ] ; then
     RODBC_CPPFLAGS="-I. -I${ODBC_INCLUDE}"
  fi
fi

dnl ditto for a library path
AC_ARG_WITH([odbc-lib],
            AC_HELP_STRING([--with-odbc-lib=LIB_PATH],
                           [the location of ODBC libraries]),
            [odbc_lib_path=$withval])
if test [ -n "$odbc_lib_path" ] ; then
   LIBS="-L$odbc_lib_path ${LIBS}"
else 
  if test [ -n "${ODBC_LIBS}" ] ; then
     LIBS="-L${ODBC_LIBS} ${LIBS}"
  else
    if test -n "${ODBC_CONFIG}"; then
      odbc_lib_path=`odbc_config --libs | sed s/-lodbc//`
      LIBS="${odbc_lib_path} ${LIBS}"
    fi
  fi
fi

dnl Now find the compiler and compiler flags to use
: ${R_HOME=`R RHOME`}
if test -z "${R_HOME}"; then
  echo "could not determine R_HOME"
  exit 1
fi
CC=`"${R_HOME}/bin/R" CMD config CC`
CPP=`"${R_HOME}/bin/R" CMD config CPP`
CFLAGS=`"${R_HOME}/bin/R" CMD config CFLAGS`
CPPFLAGS=`"${R_HOME}/bin/R" CMD config CPPFLAGS`
AC_PROG_CC
AC_PROG_CPP


if test -n "${ODBC_CONFIG}"; then
  RODBC_CPPFLAGS=`odbc_config --cflags`
fi
CPPFLAGS="${CPPFLAGS} ${RODBC_CPPFLAGS}"

dnl Check the headers can be found
AC_CHECK_HEADERS(sql.h sqlext.h)
if test "${ac_cv_header_sql_h}" = no ||
   test "${ac_cv_header_sqlext_h}" = no; then
   AC_MSG_ERROR("ODBC headers sql.h and sqlext.h not found")
fi

dnl search for a library containing an ODBC function
if test [ -n "${odbc_mgr}" ] ; then
  AC_SEARCH_LIBS(SQLTables, ${odbc_mgr}, ,
      AC_MSG_ERROR("ODBC driver manager ${odbc_mgr} not found"))
else
  AC_SEARCH_LIBS(SQLTables, odbc odbc32 iodbc, ,
      AC_MSG_ERROR("no ODBC driver manager found"))
fi

dnl for 64-bit ODBC need SQL[U]LEN, and it is unclear where they are defined.
AC_CHECK_TYPES([SQLLEN, SQLULEN], , , [# include &lt;sql.h&gt;])
dnl for unixODBC header
AC_CHECK_SIZEOF(long, 4)

dnl substitute RODBC_CPPFLAGS and LIBS
AC_SUBST(RODBC_CPPFLAGS)
AC_SUBST(LIBS)
AC_CONFIG_HEADERS([src/config.h])
dnl and do substitution in the src/Makevars.in and src/config.h
AC_CONFIG_FILES([src/Makevars])
AC_OUTPUT
</pre></td></tr></tbody></table></blockquote>


<p>其中<tt>`src/Makevars.in'</tt>简单地如下：
</p>
<blockquote><table><tbody><tr><td>&nbsp;</td><td><pre class="example">PKG_CPPFLAGS = @RODBC_CPPFLAGS@
PKG_LIBS = @LIBS@
</pre></td></tr></tbody></table></blockquote>

<p>然后会建议用户指定ODBC驱动程序管理文件的位置，用下面的选项指定（分行便于更容易的
阅读）
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">R CMD INSTALL
  --configure-args='--with-odbc-include=/opt/local/include
  --with-odbc-lib=/opt/local/lib --with-odbc-manager=iodbc'
  RODBC
</pre></td></tr></tbody></table>

<p>，或设置环境变量<code>ODBC_INCLUDE</code>和<code>ODBC_LIBS</code>。
</p>
<hr size="6">
<a name="Using-F95-code"></a>
<a name="SEC11"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC10" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC12" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC8" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.2.3 用F95代码 </h3>

<p>目前@R{}不区分FORTRAN 77和Fortran 90/95代码，假定所有的FORTRAN来自扩展名为<tt>`.f'</tt>
的源文件。商业Unix系统代表性地用F95编译器，但对Linux和其它的非商业操作系统，从
2005年4月<code>gcc 4.0.0</code>发布后，才支持F95。只有Windows端口下的@R{} 2.6.0用
Fortran 90编译器。
</p>
<p>这意味着可移植的包需要用正确的FORTRAN 77书写，这对Fortran 95也会是有效的。参考
资料见<a href="http://developer.r-project.org/Portability.html">http://developer.r-project.org/Portability.html</a>。特别地，F95代码的
自由资源也是不可移植的。
</p>
<p>某些系统有备选的F95编译器：如<code>gcc</code>家族的<code>gfortran</code>和<code>g95</code>。
配置@R{}时会（根据名字）找一个类似Fortran 90/95编译器的编译器，并将其设置在
<samp>`FC'</samp>宏里。注意不会检查这个编译器是否完全（或部分）适用于Fortran 90/95。用
Fortran 90/95的包应用<tt>`.f90'</tt>或<tt>`.f95'</tt>做为源文件的扩展名：变量
<code>PKG_FCFLAGS</code>指定所有要用到的特殊标识。不保证编译后的Fortran 90/95代码能与
其它类型的代码混用，也不能保证@R{}支持这样的包。
</p>
<hr size="6">
<a name="Checking-and-building-packages"></a>
<a name="SEC12"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC11" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC13" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC2" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 1.3 检查和创建包 </h2>

<p>在用这些工具之前，请检查你的包是否能被安装和加载。<code>R CMD check</code>能做这样的
检查，但通过直接检查你可以得到信息量更多的错误消息。
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC13">1.3.1 检查包</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
<tr><td valign="top" align="left"><a href="#SEC14">1.3.2 创建包</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
<tr><td valign="top" align="left"><a href="#SEC15">1.3.3 定制检查和创建</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
</tbody></table>

<hr size="6">
<a name="Checking-packages"></a>
<a name="SEC13"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC12" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC14" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC12" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.3.1 检查包 </h3>

<p>用@R{}包检查命令<code>R CMD check</code>，能测试@R{}源包是否能正确工作。它可以检查一个
或多个目录，也可以检查扩展名为<tt>`.tar.gz'</tt>或<tt>`.tgz'</tt>的tar压缩包
<a name="DOCF10" href="#FOOT10">(10)</a>。运行如下一系
列的检查：
</p>
<ol>
<li>
安装包。如果帮助文件里缺少交叉引用、别名重复，都会发出警告。

</li><li>
检查文件名称是否在文件系统和操作系统里有效。

</li><li>
检查文件和目录是否有充分的权限（仅用于Unix）。

</li><li>
用合适版本的<code>file</code>，检查文件的二进制可执行性。（可能有极少的假阳性――
@pkg{foreign}包就有一个）

</li><li>
检查<tt>`DESCRIPTION'</tt>文件的完整性，和其实体的正确性。除非忽略安装测试，如果运行
时找不到依赖的包，将停止检查。还会检查包的名字是否是标准包或<code>library</code>特殊
处理的废弃标准包（<samp>`ctest'</samp>、<samp>`eda'</samp>、<samp>`lqs'</samp>、<samp>`mle'</samp>、<samp>`modreg'</samp>
、<samp>`mva'</samp>、<samp>`nls'</samp>、<samp>`stepfun'</samp>和<samp>`ts'</samp>）。另外会检查是否列出了
<code>library</code>或<code>require</code>里用到的包，<tt>`NAMESPACE'</tt>文件里导入的包，
<code>::</code>或<code>:::</code>调用的包：这并不是对实际导入包的无遗漏的检查。

</li><li>
检查索引信息的完整性（特别是演示和vignette）。

</li><li>
检查包的子目录的文件名是否合适，目录是否为空。文件名的检查由<samp>`--check-subdirs=<var>value</var>'</samp>
选项控制。默认值是<samp>`default'</samp>，仅检查tarball<a name="DOCF11" href="#FOOT11">(11)</a>：默认值可由<samp>`yes'</samp>或<samp>`no'</samp>取代。此外，只有包/包束里没有<tt>`configure'</tt>
脚本，且没有<tt>`src/Makefile'</tt>或<tt>`src/Makefile.in'</tt>文件时，
才会检查<tt>`src'</tt>目录。

<p>为了<tt>`configure'</tt>脚本能产生恰当的文件，<tt>`R'</tt>目录里可以有以<samp>`.in'</samp>结尾的
文件。
</p>
<p>如果目录名类似@R{} check目录，会发出警告 ―― 许多提交到CRAN的包都包括这些。
</p>
</li><li>
检查@R{}文件的语法错误。非<acronym>ASCII</acronym>字节以警告的形式报告，但应当将其看作是错
误，除非已知该包总在同样的locale上使用。

</li><li>
首先检查该包是否能与默认包一起被加载，再检查是否能与已加载的@pkg{base}包一起加载。
如果该包有命名空间，检查命名空间是否能载入一个空的仅加载了@pkg{base}命名空间的
session。（在有默认的包之前，命名空间和包就非常早的被载入session，因而那时包应
该能工作了。）

</li><li>
检查@R{}文件是否能正确调用<code>library.dynam</code>。此外，检查方法是否有其范型
(Generic)的所有参数，检查置换函数的最后参数是否调用<samp>`value'</samp>。检查所有的
外来函数（<code>.C</code>、<code>.Fortran</code>、<code>.Call</code>和<code>.External</code>）是否有一个
<code>PACKAGE</code>参数。如果没有，从包的命名空间是否能推论出合适的DLL。报告任何其它
的调用。（检查是粗略的，用户可检查<code>tools::checkFF("mypkg", verbose=TRUE)</code>的
输出以便补充，尤其是为了用<code>PACKAGE</code>参数时。）

</li><li>
检查Rd文件的语法和元数据（meta data），包括是否有必须字段（<code>\name</code>、
<code>\alias</code>、<code>\title</code>和<code>\description</code>）。检查Rd名字和标题是否非空，
比较找到的关键字和标准关键字。还会检查缺失的交叉引用（连接）。

</li><li>
检查缺失的文档实体，比如包中没有文档的用户水平的对象。

</li><li>
检查函数、数据集和S4类的文档与相应代码的一致性。

</li><li>
检查Rd文件的<code>\usage</code>部分列出的所有函数的参数是否在<code>\arguments</code>部分有
文档说明。

</li><li>
测试C、C++和FORTRAN的源代码和头文件是否有可移植的行尾（仅LF换行符）。如果<tt>`src'</tt>
目录里有<tt>`Makefile'</tt>或<tt>`Makefile.in'</tt>或<tt>`Makevars'</tt>或<tt>`Makevars.in'</tt>，
检查是否有可移植的行尾，并检查<samp>`$(BLAS_LIBS)'</samp>的正确使用。

</li><li>
运行包的文档文件里提供的例子。（用<code>\examples</code>生成可执行的示例代码，见
see section <a href="#SEC36">Writing R documentation files</a>。）

<p>当然，发布的包至少能运行它自带的例子。每个例子在一个空的（`clean'）环境下运行
（因而不能假定已运行过前面的例子），返回T或F报告错误：见
See <a href="file:///C:/Users/Guohui%20Ding/Documents/Tencent%20Files/14750783/FileRecv/R-intro.html#Logical-vectors">(R-intro)Logical vectors</a> section `Logical vectors' in <cite>An Introduction to R</cite>。
</p>
</li><li>
如果源包里有一个<tt>`tests'</tt>目录，会测试这个目录里的代码。（一般由一套<tt>`.R'</tt>
源文件和<tt>`.Rout.save'</tt>输出文件组成。）

</li><li>
执行vignette里的代码（见see section <a href="#SEC16">写包的vignettes</a>）。

</li><li>
如果有一个能正常工作的<code>pdflatex</code>或<code>latex</code>程序，会分别创建
<tt>`.pdf'</tt>或<tt>`.dvi'</tt>版本的包指南（检查Rd文件是否能成功转换）。
</li></ol>

<p>用<kbd>R CMD check --help</kbd>可得到@R{}包检查程序关于相关的更多信息。增加标识可以
选择部分检查步骤。
</p>
<p>如果包包含非<acronym>ASCII</acronym>字符，你需要保证在合适的locale下检查包。这样的包在
<code>C</code> locale下可能会检查出错误，<code>R CMD check</code>会报告相应的警告。如果
可能，任何包都应该在UTF-8 locale下检查。应该注意尽管<code>C</code> locale在控制台很少
被使用，在极少数工作或批量工作时它可能是默认的。
</p>
<hr size="6">
<a name="Building-packages"></a>
<a name="SEC14"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC13" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC15" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC12" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.3.2 创建包 </h3>

<p>用@R{}包创建命令<code>R CMD build</code>，能从源文件创建R包。
</p>
<p>在以常用的gzipped tar压缩格式创建包之前，会执行一些诊断检查和清理。特别地，测试
对象索引是否存在且是最新的，测试C、C++和FORTRAN源文件以及相关的make文件，并在必
须的时候转化成LF行尾。
</p>
<p>在调用创建程序前，应该用<code>R CMD check</code>检查包是否能正确工作。
</p>
<p>为了排除包中的某些文件，可以在顶层目录的<tt>`.Rbuildignore'</tt>文件里指定一个
排除模式（pattern）列表。这些模式应该是Perl的正则表达式，一个一行，匹配相对顶层
目录的文件名称。另外，会默认排除：来自源控制系统的目录<a name="DOCF12" href="#FOOT12">(12)</a>；以<tt>`.Rcheck'</tt>、
<tt>`Old'</tt>或<tt>`old'</tt>结尾的目录；文件<tt>`GNUMakefile'</tt>；以<samp>`.#'</samp>开始的文件；
以<samp>`#'</samp>开始或结尾的文件；以<samp>`~'</samp>、<samp>`.bak'</samp>或<samp>`.swp'</samp>结尾的文件。此外，
那些在<tt>`R'</tt>、<tt>`demo'</tt>和<tt>`man'</tt>目录里的文件，如果<code>R CMD check</code>检查
出其文件名不正确，也将会被排除。
</p>

<p>用<kbd>R CMD build --help</kbd>可获得@R{}包创建程序相关的更多的信息。
</p>
<p>如果<kbd>R CMD build</kbd>调用时没有<samp>`--no-vignettes'</samp>选项，就会在包里重建
vignette（参考see section <a href="#SEC16">写包的vignettes</a>）。为了达到这个目的，要将该
包/包束放在临时库树里，但是任何依赖包都需要安装到库树里（见下面的注解）。
</p>
<p><code>R CMD build</code>运行时要检查是否有空的源目录。这些空目录大多数情况下没有关系，
有时会被删除，并重新创建包。
</p>
<p>创建tarball时，运行<code>R CMD check --check-subdirs=yes</code>检查包的内容是非常有用的。
</p>
<p><code>R CMD build</code>也能创建用于二进制发布的预编译(pre-compiled)包，但更推荐
<code>R CMD INSTALL --build</code>。特别地，推荐Windows用户用<code>R CMD INSTALL --build</code>
，默认安装在主库树里以处理@HTML{}连接。
</p>
<blockquote><p><b> 注意:</b> <code>R CMD check</code>和<code>R CMD build</code>用<samp>`--vanilla'</samp>选项运行@R{}，因而不读
用户的启动文件。如果你需要<code>R_LIBS</code>集（找非标准库里的包），你必须在环境（environment）
里设置它。
</p></blockquote>

<blockquote><p><b> Windows用户应注意:</b> <code>R CMD check</code>和<code>R CMD build</code>命令需要你安装了创建包所需的文件（默认），
也需要Windows工具集（见"R Installation and Administration" manual）。你可能需
要设置<code>TMPDIR</code>，指向一个合适的可写目录的路径，路径不包含空格并以正斜线
(forward slashes)作为分隔符。而且该目录需要需要在一个case-honouring file文件系统
上（某些mounted的文件系统就不能用）。
</p></blockquote>

<hr size="6">
<a name="Customizing-checking-and-building"></a>
<a name="SEC15"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC14" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC16" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC12" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.3.3 定制检查和创建 </h3>

<p>除了充分的命令行选项，<code>R CMD check</code>也支持在配置文件里定制（Perl）配置变量。
假定设置了环境变量<code>HOME</code>，配置文件的默认地址是<tt>`$HOME/.R/check.conf'</tt>，
其地址也可以由<samp>`--rcfile'</samp>选项指定。
</p>
<p>目前有如下的配置变量：
</p>
<dl compact="compact">
<dt> <code>$R_check_use_install_log</code></dt>
<dd><p>如果为true，将安装包相关的检查的输出内容记录到日志文件（默认<tt>`00install.out'</tt>）。
默认值：true。
</p></dd>
<dt> <code>$R_check_all_non_ISO_C</code></dt>
<dd><p>如果为true，不忽视编译器（典型的如GCC）关于系统头文件里非ISO C代码发出的警告。
默认值：false。
</p></dd>
<dt> <code>$R_check_weave_vignettes</code></dt>
<dd><p>如果为true，在检查包时会编排（weave）包的vignette。默认值：true。
</p></dd>
<dt> <code>$R_check_latex_vignettes</code></dt>
<dd><p>如果为true（且<code>$R_check_weave_vignettes</code>也为true），在检查包时会
<code>latex</code>包的vignette：显示<code>Sweave</code>的错误，包括缺失源文件。
默认值：true。
</p></dd>
<dt> <code>$R_check_subdirs_nocase</code></dt>
<dd><p>如果为true，检查<tt>`R'</tt>和<tt>`man'</tt>等目录的大小写。默认值：false。
</p></dd>
<dt> <code>$R_check_subdirs_strict</code></dt>
<dd><p><samp>`--check-subdirs'</samp>的初始设置。默认值：<samp>`default'</samp>（只检查tarballs。如果
没有<tt>`configure'</tt>文件，检查<tt>`src'</tt>）。
</p></dd>
<dt> <code>$R_check_force_suggests</code></dt>
<dd><p>如果为true，当推荐的包不存在时报错。默认值：true。
</p></dd>
<dt> <code>$R_check_use_codetools</code></dt>
<dd><p>如果为true，利用@pkg{codetools}包，细节地分析对象的可见性（visibility）（但可能
有假阳性）。默认值：true。
</p></dd>
<dt> <code>$R_check_Rd_style</code></dt>
<dd><p>如果为true，检查S3方法的Rd实体是否用完整的函数名，而不是用<code>\method</code>。默认值
：true。
</p></dd>
<dt> <code>$R_check_Rd_xrefs</code></dt>
<dd><p>如果为true，检查<tt>`.Rd'</tt>文件的交叉引用。默认值：true。
</p></dd>
</dl>

<p>值<samp>`1'</samp>或小写的字符<samp>`"yes"'</samp>或<samp>`"true"'</samp>，都可以将变量设置为true；同样地，
<samp>`0'</samp>或小写的<samp>`"no"'</samp>或<samp>`"false"'</samp>将变量设置为false。
</p>
<p>例如，如下的配置文件导致用安装日志并关闭weaving。
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">$R_check_use_install_log = "TRUE";
$R_check_weave_vignettes = 0;
</pre></td></tr></tbody></table>


<p>未来版本的@R{}将改进这种定制机制，提供一个类似<code>R CMD build</code>的方案。
</p>
<p>其它的内部设置可通过环境变量<code>_R_CHECK_*_</code>改变：见Perl源代码。
</p>
<hr size="6">
<a name="Writing-package-vignettes"></a>
<a name="SEC16"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC15" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC17" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC2" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 1.4 写包的vignettes </h2>

<p>除了Rd格式的帮助文件，@R{}包允许任意其它格式的文档。这些文档的标准位置在源包的
<tt>`inst/doc'</tt>子目录，当安装包时被复制到<tt>`doc'</tt>子目录。从包的帮助索引到
安装文档的连接被自动建立。<tt>`inst/doc'</tt>里的文档可以是任意格式，但我们强烈推荐
PDF格式，这样任何平台的用户都可以容易地阅读。为了确保从浏览器访问，文件名应以
<acronym>ASCII</acronym>字母开始，完全由<acronym>ASCII</acronym>字母或数字或减号或下划线组成。
</p>
<p>Sweave格式的文档是一个特例，我们称之为<em>package vignettes</em>。Sweave允许整合
LaTeX文档和@R{}代码，包括在@R{}基本发布的@pkg{utils}包里，细节的文档格式请参
考<code>Sweave</code>帮助页面。<tt>`inst/doc'</tt>目录里的vignette由<code>R CMD check</code>测试
其所有@R{}代码，确保代码和文档间的一致性。选项为<code>eval=FALSE</code>的代码段不被测
试。<code>R CMD check</code>里测试vignette的@R{}工作目录，就是安装后的<tt>`doc'</tt>子目录。
确保vignette里需要用到的所有文件（数据集，…），都在源包的<tt>`inst/doc'</tt>
目录里，或能通过调用<code>system.file()</code>访问。
</p>
<p><code>R CMD build</code>会自动地为vignette生成PDF版本，用于源包的发布。在源包里包括PDF
版本，就没必要在安装时编译vignette，比如，包的作者能用自己机器上仅有的私有扩展名
<a name="DOCF13" href="#FOOT13">(13)</a>。
</p>
<p>默认地<code>R CMD build</code>会对所有Sweave格式的文件运行<code>Sweave</code>。如果
<tt>`inst/doc'</tt>目录里没有<tt>`Makefile'</tt>文件，会在所有的vignette上运行
<code>texi2dvi --pdf</code>。如果有<tt>`Makefile'</tt>，<code>R CMD build</code>将在<code>Sweave</code>
后运行<code>make</code>，这样任意格式的文件（plain LaTeX文件，…）都能生成
PDF文件。<tt>`Makefile'</tt>应负责创建PDF文件和清理，比如删除那些不应出现在最终包中
的文件。注意。<code>make</code>会独立与Sweave格式的文件执行。
</p>
<p>没有必要在<tt>`inst/doc'</tt>目录里提供<tt>`00Index.dcf'</tt>文件--当从源文件安装包时
（见see section <a href="#SEC12">检查和创建包</a>），相应的信息自动从所有Sweave文件里的
<code>\VignetteIndexEntry</code>声明产生。<code>\VignetteIndexEntry</code>声明最好放在
LaTeX注释部分，注释部分没必要定义格式。
</p>
<p>如果<tt>`inst/doc'</tt>目录里不存在<tt>`index.html'</tt>文件，在安装时，所有vignette的
@HTML{}索引会由<code>\VignetteIndexEntry</code>自动生成。这个索引会连接到每个包的
@HTML{}帮助系统。
</p>
<hr size="6">
<a name="Submitting-a-package-to-CRAN"></a>
<a name="SEC17"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC16" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC18" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC2" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 1.5 提交包到<acronym>CRAN</acronym> </h2>

<p><acronym>CRAN</acronym>是一个存放@R{}和它人贡献代码的站点，尤其是@R{}包。鼓励@R{}用户参加
这个合作项目，并将自己的包提交到<acronym>CRAN</acronym>。
</p>
<p>在提交包@pkg{mypkg}前，运行下面的步骤测试它是否完整并能完全安装。（仅是Unix程序，
以包括<tt>`<var>mypkg</var>'</tt>的目录作为子目录）。
</p>
<ol>
<li>
运行<code>R CMD build</code>生成<tt>`.tar.gz'</tt>格式的文件。

</li><li>
在<tt>`.tar.gz'</tt>文件上运行<code>R CMD check</code>，检查包是否能安装，例子是否能运行，
文档是否完整并能被处理。如果包里有需要编译的代码，编译时应有合理的诊断信息
（"warnings"），比如，GCC工具的<samp>`-Wall -pedantic'</samp>，Gnu编译器集。（如果@R{}
没有相应的配置，可由<code>PKG_CFLAGS</code>等相关变量完成。）

</li><li>
寻找帮助文件转换中可能存在的问题。例如，应该
<ul class="toc">
<li>
通读<code>R CMD check</code>产生的PDF指南
<tt>`<var>mypkg</var>.Rcheck/<var>mypkg</var>-manual.pdf'</tt>，或由<code>R CMD Rd2dvi --pdf <var>mypkg</var></code>
产生另一个PDF文件拷贝。
</li><li>
用下面的命令检查内部构造
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">grep -r 'normal-bracket' <var>mypkg</var>.Rcheck/<var>mypkg</var>/help
</pre></td></tr></tbody></table>

<p>If any occurrences are found these almost always indicate errors in the
help files, some of which are discussed in the next chapter.
如果找到任何的occurrence，通常暗示着帮助文件里有错误，某些错误将在下一章讨论。
</p></li></ul>

</li></ol>


<p>请确保你能运行这整个过程，仅有你能理解的警告，且你有不排除这些警告的理由。一般地，
包应通过<code>R CMD check</code>没有任何警告，这样才能被<acronym>CRAN</acronym>包承认。如果你有
不能排除的警告（比如某些你认为是假的警告），提交时应发送一条注解。
</p>
<p>当做完所有测试后，用<samp>`anonymous'</samp>作为注册名，你的邮箱地址作为密码，将
文件<tt>`.tar.gz'</tt>上传到<a href="ftp://cran.r-project.org/incoming/">ftp://CRAN.R-project.org/incoming/</a>（注意：用
<samp>`ftp'</samp>连接服务器，而不用<samp>`sftp'</samp>），并向<a href="mailto:CRAN@R-project.org">CRAN@R-project.org</a>
发送相关的消息。<acronym>CRAN</acronym>的维护人员在将这个提交存档之前，将运行这些测试。
</p>
<p>注意由于安全原因，<acronym>CRAN</acronym>一般不接受预编译的二进制提交。 
</p>

<hr size="6">
<a name="Package-name-spaces"></a>
<a name="SEC18"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC17" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC19" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC2" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 1.6 包命名空间 </h2>

<p>@R{}有一个包的命名空间管理系统。这个系统允许包的作者指定包中的哪些变量应该导出
以便包的用户使用，并指定哪些变量应该从其它包导入。 
</p>
<p>目前为一个包指定命名空间的机制是在包的顶层目录里放一个<tt>`NAMESPACE'</tt>文件。这个
文件描述名字空间的导入和导出。另外记录要加载的共享对象和所提供的S3方法。注意这个
文件看上去像@R{}代码（常有@R{}类型的注释），但不会像@R{}代码那样处理。只执行非常
简单的<code>if</code>条件陈述。
</p>
<p>正如其它包，调用<code>library</code>时，有命名空间的包被加载并附在搜索路径里。只有导出
变量放在所附结构里。加载一个需要从其它包导入变量的包，也会同时加载这些包（除非
它们已被加载了），但这些暗示的加载不放在搜索路径里。
</p>  
<p>命名空间一旦加载，其导入和导出就不能改变，内部绑定变量也不能改变。对命名空间机制，
允许一个简单的执行策略。也允许代码分析和编辑工具正确地识别一个函数体里全局变量的
定义。 
</p>
<p>注意给包增加一个命名空间会改变搜索策略。搜索时首先是包的命名空间，然后是导入，
然后是基本命名空间，最后是正常的搜索路径。
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC19">1.6.1 指定导入和导出</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
<tr><td valign="top" align="left"><a href="#SEC20">1.6.2 Registering S3 methods</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">      
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC21">1.6.3 Load hooks</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC22">1.6.4 实例</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
<tr><td valign="top" align="left"><a href="#SEC23">1.6.5 总结 - 转换一个已存在的包</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
<tr><td valign="top" align="left"><a href="#SEC24">1.6.6 有正式类和方法的命名空间</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left"></td></tr>
</tbody></table>


<hr size="6">
<a name="Specifying-imports-and-exports"></a>
<a name="SEC19"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC18" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC20" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC18" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.6.1 指定导入和导出 </h3>

<p>在<tt>`NAMESPACE'</tt>文件里，用<code>export</code>指定导出。形如
</p>
<a name="IDX19"></a>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">export(f, g)
</pre></td></tr></tbody></table>

<p>的指示指定变量<code>f</code>和<code>g</code>会被导出。（注意变量名字可以用引号引起来，保留字
和非标准名如<code>[&lt;-.fractions</code>必须用引号引起来）
</p>
<p>有许多导出变量的包，用正则表达式<code>exportPattern</code>指定变量名会更方便。形如
</p>
<a name="IDX20"></a>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">exportPattern("^[^\\.]")
</pre></td></tr></tbody></table>

<p>的指示将导出所有不以句点开始的变量。
</p>
<p>有命名空间的包暗中地导入基本命名空间。从其它有命名空间的包导出的变量，需要用
<code>import</code>和<code>importFrom</code>明确导入。<code>import</code>从指定的包中导入所有导出
变量。形如
</p>
<a name="IDX21"></a>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">import(foo, bar)
</pre></td></tr></tbody></table>

<p>的指示将会导入@pkg{foo}和@pkg{bar}包里的所有导出变量。如果只需要一个包里的某些导
出变量，它们可由<code>importFrom</code>导入。形如
</p>
<a name="IDX22"></a>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">importFrom(foo, f, g)
</pre></td></tr></tbody></table>

<p>的指示将会导入@pkg{foo}包里的导出变量<code>f</code>和<code>g</code>。
</p>
<p>从其它命名空间导入到某命名空间的变量，也可以被导出。
</p>
<p>如果一个包仅需要另一个包中少量的对象，可在代码中用变量引用，而不用一个正式的导入。
<code>foo:::f</code>是对@pkg{foo}包中函数<code>f</code>的一个引用。这不如正式导入有效，也失
去了在<tt>`NAMESPACE'</tt>文件里记录所有依赖的优势，因此通常不推荐这个方法。用
<code>foo:::f</code>将引起@pkg{foo}包加载，但如果原来该包没被加载，就不会被attached。
--延迟加载很少使用的包，这可能是个优势。
</p>
<p>用<code>foo:::f</code>允许访问未导出的对象：为了限制于导出对象，应用<code>foo::f</code>。 
</p>
<hr size="6">
<a name="Registering-S3-methods"></a>
<a name="SEC20"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC19" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC21" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC18" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.6.2 Registering S3 methods </h3>

<p>对导入但没有附属到搜索路径的包，S3类型的标准方法<code>UseMethod</code>在查找方法时可能
失败。为了确保这些方法可以使用，定义方法的包应保证导入泛型(Generics)并用
<code>S3method</code>登记。如果一个包定义了函数<code>print.foo</code>，而不是
用<code>foo</code>类的<code>print</code>方法。用
</p>
<a name="IDX23"></a>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">S3method(print, foo)
</pre></td></tr></tbody></table>

<p>确保登记该方法，使<code>UseMethod</code>可用。函数<code>print.foo</code>不需要导出。泛型
<code>print</code>是在@pkg{base}里定义的，因而不需要明确导入。这个机制适用于在命名
空间里定义的泛型。一个包里任何不用命名空间的一般方法都应该被导出；如果要找到方法，
定义和导出方法的包应该附在搜索路径里。
</p>
<p>（注意函数和类名称可以用引号引起来，保留字和非标准名如<code>[&lt;-</code>和<code>function</code>
应该用引号引起来）
</p>
<hr size="6">
<a name="Load-hooks"></a>
<a name="SEC21"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC20" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC22" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC18" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.6.3 Load hooks </h3>

<p>有许多。
There are a number of hooks that apply to packages with name spaces.
See <code>help(".onLoad")</code> for more details.
</p>
<a name="IDX24"></a>
<a name="IDX25"></a>
<p>Packages with name spaces do not use the <code>.First.lib</code> function.
Since loading and attaching are distinct operations when a name space is
used, separate hooks are provided for each.  These hook functions are
called <code>.onLoad</code> and <code>.onAttach</code>.  They take the same
arguments as <code>.First.lib</code>; they should be defined in the name space
but not exported.
</p>
<a name="IDX26"></a>
<a name="IDX27"></a>
<p>However, packages with name spaces <em>do</em> use the <code>.Last.lib</code>
function.  There is also a hook <code>.onUnload</code> which is called when
the name space is unloaded (via a call to <code>unloadNamespace</code>) with
argument the full path to the installed package's directory.
<code>.onUnload</code> should be defined in the name space and not exported,
but <code>.Last.lib</code> does need to be exported.
</p>
<p>Packages are not likely to need <code>.onAttach</code> (except perhaps for a
start-up banner); code to set options and load shared objects should be
placed in a <code>.onLoad</code> function, or use made of the <code>useDynLib</code>
directive described next.
</p>
<p>There can be one or more <code>useDynLib</code> directives which allow shared
objects that need to be loaded to be specified in the <tt>`NAMESPACE'</tt>
file.  The directive
</p>
<a name="IDX28"></a>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">useDynLib(foo)
</pre></td></tr></tbody></table>

<p>registers the shared object <code>foo</code> for loading with
<code>library.dynam</code>.  Loading of registered object(s) occurs after the
package code has been loaded and before running the load hook function.
Packages that would only need a load hook function to load a shared
object can use the <code>useDynLib</code> directive instead.
</p>
<p>User-level hooks are also available: see the help on function
<code>setHook</code>.
</p>
<p>The <code>useDynLib</code> directive also accepts the names of the native
routines that are to be used in @R{} via the <code>.C</code>, <code>.Call</code>,
<code>.Fortran</code> and <code>.External</code> interface functions.  These are given as
additional arguments to the directive, for example,
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">useDynLib(foo, myRoutine, myOtherRoutine)
</pre></td></tr></tbody></table>
<p>By specifying these names in the <code>useDynLib</code> directive, the
native symbols are resolved when the package is loaded and @R{} variables
identifying these symbols are added to the package's name space with
these names.  These can be used in the <code>.C</code>, <code>.Call</code>,
<code>.Fortran</code> and <code>.External</code> calls in place of the
name of the routine and the <code>PACKAGE</code> argument.
For instance, we can call the routine <code>myRoutine</code> from R
with the code
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example"> .Call(myRoutine, x, y)
</pre></td></tr></tbody></table>

<p>rather than
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example"> .Call("myRoutine", x, y, PACKAGE = "foo")
</pre></td></tr></tbody></table>
<p>There are at least two benefits to this approach.  Firstly, the symbol
lookup is done just once for each symbol rather than each time it the
routine is invoked. Secondly, this removes any ambiguity in resolving
symbols that might be present in several compiled libraries.  In
particular, it allows for correctly resolving routines when different
versions of the same package are loaded concurrently in the same @R{}
session.
</p>
<p>In some circumstances, there will already be an @R{} variable in the
package with the same name as a native symbol. For example, we may have
an @R{} function in the package named <code>myRoutine</code>.  In this case,
it is necessary to map the native symbol to a different @R{} variable
name. This can be done in the <code>useDynLib</code> directive by using named
arguments. For instance, to map the native symbol name <code>myRoutine</code>
to the @R{} variable <code>myRoutine_sym</code>, we would use
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">useDynLib(foo, myRoutine_sym = myRoutine, myOtherRoutine)
</pre></td></tr></tbody></table>
<p>We could then call that routine from @R{} using the command
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example"> .Call(myRoutine_sym, x, y)
</pre></td></tr></tbody></table>
<p>Symbols without explicit names are assigned to the @R{} variable with
that name.
</p>
<p>In some cases, it may be preferable not to create @R{} variables in the
package's name space that identify the native routines.  It may be too
costly to compute these for many routines when the package is loaded
if many of these routines are not likely to be used.  In this case,
one can still perform the symbol resolution correctly using the DLL,
but do this each time the routine is called.  Given a reference to the
DLL as an @R{} variable, say <code>dll</code>, we can call the routine
<code>myRoutine</code> using the expression
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example"> .Call(dll$myRoutine, x, y)
</pre></td></tr></tbody></table>
<p>The <code>$</code> operator resolves the routine with the given name in the
DLL using a call to <code>getNativeSymbol</code>.  This is the same
computation as above where we resolve the symbol when the package is
loaded. The only difference is that this is done each time in the case
of <code>dll$myRoutine</code>.
</p>
<p>In order to use this dynamic approach (e.g., <code>dll$myRoutine</code>), one
needs the reference to the DLL as an @R{} variable in the package.  The
DLL can be assigned to a variable by using the <code>variable =
dllName</code> format used above for mapping symbols to @R{} variables.  For
example, if we wanted to assign the DLL reference for the DLL
<code>foo</code> in the example above to the variable <code>myDLL</code>, we would
use the following directive in the <tt>`NAMESPACE'</tt> file:
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">myDLL = useDynLib(foo, myRoutine_sym = myRoutine, myOtherRoutine)
</pre></td></tr></tbody></table>
<p>Then, the @R{} variable <code>myDLL</code> is in the package's name space and
available for calls such as <code>myDLL$dynRoutine</code> to access routines
that are not explicitly resolved at load time.
</p>
<p>If the package has registration information (see <a href="#SEC79">Registering native routines</a>), then we can use that directly rather than specifying the
list of symbols again in the <code>useDynLib</code> directive in the
<tt>`NAMESPACE'</tt> file.  Each routine in the registration information is
specified by giving a name by which the routine is to be specified along
with the address of the routine and any information about the number and
type of the parameters.  Using the <code>.registration</code> argument of
<code>useDynLib</code>, we can instruct the name space mechanism to create
@R{} variables for these symbols.  For example, suppose we have the
following registration information for a DLL named <code>myDLL</code>:
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">R_CMethodDef cMethods[] = {
   {"foo", &amp;foo, 4, {REALSXP, INTSXP, STRSXP, LGLSXP}},
   {"bar_sym", &amp;bar, 0},
   {NULL, NULL, 0}
};

R_CallMethodDef callMethods[] = {
   {"R_call_sym", &amp;R_call, 4},
   {"R_version_sym", &amp;R_version, 0},
   {NULL, NULL, 0}
};
</pre></td></tr></tbody></table>
<p>Then, the directive in the <tt>`NAMESPACE'</tt> file
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">useDynLib(myDLL, .registration = TRUE)
</pre></td></tr></tbody></table>

<p>causes the DLL to be loaded and also for the @R{} variables <code>foo</code>,
<code>bar_sym</code>, <code>R_call_sym</code> and <code>R_version_sym</code> to be
defined in the package's name space.
</p>
<p>Note that the names for the @R{} variables are taken from the entry in
the registration information and do not need to be the same as the name
of the native routine.  This allows the creator of the registration
information to map the native symbols to non-conflicting variable names
in @R{}, e.g. <code>R_version</code> to <code>R_version_sym</code> for use in an
@R{} function such as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">R_version &lt;- function()
{
  .Call(R_version_sym)
}
</pre></td></tr></tbody></table>
<p>Using argument <code>.fixes</code> allows an automatic prefix to be added to
the registered symbols, which can be useful when working with an
existing package.  For example, package @pkg{KernSmooth} has
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">useDynLib(KernSmooth, .registration = TRUE, .fixes = "F_")
</pre></td></tr></tbody></table>

<p>which makes the @R{} variables corresponding to the FORTRAN symbols
<code>F_bkde</code> and so on, and so avoid clashes with @R{} code in the name
space.
</p>

<p>More information about this symbol lookup, along with some approaches
for customizing it, is available from
<a href="http://www.omegahat.org/examples/RDotCall">http://www.omegahat.org/examples/RDotCall</a>.
</p>
<hr size="6">
<a name="An-example"></a>
<a name="SEC22"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC21" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC23" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC18" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.6.4 实例 </h3>

<p>作为例子，考虑两个名为@pkg{foo}和@pkg{bar}的包。包@pkg{foo}的<tt>`foo.R'</tt>文件里
的@R{}代码如下。
</p>
<blockquote><table class="cartouche" border="1"><tbody><tr><td>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">x &lt;- 1
f &lt;- function(y) c(x,y)
foo &lt;- function(x) .Call("foo", x, PACKAGE="foo")
print.foo &lt;- function(x, ...) cat("&lt;a foo&gt;\n")
</pre></td></tr></tbody></table></td></tr></tbody></table>
</blockquote>


<p>一些C代码定义一个C函数编译DLL <code>foo</code>（有一个合适的扩展名）。这个包的
<tt>`NAMESPACE'</tt>文件内容如下：
</p>
<blockquote><table class="cartouche" border="1"><tbody><tr><td>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">useDynLib(foo)
export(f, foo)
S3method(print, foo)
</pre></td></tr></tbody></table></td></tr></tbody></table>
</blockquote>


<p>第二个包@pkg{bar}有代码文件<tt>`bar.R'</tt>：
</p>
<blockquote><table class="cartouche" border="1"><tbody><tr><td>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">c &lt;- function(...) sum(...)
g &lt;- function(y) f(c(y, 7))
h &lt;- function(y) y+9
</pre></td></tr></tbody></table></td></tr></tbody></table>
</blockquote>


<p>文件<tt>`NAMESPACE'</tt>：
</p>
<blockquote><table class="cartouche" border="1"><tbody><tr><td>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">import(foo)
export(g, h)
</pre></td></tr></tbody></table></td></tr></tbody></table>
</blockquote>


<p>调用<code>library(bar)</code>将加载@pkg{bar}包，并将其导出附到搜索路径。包@pkg{foo}也
被加载但没有附到搜索路径。调用<code>g</code>产生：
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">&gt; g(6)
[1]  1 13
</pre></td></tr></tbody></table>

<p>这和函数<code>c</code>的两种定义一致：@pkg{bar}包里函数<code>c</code>被定义成等同为<code>sum</code>
，但@pkg{foo}包里<code>c</code>指的@pkg{base}包里的标准函数<code>c</code>。
</p>
<hr size="6">
<a name="Summary-_002d_002d-converting-an-existing-package"></a>
<a name="SEC23"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC22" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC24" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC18" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.6.5 总结 - 转换一个已存在的包 </h3>

<p>总结起来，将一个已存在的包转换成用命名空间的包，涉及到下面几个简单的步骤：
</p>
<ul>
<li>
识别公共定义并将其放在<code>export</code>指示里。
</li><li>
识别S3类的方法，写相应的<code>S3method</code>声明。
</li><li>
识别依赖，将<code>require</code>调用用<code>import</code>取代（并在<tt>`DESCRIPTION'</tt>文件的
<code>Depends</code>和<code>Imports</code>字段里做适当的改变）。
</li><li>
用<code>.onLoad</code>函数或<code>useDynLib</code>取代<code>.First.lib</code>函数。
</li></ul>


<p>一些辅助这个过程的代码分析工具正在被发展。
</p>
<hr size="6">
<a name="Name-spaces-with-formal-classes-and-methods"></a>
<a name="SEC24"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC23" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC25" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC18" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.6.6 有正式类和方法的命名空间 </h3>

<p>Some additional steps are needed for packages which make use of formal
(S4-style) classes and methods (unless these are purely used
internally).  The package should have <code>Depends: methods</code> in its
<tt>`DESCRIPTION'</tt> file and any classes and methods which are to be
exported need to be declared in the <tt>`NAMESPACE'</tt> file.  For example,
the @pkg{stats} package has
</p>
<a name="IDX29"></a>
<a name="IDX30"></a>

<table><tbody><tr><td>&nbsp;</td><td><pre class="example">export(mle)
importFrom(graphics, plot)
importFrom(stats, AIC, coef, confint, logLik, optim, profile, 
	   qchisq, update, vcov)
exportClasses(mle, profile.mle, summary.mle)
exportMethods(BIC, coef, confint, logLik, plot, profile, 
              summary, show, update, vcov)
export(AIC)
</pre></td></tr></tbody></table>

<p>All formal classes need to be listed in an <code>exportClasses</code>
directive.  Generics for which formal methods are defined need to be
declared in an <code>exportMethods</code> directive, and where the generics
are formed by taking over existing functions, those functions need to be
imported (explicitly unless they are defined in the <code>base</code> name
space).
</p>
<p>Note that exporting methods on a generic in the namespace will also
export the generic, and exporting a generic in the namespace will also
export its methods.  Where a generic has been created in the package
solely to add S4 methods to it, it can be declared <em>via</em> either or
both of <code>exports</code> or <code>exportMethods</code>, but the latter seems
clearer (and is used in the @pkg{stats4} example above).  On the other
hand, where a generic is created in a package without methods (such as
<code>AIC</code> in @pkg{stats4}), <code>exports</code> must be used.
</p>
<p>Further, a package using classes and methods defined in another package
needs to import them, with directives
</p>
<a name="IDX31"></a>
<a name="IDX32"></a>

<table><tbody><tr><td>&nbsp;</td><td><pre class="example">importClassesFrom(package, ...)
importMethodsFrom(package, ...)
</pre></td></tr></tbody></table>

<p>listing the classes and functions with methods respectively.  Suppose we
had two small packages @pkg{A} and @pkg{B} with @pkg{B} using @pkg{A}.
Then they could have <code>NAMESPACE</code> files
</p>
<blockquote><table class="cartouche" border="1"><tbody><tr><td>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">export(f1, ng1)
exportMethods("[")
exportClasses(c1)
</pre></td></tr></tbody></table></td></tr></tbody></table>
</blockquote>


<p>and
</p>
<blockquote><table class="cartouche" border="1"><tbody><tr><td>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">importFrom(A, ng1)
importClassesFrom(A, c1)
importMethodsFrom(A, f1)
export(f4, f5)
exportMethods(f6, "[")
exportClasses(c1, c2)
</pre></td></tr></tbody></table></td></tr></tbody></table>
</blockquote>


<p>respectively.
</p>
<p>Note that <code>importMethodsFrom</code> will also import any generics defined
in the namespace on those methods.
</p>
<p>If your package imports the whole of a name space, it will automatically
import the classes from that namespace.  It will also import methods,
but it is best to do so explicitly, especially where there are methods
being imported from more than one namespace.
</p>

<hr size="6">
<a name="Writing-portable-packages"></a>
<a name="SEC25"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC24" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC26" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC2" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 1.7 写可移植的包 </h2>

<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC26">1.7.1 Encoding issues</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">             
</td></tr>
</tbody></table>

<p>Portable packages should have simple file names: use only alphanumeric
<acronym>ASCII</acronym> characters and <code>.</code>, and avoid those names not
allowed under Windows which are mentioned above.
</p>
<p><code>R CMD check</code> provides a basic set of checks, but often further
problems emerge when people try to install and use packages submitted to
<acronym>CRAN</acronym> - many of these involve compiled code.  Here are some
further checks that you can do to make your package more portable.
</p>
<ul class="toc">
<li>
If your package has a <tt>`configure'</tt> script, provide a
<tt>`configure.win'</tt> script to be used on Windows.  The <acronym>CRAN</acronym>
binary packages for Windows are built automatically, and if your package
does not build without intervention it is unlikely to be easily
available to a high proportion of @R{} users.

</li><li>
Make use of the abilities of your compilers to check the
standards-conformance of your code.  For example, <code>gcc</code> can be used
with options <samp>`-Wall -pedantic'</samp> to alert you to potential
problems.  Do not be tempted to assume that these are pure pedantry: for
example @R{} is still used on platforms where the C compiler does not
accept C++/C99 comments (starting <code>//</code>).

<p>If you use FORTRAN, <code>ftnchek</code>
(<a href="http://www.dsm.fordham.edu/~ftnchek/">http://www.dsm.fordham.edu/~ftnchek/</a>) provides thorough testing
of conformance to the standard.
</p>
</li><li>
Do be very careful with passing arguments between @R{}, C and
<acronym>FORTRAN</acronym> code.  In particular, <code>long</code> in C will be 32-bit
on most @R{} platforms (including those mostly used by the
<acronym>CRAN</acronym> maintainers), but 64-bit on many modern Unix and Linux
platforms.  It is rather unlikely that the use of <code>long</code> in C code
has been thought through: if you need a longer type than <code>int</code> you
should use a configure test for a C99 type such as <code>int_fast64_t</code>
(and failing that, <code>long long</code>) and typedef your own type to be
<code>long</code> or <code>long long</code>, or use another suitable type (such as
<code>size_t</code>).  Note that <code>integer</code> in <acronym>FORTRAN</acronym>
corresponds to <code>int</code> in C on all @R{} platforms.

</li><li>
Errors in memory allocation and reading/writing outside arrays are very
common causes of crashes (e.g., segfaults) on some machines.
See <a href="#SEC71">Using valgrind</a> for a tool which can be used to look for this.

</li><li>
The Mac OS X linker has some restrictions not found on other platforms.
Try to ensure that C entry points shared between source files are
declared as <code>extern</code> in all but one of the files.  (This is no
longer needed in recent versions of @R{}, but is if your package is
not restricted to such versions.)

</li><li>
Many platforms will allow unsatisfied entry points in compiled code, but
will crash the application (here @R{}) if they are ever used.  Some
(notably Windows) will not.  Looking at the output of

<table><tbody><tr><td>&nbsp;</td><td><pre class="example">nm -pg mypkg.so  # or other extension such as <tt>`.sl'</tt> or <tt>`.dylib'</tt>
</pre></td></tr></tbody></table>

<p>and checking if any of the symbols marked <code>U</code> is unexpected is a
good way to avoid this.
</p>
</li><li>
Conflicts between symbols in DLLs are handled in very platform-specific
ways.  Good ways to avoid trouble are to make as many symbols as
possible static (check with <code>nm -pg</code>), and to use unusual names, as
well as ensuring you have used the <code>PACKAGE</code> argument that <code>R
CMD check</code> checks for.

</li></ul>

<hr size="6">
<a name="Encoding-issues"></a>
<a name="SEC26"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC25" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC27" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC25" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.7.1 Encoding issues </h3>

<p>Care is needed if your package contains non-<acronym>ASCII</acronym> text, and in
particular if it is intended to be used in more than one locale.  It is
possible to mark the encoding used in the <tt>`DESCRIPTION'</tt> file and in
<tt>`.Rd'</tt> files, as discussed elsewhere in this manual.  What was not
possible before @R{} 2.5.0 was to mark the encoding used by character
strings in @R{}: if you want your package to work with earlier versions
of @R{} please consult the advice in the @R{} 2.4.x version of this
manual.
</p>
<p>First, consider carefully if you really need non-<acronym>ASCII</acronym> text.  Most
users of @R{} will only be able to view correctly text in their native
language group (e.g. Western European, Eastern European, Simplified
Chinese) and <acronym>ASCII</acronym>.  Other characters may not be rendered at all,
rendered incorrectly, or cause your @R{} code to give an error.
For documentation, marking the encoding and including <acronym>ASCII</acronym>
transliterations is likely to do a reasonable job.
</p>
<p>Function <code>showNonASCII</code> in package @pkg{tools} can help in
finding non-<acronym>ASCII</acronym> bytes in files.
</p>

<p>The most favourable circumstance is using UTF-8-encoded text in a
package that will only ever be used in a UTF-8 locale (and hence not on
Windows, for example).  In that case it is likely that text will be
rendered correctly in the terminal/console used to run @R{}, and files
written will be readable by other UTF-8-aware applications.  However,
plotting will be problematic.  On-screen plotting using the <samp>`X11()'</samp>
device will use a font that only covers a small proportion of UTF-8, and
different fonts will likely need to be selected for Polish, Russian and
Japanese (see <code>help("X11")</code>).  Using <samp>`postscript'</samp> or
<samp>`pdf'</samp> will choose a default 8-bit encoding depending on the
language of the UTF-8 locale, and your users would need to be told how
to select the <samp>`encoding'</samp> argument.
</p>
<p>Another fairly common scenario is where a package will only be used in
one language, e.g. French.  It is not very safe to assume that all
such users would have their computers set to a French locale, but let us
assume so.  The problem then is that there are several possible
encodings for French locales, the most common ones being <samp>`CP1252'</samp>
(Windows), <samp>`ISO 8859-1'</samp> (latin-1), <samp>`ISO 8859-15'</samp> (latin-9 which
includes the Euro), and <samp>`UTF-8'</samp>.  For characters in the French
language the first three agree, but they do not agree with <samp>`UTF-8'</samp>.
Further, you (or different users) can run @R{} in different locales in
different sessions, say <samp>`fr_CA.utf8'</samp> one day and
<samp>`fr_CH.iso88591'</samp> the next.  As from @R{} 2.5.0, declaring the
encoding as either <samp>`latin1'</samp> or <samp>`UTF-8'</samp> in the
<tt>`DESCRIPTION'</tt> file will enable this to work.  If you have character
data in <tt>`.rda'</tt> files (for use by <code>data</code> or LazyData) these
need to have been prepared and <code>save</code>d in @R{} 2.5.0 in an
appropriate locale (or marked via <code>Encoding</code>).  For example (from
package @pkg{FactoMineR} version <code>1.02</code>):
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">&gt; library(FactoMineR)
&gt; data(wine)
&gt; Encoding(names(wine)) &lt;- "latin1"
&gt; Encoding(levels(wine$Terroir)) &lt;- "latin1"
&gt; save(wine, file="wine.rda")
</pre></td></tr></tbody></table>

<p>was used to update a <tt>`.rda'</tt> file.
</p>
<p>If you want to run <code>R CMD check</code> on a Unix-alike over a
package that sets the encoding you may need to specify a suitable
locale via an environment variable.  The default is equivalent setting
<code>R_ENCODING_LOCALES</code> to
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">"latin1=en_US:latin2=pl_PL:UTF-8=en_US.utf8:latin9=fr_FR.iso885915@euro"
</pre></td></tr></tbody></table>

<p>(which is appropriate for a system based on <code>glibc</code>) except if the
current locale is UTF-8 and <samp>`iconv'</samp> is available, when the
package code is translated to UTF-8 for syntax checking.
</p>

<hr size="6">
<a name="Diagnostic-messages"></a>
<a name="SEC27"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC26" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC28" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC2" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 1.8 Diagnostic messages </h2>

<p>Now that diagnostic messages can be made available for translation, it
is important to write them in a consistent style.  Using the tools
described in the next section to extract all the messages can give a
useful overview of your consistency (or lack of it).
</p>
<p>Some guidelines follow.
</p>
<ul class="toc">
<li>
Messages are sentence fragments, and not viewed in isolation.  So it is
conventional not to capitalize the first word and not to end with a
period (or other punctuation).

</li><li>
Try not to split up messages into small pieces.  In C error messages use
a single format string containing all English words in the messages.

<p>In @R{} error messages do not construct a message with <code>paste</code> (such
messages will not be translated) but via multiple arguments to
<code>stop</code> or <code>warning</code>, or via <code>gettextf</code>.
</p>
</li><li>
Do not use colloquialisms such as "can't" and "don't".

</li><li>
If possible, make quotation marks part of your message as different
languages have different conventions.  In @R{} messages this means not
using <code>sQuote</code> or <code>dQuote</code> except where the argument is a
variable.

<p>Conventionally single quotation marks are used for quotations such as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">'ord' must be a positive integer, at most the number of knots
</pre></td></tr></tbody></table>

<p>and double quotation marks when referring to an @R{} character string
such as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">'format' must be "normal" or "short" - using "normal"
</pre></td></tr></tbody></table>
<p>Since <acronym>ASCII</acronym> does not contain directional quotation marks, it
is best to use <samp>`''</samp> and let the translator (including automatic
translation) use directional quotations where available.  The range of
quotation styles is immense: unfortunately we cannot reproduce them in a
portable <code>texinfo</code> document.  But as a taster, some languages use
`up' and `down' (comma) quotes rather than left or right quotes, and
some use guillemets (and some use what Adobe calls `guillemotleft' to
start and others use it to end).
</p>

</li><li>
Occasionally messages need to be singular or plural (and in other
languages there may be no such concept or several plural forms -
Slovenian has four).  So avoid constructions such as was once used in
<code>library</code>

<table><tbody><tr><td>&nbsp;</td><td><pre class="example">if((length(nopkgs) &gt; 0) &amp;&amp; !missing(lib.loc)) {
    if(length(nopkgs) &gt; 1)
        warning("libraries ",
                paste(sQuote(nopkgs), collapse = ", "),
                " contain no packages")
    else
        warning("library ", paste(sQuote(nopkgs)),
                " contains no package")
}
</pre></td></tr></tbody></table>

<p>and was replaced by
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">if((length(nopkgs) &gt; 0) &amp;&amp; !missing(lib.loc)) {
    pkglist &lt;- paste(sQuote(nopkgs), collapse = ", ")
    msg &lt;- sprintf(ngettext(length(nopkgs),
                     "library %s contains no packages",
                     "libraries %s contain no packages"),
                   pkglist)
    warning(msg, domain=NA)
}
</pre></td></tr></tbody></table>

<p>Note that it is much better to have complete clauses as here, since
in another language one might need to say `There is no package in library
%s' or `There are no packages in libraries %s'.
</p>
</li></ul>

<hr size="6">
<a name="Internationalization"></a>
<a name="SEC28"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC27" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC29" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC2" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 1.9 Internationalization </h2>

<p>There are mechanisms to translate the R- and C-level error and warning
messages.  There are only available if @R{} is compiled with NLS support
(which is requested by <code>configure</code> option <samp>`--enable-nls'</samp>,
the default).
</p>
<p>The procedures make use of <code>msgfmt</code> and <code>xgettext</code> which are
part of <acronym>GNU</acronym> <code>gettext</code> and this will need to be installed:
Windows users can find pre-compiled binaries at the <acronym>GNU</acronym>
archive mirrors and packaged with the <code>poEdit</code> package
(<a href="http://poedit.sourceforge.net/download.php#win32">http://poedit.sourceforge.net/download.php#win32</a>).
</p>

<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC29">1.9.1 C-level messages</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">            
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC30">1.9.2 R messages</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                  
</td></tr>
</tbody></table>

<hr size="6">
<a name="C_002dlevel-messages"></a>
<a name="SEC29"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC28" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC30" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC28" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.9.1 C-level messages </h3>

<p>The process of enabling translations is
</p>
<ul class="toc">
<li>
In a header file that will be included in all the C files
containing messages that should be translated, declare

<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R.h&gt;  /* to include Rconfig.h */

#ifdef ENABLE_NLS
#include &lt;libintl.h&gt;
#define _(String) dgettext ("<var>pkg</var>", String)
/* replace <var>pkg</var> as appropriate */
#else
#define _(String) (String)
#endif
</pre></td></tr></tbody></table>
</li><li>
For each message that should be translated, wrap it in <code>_(...)</code>,
for example

<table><tbody><tr><td>&nbsp;</td><td><pre class="example">error(_("'ord' must be a positive integer"));
</pre></td></tr></tbody></table>
</li><li>
In the package's <tt>`src'</tt> directory run

<table><tbody><tr><td>&nbsp;</td><td><pre class="example">xgettext --keyword=_ -o <var>pkg</var>.pot *.c
</pre></td></tr></tbody></table>
</li></ul>

<p>The file <tt>`src/<var>pkg</var>.pot'</tt> is the template file, and
conventionally this is shipped as <tt>`po/<var>pkg</var>.pot'</tt>.  A translator
to another language makes a copy of this file and edits it (see the
<code>gettext</code> manual) to produce say <tt>`<var>ll</var>.po'</tt>, where <var>ll</var>
is the code for the language in which the translation is to be used.
(This file would be shipped in the <tt>`po'</tt> directory.)  Next run
<code>msgfmt</code> on <tt>`<var>ll</var>.po'</tt> to produce <tt>`<var>ll</var>.mo'</tt>, and
copy that to <tt>`inst/po/<var>ll</var>/LC_MESSAGES/<var>pkg</var>.mo'</tt>.  Now when
the package is loaded after installation it will look for translations
of its messages in the <tt>`po/<var>lang</var>/LC_MESSAGES/<var>pkg</var>.mo'</tt> file
for any language <var>lang</var> that matches the user's preferences (via the
setting of the <code>LANGUAGE</code> environment variable or from the locale
settings).
</p>
<hr size="6">
<a name="R-messages"></a>
<a name="SEC30"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC29" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC31" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC28" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.9.2 R messages </h3>

<p>Mechanisms to support the automatic translation of @R{} <code>stop</code>,
<code>warning</code> and <code>message</code> messages are in place, most easily
if the package has a name space.  They make use of message catalogs in
the same way as C-level messages, but using domain <code>R-<var>pkg</var></code>
rather than <code><var>pkg</var></code>.  Translation of character strings inside
<code>stop</code>, <code>warning</code> and <code>message</code> calls is automatically
enabled, as well as other messages enclosed in calls to <code>gettext</code>
or <code>gettextf</code>.  (To suppress this, use argument
<code>domain=NA</code>.)
</p>
<p>Tools to prepare the <tt>`R-<var>pkg</var>.pot'</tt> file are provided in package
@pkg{tools}: <code>xgettext2pot</code> will prepare a file from all strings
occurring inside <code>gettext</code>/<code>gettextf</code>, <code>stop</code>,
<code>warning</code> and <code>message</code> calls.  Some of these are likely to be
spurious and so the file is likely to need manual editing.
<code>xgettext</code> extracts the actual calls and so is more useful when
tidying up error messages.
</p>
<p>Translation of messages which might be singular or plural can be very
intricate: languages can have up to four different forms.  The @R{}
function <code>ngettext</code> provides an interface to the C function of the
same name, and will choose an appropriate singular or plural form for
the selected language depending on the value of its first argument
<code>n</code>.
</p>
<p>Packages without name spaces will need to use <code>domain="R-<var>pkg</var>"</code>
explicitly in calls to <code>stop</code>, <code>warning</code>, <code>message</code>,
<code>gettext</code>/<code>gettextf</code> and <code>ngettext</code>.
</p>
<a name="IDX33"></a>
<a name="IDX34"></a>
<hr size="6">
<a name="CITATION-files"></a>
<a name="SEC31"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC30" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC32" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC2" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 1.10 CITATION files </h2>

<p>An installed file named <tt>`CITATION'</tt> will be used by the
<code>citation()</code> function.  (To be installed, it needed to be in the
<tt>`inst'</tt> subdirectory of the package sources.)
</p>
<p>The <tt>`CITATION'</tt> file is parsed as @R{} code, currently in Latin-1.
(This will change once there is a means to declare an encoding.)  If no
such file is present, <code>citation</code> generates a standard contents, and
an example of what that would look like as a <tt>`CITATION'</tt> file can be
seen in recommended package @pkg{nlme} (see below): recommended packages
@pkg{boot}, @pkg{cluster} and @pkg{mgcv} have further examples.
</p>
<p>A <tt>`CITATION'</tt> file will contain calls to the functions
<code>citHeader</code>, <code>citEntry</code> and (optionally)
<code>citFooter</code>. Here is that for @pkg{nlme}, re-formatted:
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">citHeader("To cite package 'nlme' in publications use:")

desc &lt;- packageDescription("nlme")
year &lt;- sub(".*(2[[:digit:]]{3})-.*", "\\1", desc$Date)
vers &lt;- paste("R package version", desc$Version)

citEntry(entry="Manual",
         title = "nlme: Linear and Nonlinear Mixed Effects Models",
         author = personList(as.person("Jose Pinheiro"),
                             as.person("Douglas Bates"),
                             as.person("Saikat DebRoy"),
                             as.person("Deepayan Sarkar"),
                             as.person("the R Core team")),
         year = year,
         note = vers,

         textVersion =
         paste("Jose Pinheiro, Douglas Bates, Saikat DebRoy,",
               "Deepayan Sarkar and the R Core team (",
               year,
               "). nlme: Linear and Nonlinear Mixed Effects Models. ",
               vers, ".", sep=""))
</pre></td></tr></tbody></table>
<p>Note the way that information that may need to be updated is picked up
from the <tt>`DESCRIPTION'</tt> file - it is tempting to hardcode such
information, but it normally then gets outdated.  See <code>?citEntry</code>
for further details of the information which can be provided.
</p>
<p>The <tt>`CITATION'</tt> should itself produce no output.
</p>
<p>As from @R{} 2.8.0, the <tt>`CITATION'</tt> file will be read in Latin-1 unless a
package encoding is declared in the package's <tt>`DESCRIPTION'</tt> file.
(@R{} 2.7.0 read the <tt>`CITATION'</tt> file in Latin-1, which covered all
the examples at the time.  Earlier versions of @R{} read the file in the
encoding of the session.)
</p>

<hr size="6">
<a name="Package-types"></a>
<a name="SEC32"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC31" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC33" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC2" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 1.11 Package types </h2>

<p>The <tt>`DESCRIPTION'</tt> file has an optional field <code>Type</code> which if
missing is assumed to be <code>Package</code>, the sort of extension discussed
so far in this chapter.  Currently two other types are recognized, both
of which need write permission in the @R{} installation tree.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC33">1.11.1 Frontend</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                    
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC34">1.11.2 Translation</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                 
</td></tr>
</tbody></table>

<hr size="6">
<a name="Frontend"></a>
<a name="SEC33"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC32" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC34" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC32" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.11.1 Frontend </h3>

<p>This is a rather general mechanism, designed for adding new front-ends
such as the @pkg{gnomeGUI} package.  If a <tt>`configure'</tt> file is found
in the top-level directory of the package it is executed, and then if a
<code>Makefile</code> is found (often generated by <tt>`configure'</tt>),
<code>make</code> is called.  If <code>R CMD INSTALL --clean</code> is used
<code>make clean</code> is called.  No other action is taken.
</p>
<p><code>R CMD build</code> can package up this type of extension, but <code>R
CMD check</code> will check the type and skip it.
</p>
<hr size="6">
<a name="Translation"></a>
<a name="SEC34"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC33" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC35" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC32" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 1.11.2 Translation </h3>

<p>Conventionally, a translation package for language <var>ll</var> is called
@pkg{Translation-<var>ll</var>} and has <code>Type: Translation</code>.  It needs
to contain the directories <tt>`share/locale/<var>ll</var>'</tt> and
<tt>`library/<var>pkgname</var>/po/<var>ll</var>'</tt>, or at least those for
which translations are available.  The files <tt>`.mo'</tt> are installed in
the parallel places in the @R{} installation tree.
</p>
<p>For example, a package @pkg{Translation-it} might be prepared from an
installed (and tested) version of @R{} by
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">mkdir Translation-it
cd Translation-it
(cd $R_HOME; tar cf - share/locale/it library/*/po/it) | tar xf -
# the next step is not needed on Windows
msgfmt -c -o share/locale/it/LC_MESSAGES/RGui.mo $R_SRC_HOME/po/RGui-it.gmo
# create a DESCRIPTION file
cd ..
R CMD build Translation-it
</pre></td></tr></tbody></table>
<p>It is probably appropriate to give the package a version number based on
the version of @R{} which has been translated.  So the
<tt>`DESCRIPTION'</tt> file might look like
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">Package: Translation-it
Type: Translation
Version: 2.2.1-1
Title: Italian Translations for R 2.2.1
Description: Italian Translations for R 2.2.1
Author: The translators
Maintainer: Some Body &lt;somebody@some.where.net&gt;
License: GPL (&gt;= 2)
</pre></td></tr></tbody></table>
<hr size="6">
<a name="Services"></a>
<a name="SEC35"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC34" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC2" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 1.12 Services </h2>

<p>Several members of the @R{} project have set up services to assist those
writing @R{} packages, particularly those intended for public
distribution.
</p>
<p><a href="http://win-builder.r-project.org/">win-builder.r-project.org</a> offers
the automated preparation of Windows binaries from well-tested source
packages. 
</p>
<p>R-Forge (<a href="http://r-forge.r-project.org/">R-Forge.r-project.org</a>) and
RForge (<a href="http://www.rforge.net/">www.rforge.net</a>) are similar
services with similar names.  Both provide source-code management
through SVN, daily building and checking, mailing lists and a repository
that can be accessed <em>via</em> <code>install.packages</code>.  Package
developers have the opportunity to present their work on the basis of
project websites or news announcements.  Mailing lists, forums or wikis
provide useRs with convenient instruments for discussions and for
exchanging information between developers and/or interested useRs.
</p>

<hr size="6">
<a name="Writing-R-documentation-files"></a>
<a name="SEC36"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC35" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC37" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC2" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h1 class="chapter"> 2. Writing R documentation files </h1>

<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC37">2.1 Rd format</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                   
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC42">2.2 Sectioning</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC43">2.3 Marking text</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC44">2.4 Lists and tables</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">            
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC45">2.5 Cross-references</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">            
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC46">2.6 Mathematics</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                 
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC47">2.7 Insertions</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC48">2.8 Indices</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                     
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC49">2.9 Platform-specific documentation</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC50">2.10 Encoding</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                    
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC51">2.11 Processing Rd format</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">        
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC52">2.12 Back-compatibility issues</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">   
</td></tr>
</tbody></table>

<hr size="6">
<a name="Rd-format"></a>
<a name="SEC37"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC36" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC38" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC36" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 2.1 Rd format </h2>

<p>@R{} objects are documented in files written in "@R{} documentation"
(Rd) format, a simple markup language closely resembling (La)TeX,
which can be processed into a variety of formats, including LaTeX,
@HTML{} and plain text.  The translation is carried out by the Perl
script <code>Rdconv</code> in <tt>`<var>R_HOME</var>/bin'</tt> and by the
installation scripts for packages.
</p>
<p>The @R{} distribution contains more than 1200 such files which can be
found in the <tt>`src/library/<var>pkg</var>/man'</tt> directories of the @R{}
source tree, where <var>pkg</var> stands for the standard packages which are
included in the @R{} distribution.
</p>
<p>As an example, let us look at the file
<tt>`src/library/base/man/load.Rd'</tt> which documents the @R{} function
<code>load</code>.
</p>
<blockquote><table class="cartouche" border="1"><tbody><tr><td>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">\name{load}
\alias{load}
\title{Reload Saved Datasets}
\description{
  Reload the datasets written to a file with the function
  \code{save}.
}
\usage{
load(file, envir = parent.frame())
}
\arguments{
  \item{file}{a connection or a character string giving the
    name of the file to load.}
  \item{envir}{the environment where the data should be
    loaded.}
}
\seealso{
  \code{\link{save}}.
}
\examples{
## save all data
save(list = ls(), file= "all.Rdata")

## restore the saved values to the current environment
load("all.Rdata")

## restore the saved values to the workspace
load("all.Rdata", .GlobalEnv)
}
\keyword{file}
</pre></td></tr></tbody></table></td></tr></tbody></table>
</blockquote>

<p>An Rd file consists of three parts.  The header gives basic information
about the name of the file, the topics documented, a title, a short
textual description and @R{} usage information for the objects
documented.  The body gives further information (for example, on the
function's arguments and return value, as in the above example).
Finally, there is a footer with keyword information.  The header and
footer are mandatory.
</p>
<p>See the <a href="http://developer.r-project.org/Rds.html">"Guidelines for Rd files"</a> for guidelines for writing documentation in Rd format which
should be useful for package writers.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC38">2.1.1 Documenting functions</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">       
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC39">2.1.2 Documenting data sets</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">       
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC40">2.1.3 Documenting S4 classes and methods</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC41">2.1.4 Documenting packages</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">        
</td></tr>
</tbody></table>

<hr size="6">
<a name="Documenting-functions"></a>
<a name="SEC38"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC37" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC39" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC36" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC37" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 2.1.1 Documenting functions </h3>

<p>The basic markup commands used for documenting @R{} objects (in
particular, functions) are given in this subsection.
</p>
<dl compact="compact">
<dt> <code>\name{<var>name</var>}</code></dt>
<dd><a name="IDX35"></a>
<p><var>name</var> typically<a name="DOCF14" href="#FOOT14">(14)</a> is the basename of the Rd file
containing the documentation.  It is the "name" of the Rd object
represented by the file and has to be unique in a package.
</p>
</dd>
<dt> <code>\alias{<var>topic</var>}</code></dt>
<dd><a name="IDX36"></a>
<p>The <code>\alias</code> entries specify all "topics" the file documents.
This information is collected into index data bases for lookup by the
on-line (plain text and @HTML{}) help systems.  The <var>topic</var> can
contain spaces, but (for historical reasons) leading and trailing spaces
will be stripped.
</p>
<p>There may be several <code>\alias</code> entries.  Quite often it is
convenient to document several @R{} objects in one file.  For example,
file <tt>`Normal.Rd'</tt> documents the density, distribution function,
quantile function and generation of random variates for the normal
distribution, and hence starts with
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">\name{Normal}
\alias{Normal}
\alias{dnorm}
\alias{pnorm}
\alias{qnorm}
\alias{rnorm}
</pre></td></tr></tbody></table>

<p>Also, it is often convenient to have several different ways to refer to
an @R{} object, and an <code>\alias</code> does not need to be the name of an
object.
</p>
<p>Note that the <code>\name</code> is not necessarily a topic documented, and if
so desired it needs to have an explicit <code>\alias</code> entry (as in this
example).
</p>
</dd>
<dt> <code>\title{<var>Title</var>}</code></dt>
<dd><a name="IDX37"></a>
<p>Title information for the Rd file.  This should be capitalized, not end
in a period, and not use any markup (which would cause problems for
hypertext search).  Use of characters other than English text and
punctuation (e.g., <samp>`&lt;'</samp>) may limit portability.
</p>
</dd>
<dt> <code>\description{…}</code></dt>
<dd><a name="IDX38"></a>
<p>A short description of what the function(s) do(es) (one paragraph, a few
lines only).  (If a description is "too long" and cannot easily be
shortened, the file probably tries to document too much at once.)
</p>
</dd>
<dt> <code>\usage{<var>fun</var>(<var>arg1</var>, <var>arg2</var>, …)}</code></dt>
<dd><a name="IDX39"></a>
<p>One or more lines showing the synopsis of the function(s) and variables
documented in the file.  These are set in typewriter font.  This is a
verbatim-like command, so some characters need to be escaped
(see section <a href="#SEC47">Insertions</a>).
</p>
<p>The usage information specified should match the function definition
<em>exactly</em> (such that automatic checking for consistency between
code and documentation is possible).
</p>
<p>It is no longer advisable to use <code>\synopsis</code> for the actual
synopsis and show modified synopses in the <code>\usage</code>.  Support for
<code>\synopsis</code> will be removed eventually.  To indicate that a
function can be "used" in several different ways, depending on the
named arguments specified, use section <code>\details</code>.  E.g.,
<tt>`abline.Rd'</tt> contains
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">\details{
  Typical usages are
\preformatted{
abline(a, b, untf = FALSE, \dots)
......
}
</pre></td></tr></tbody></table>
<a name="IDX40"></a>
<p>Use <code>\method{<var>generic</var>}{<var>class</var>}</code> to indicate the name
of an S3 method for the generic function <var>generic</var> for objects
inheriting from class <code>"<var>class</var>"</code>.  In the printed versions,
this will come out as <var>generic</var> (reflecting the understanding that
methods should not be invoked directly but via method dispatch), but
<code>codoc()</code> and other QC tools always have access to the full name.
</p>
<p>For example, <tt>`print.ts.Rd'</tt> contains
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">\usage{
\method{print}{ts}(x, calendar, \dots)
}
</pre></td></tr></tbody></table>

<p>which will print as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">Usage:

     ## S3 method for class 'ts':
     print(x, calendar, ...)
</pre></td></tr></tbody></table>
<p>Usage for replacement functions should be given in the style of
<code>dim(x) &lt;- value</code> rather than explicitly indicating the name of the
replacement function (<code>"dim&lt;-"</code> in the above).  Similarly, one
can use <code>\method{<var>generic</var>}{<var>class</var>}(<var>arglist</var>) &lt;-
value</code> to indicate the usage of an S3 replacement method for the generic
replacement function <code>"<var>generic</var>&lt;-"</code> for objects inheriting
from class <code>"<var>class</var>"</code>.
</p>
<p>Usage for S3 methods for extracting or replacing parts of an object, S3
methods for members of the Ops group, and S3 methods for user-defined
(binary) infix operators (<samp>`%<var>xxx</var>%'</samp>) follows the above rules,
using the appropriate function names.  E.g., <tt>`Extract.factor.Rd'</tt>
contains
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">\usage{
\method{[}{factor}(x, \dots, drop = FALSE)
\method{[[}{factor}(x, i)
\method{[}{factor}(x, \dots) &lt;- value
}
</pre></td></tr></tbody></table>

<p>which will print as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">Usage:

     ## S3 method for class 'factor':
     x[..., drop = FALSE]
     ## S3 method for class 'factor':
     x[[i]]
     ## S3 replacement method for class 'factor':
     x[...] &lt;- value
</pre></td></tr></tbody></table>
</dd>
<dt> <code>\arguments{…}</code></dt>
<dd><a name="IDX41"></a>
<p>Description of the function's arguments, using an entry of the form
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">\item{<var>arg_i</var>}{<var>Description of arg_i</var>.}
</pre></td></tr></tbody></table>

<p>for each element of the argument list.  There may be optional text
before and after these entries.  (Note that there is no whitespace
between the three parts of the entry.)
</p>

</dd>
<dt> <code>\details{…}</code></dt>
<dd><a name="IDX42"></a>
<p>A detailed if possible precise description of the functionality
provided, extending the basic information in the <code>\description</code>
slot.
</p>
</dd>
<dt> <code>\value{…}</code></dt>
<dd><a name="IDX43"></a>
<p>Description of the function's return value.
</p>
<p>If a list with multiple values is returned, you can use entries of the
form
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">\item{<var>comp_i</var>}{<var>Description of comp_i</var>.}
</pre></td></tr></tbody></table>

<p>for each component of the list returned.  Optional text may precede this
list (see the introductory example for <code>rle</code>).  Note that
<code>\value</code> is implicitly a <code>\itemize</code> environment, so that
environment should not be used for listing components, just individual
<code>\item</code> entries.
</p>
</dd>
<dt> <code>\references{…}</code></dt>
<dd><a name="IDX44"></a>
<p>A section with references to the literature.  Use <code>\url{}</code> for
web pointers.
</p>
</dd>
<dt> <code>\note{...}</code></dt>
<dd><a name="IDX45"></a>
<p>Use this for a special note you want to have pointed out.
</p>
<p>For example, <tt>`pie.Rd'</tt> contains
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">\note{
  Pie charts are a very bad way of displaying information.
  The eye is good at judging linear measures and bad at
  judging relative areas.
  ......
}
</pre></td></tr></tbody></table>
</dd>
<dt> <code>\author{…}</code></dt>
<dd><a name="IDX46"></a>
<p>Information about the author(s) of the Rd file.  Use <code>\email{}</code>
without extra delimiters (<samp>`( )'</samp> or <samp>`&lt; &gt;'</samp>) to specify email
addresses, or <code>\url{}</code> for web pointers.
</p>
</dd>
<dt> <code>\seealso{…}</code></dt>
<dd><a name="IDX47"></a>
<p>Pointers to related @R{} objects, using <code>\code{\link{...}}</code> to
refer to them (<code>\code</code> is the correct markup for @R{} object names,
and <code>\link</code>
produces hyperlinks in output formats which support this.  See section <a href="#SEC43">Marking text</a>, and <a href="#SEC45">Cross-references</a>).
</p>
<a name="IDX48"></a>
</dd>
<dt> <code>\examples{…}</code></dt>
<dd><p>Examples of how to use the function.  These are set as formatted in
typewriter font: see <a href="#SEC47">Insertions</a> for when characters need to be
escaped.  (Markup <code>\link</code> and <code>\var</code> will be interpreted, but
no other.)  Code in this section is run by <code>example()</code> unless
marked otherswise (see below).
</p>
<p>Examples are not only useful for documentation purposes, but also
provide test code used for diagnostic checking of @R{}.  By default,
text inside <code>\examples{}</code> will be displayed in the output of the
help page and run by <code>example()</code> and by <code>R CMD check</code>.  You
can use <code>\dontrun{}</code>
<a name="IDX49"></a>
for commands that should only be shown, but not run, and
<code>\dontshow{}</code>
<a name="IDX50"></a>
for extra commands for testing that should not be shown to users, but
will be run by <code>example()</code>.  (Previously this was called
<code>\testonly</code>, and that is still accepted.)
</p>
<p>For example,
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">x &lt;- runif(10)       # Shown and run.
\dontrun{plot(x)}    # Only shown.
\dontshow{log(x)}    # Only run.
</pre></td></tr></tbody></table>
<p>Thus, example code not included in <code>\dontrun</code> must be executable!
In addition, it should not use any system-specific features or require
special facilities (such as Internet access or write permission to
specific directories).  Code included in <code>\dontrun</code> is indicated by
comments in the processed help files.
</p>
<p>Data needed for making the examples executable can be obtained by random
number generation (for example, <code>x &lt;- rnorm(100)</code>), or by using
standard data sets listed by <code>data()</code> (see <code>?data</code> for more
info).
</p>
<p>Finally, there is <code>\donttest</code>, used to mark code that should be run
by <code>examples()</code> but not by <code>R CMD check</code>.  This should be
needed only occasionally but can be used for code which might fail, for
example in some locales.
</p>
<a name="IDX51"></a>
</dd>
<dt> <code>\keyword{<var>key</var>}</code></dt>
<dd><p>Each <code>\keyword</code> entry should specify one of the standard keywords
as listed in file <tt>`KEYWORDS'</tt> in the R documentation directory
(default <tt>`<var>R_HOME</var>/doc'</tt>).  Use e.g.
<code>file.show(file.path(R.home("doc"), "KEYWORDS"))</code> to inspect the
standard keywords from within R.  There can be more than <code>\keyword</code>
entry if the @R{} object being documented falls into more than one
category.
</p>
<p>The special keyword <samp>`internal'</samp> marks a page of internal objects
that are not part of the packages' API. If the help page for object
<code>foo</code> has keyword <samp>`internal'</samp>, then <code>help(foo)</code> gives this
help page, but <code>foo</code> is excluded from several object indices, like
the alphabetical list of objects in the @HTML{} help system.
</p></dd>
</dl>

<a name="IDX52"></a>
<p>The @R{} function <code>prompt</code> facilitates the construction of files
documenting @R{} objects.  If <code>foo</code> is an @R{} function, then
<kbd>prompt(foo)</kbd> produces file <tt>`foo.Rd'</tt> which already contains
the proper function and argument names of <code>foo</code>, and a structure
which can be filled in with information.
</p>
<hr size="6">
<a name="Documenting-data-sets"></a>
<a name="SEC39"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC38" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC40" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC36" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC37" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 2.1.2 Documenting data sets </h3>

<p>The structure of Rd files which document @R{} data sets is slightly
different.  Whereas sections such as <code>\arguments</code> and <code>\value</code>
are not needed, the format and source of the data should be explained.
</p>
<p>As an example, let us look at <tt>`src/library/datasets/man/rivers.Rd'</tt>
which documents the standard @R{} data set <code>rivers</code>.
</p>
<blockquote><table class="cartouche" border="1"><tbody><tr><td>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">\name{rivers}
\docType{data}
\alias{rivers}
\title{Lengths of Major North American Rivers}
\description{
  This data set gives the lengths (in miles) of 141 \dQuote{major}
  rivers in North America, as compiled by the US Geological
  Survey.
}
\usage{rivers}
\format{A vector containing 141 observations.}
\source{World Almanac and Book of Facts, 1975, page 406.}
\references{
  McNeil, D. R. (1977) \emph{Interactive Data Analysis}.
  New York: Wiley.
}
\keyword{datasets}
</pre></td></tr></tbody></table></td></tr></tbody></table>
</blockquote>

<p>This uses the following additional markup commands.
</p>
<dl compact="compact">
<dt> <code>\docType{…}</code></dt>
<dd><p>Indicates the "type" of the documentation object.  Always <samp>`data'</samp>
for data sets.
</p>
</dd>
<dt> <code>\format{…}</code></dt>
<dd><a name="IDX53"></a>
<p>A description of the format of the data set (as a vector, matrix, data
frame, time series, …).  For matrices and data frames this should
give a description of each column, preferably as a list or table.
See section <a href="#SEC44">Lists and tables</a>, for more information.
</p>
</dd>
<dt> <code>\source{…}</code></dt>
<dd><a name="IDX54"></a>
<p>Details of the original source (a reference or <acronym>URL</acronym>).  In
addition, section <code>\references</code> could give secondary sources and
usages.
</p></dd>
</dl>

<p>Note also that when documenting data set <var>bar</var>,
</p>
<ul>
<li>
The <code>\usage</code> entry is always <code><var>bar</var></code> or (for packages
which do not use lazy-loading of data) <code>data(<var>bar</var>)</code>.  (In
particular, only document a <em>single</em> data object per Rd file.)
</li><li>
The <code>\keyword</code> entry is always <samp>`datasets'</samp>.
</li></ul>

<p>If <code><var>bar</var></code> is a data frame, documenting it as a data set can
be initiated via <kbd>prompt(<var>bar</var>)</kbd>.
</p>
<hr size="6">
<a name="Documenting-S4-classes-and-methods"></a>
<a name="SEC40"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC39" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC41" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC36" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC37" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 2.1.3 Documenting S4 classes and methods </h3>

<p>There are special ways to use the <samp>`?'</samp>  operator, namely
<samp>`class?<var>topic</var>'</samp> and <samp>`methods?<var>topic</var>'</samp>, to access
documentation for S4 classes and methods, respectively.  This mechanism
depends on conventions for the topic names used in <code>\alias</code>
entries.  The topic names for S4 classes and methods respectively are of
the form
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example"><var>class</var>-class
<var>generic</var>,<var>signature_list</var>-method
</pre></td></tr></tbody></table>

<p>where <var>signature_list</var> contains the names of the classes in the
signature of the method (without quotes) separated by <samp>`,'</samp> (without
whitespace), with <samp>`ANY'</samp> used for arguments without an explicit
specification.  E.g., <samp>`genericFunction-class'</samp> is the topic name for
documentation for the S4 class <code>"genericFunction"</code>, and
<samp>`coerce,ANY,NULL-method'</samp> is the topic name for documentation for
the S4 method for <code>coerce</code> for signature <code>c("ANY", "NULL")</code>.
</p>
<p>Skeletons of documentation for S4 classes and methods can be generated
by using the functions <code>promptClass()</code> and <code>promptMethods()</code>
from package @pkg{methods}.  If it is necessary or desired to provide an
explicit function declaration (in a <code>\usage</code> section) for an S4
method (e.g., if it has "surprising arguments" to be mentioned
explicitly), one can use the special markup
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">\S4method{<var>generic</var>}{<var>signature_list</var>}(<var>argument_list</var>)
</pre></td></tr></tbody></table>

<p>(e.g., <samp>`\S4method{coerce}{ANY,NULL}(from, to)'</samp>).
</p>
<p>To allow for making full use of the potential of the on-line
documentation system, all user-visible S4 classes and methods in a
package should at least have a suitable <code>\alias</code> entry in one of
the package's Rd files.  If a package has methods for a function defined
originally somewhere else, and does not change the underlying default
method for the function, the package is responsible for documenting the
methods it creates, but not for the function itself or the default
method.
</p>

<p>See <kbd>help("Documentation", package = "methods")</kbd> for more
information on using and creating on-line documentation for S4 classes and
methods.
</p>
<hr size="6">
<a name="Documenting-packages"></a>
<a name="SEC41"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC40" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC42" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC36" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC37" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 2.1.4 Documenting packages </h3>

<p>Packages may have an overview man page with an <code>\alias</code>
<code><var>pkgname</var>-package</code>, e.g. <samp>`utils-package'</samp> for the
@pkg{utils} package, when <code>package?<var>pkgname</var></code> will open that
help page.  If a topic named <code><var>pkgname</var></code> does not exist in
another Rd file, it is helpful to use this as an additional
<code>\alias</code>.
</p>
<p>Skeletons of documentation for a package can be generated using the
function <code>promptPackage()</code>.  If the <code>final = TRUE</code> argument
is used, then the Rd file will be generated in final form, containing
the information that would be produced by
<code>library(help = <var>pkgname</var>)</code>.  Otherwise (the default) comments
will be inserted giving suggestions for content.
</p>
<p>The only requirement for this page is that it include a
<code>\docType{package}</code> statement.  All other content is optional.
We suggest that it should be a short overview, to give a reader
unfamiliar with the package enough information to get started.  More
extensive documentation is better placed into a package vignette
(see section <a href="#SEC16">写包的vignettes</a>) and referenced from this page, or
into individual man pages for the functions, datasets, or classes.
</p>
<hr size="6">
<a name="Sectioning"></a>
<a name="SEC42"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC41" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC43" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC36" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 2.2 Sectioning </h2>

<p>To begin a new paragraph or leave a blank line in an example, just
insert an empty line (as in (La)TeX).  To break a line, use
<code>\cr</code>.
<a name="IDX55"></a>
</p>
<p>In addition to the predefined sections (such as <code>\description{}</code>,
<code>\value{}</code>, etc.), you can "define" arbitrary ones by
<code>\section{<var>section_title</var>}{…}</code>.
<a name="IDX56"></a>
For example
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">\section{Warning}{You must not call this function unless …}
</pre></td></tr></tbody></table>

<p>For consistency with the pre-assigned sections, the section name (the
first argument to <code>\section</code>) should be capitalized (but not all
upper case).  Note that there is no whitespace between the first and
second braced expressions.
</p>
<p>Note that additional named sections are always inserted at a fixed
position in the output (before <code>\note</code>, <code>\seealso</code> and the
examples), no matter where they appear in the input (but in the same
order as the input).
</p>

<hr size="6">
<a name="Marking-text"></a>
<a name="SEC43"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC42" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC44" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC36" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 2.3 Marking text </h2>

<p>The following logical markup commands are available for emphasizing or
quoting text.
</p>
<dl compact="compact">
<dt> <code>\emph{<var>text</var>}</code></dt>
<dd><a name="IDX57"></a>
</dd>
<dt> <code>\strong{<var>text</var>}</code></dt>
<dd><a name="IDX58"></a>
<p>Emphasize <var>text</var> using <em>italic</em> and <strong>bold</strong> font if
possible; <code>\strong</code> is stronger.
</p>
</dd>
<dt> <code>\bold{<var>text</var>}</code></dt>
<dd><a name="IDX59"></a>
<p>Set <var>text</var> in <b>bold</b> font if possible.
</p>
</dd>
<dt> <code>\sQuote{<var>text</var>}</code></dt>
<dd><a name="IDX60"></a>
</dd>
<dt> <code>\dQuote{<var>text</var>}</code></dt>
<dd><a name="IDX61"></a>
<p>Portably single or double quote <var>text</var> (without hard-wiring the
quotation marks).
</p></dd>
</dl>

<p>The following logical markup commands are available for indicating
specific kinds of text.
</p>
<dl compact="compact">
<dt> <code>\code{<var>text</var>}</code></dt>
<dd><a name="IDX62"></a>
<p>Indicate text that is a literal example of a piece of a program, e.g., a
fragment of @R{} code or the name of an @R{} object, using
<code>typewriter</code> font if possible.  Some characters will need to be
escaped (see section <a href="#SEC47">Insertions</a>).  The only markup interpreted inside
<code>\code</code> is <code>\link</code> and <code>\var</code>.
</p>
</dd>
<dt> <code>\preformatted{<var>text</var>}</code></dt>
<dd><a name="IDX63"></a>
<p>Indicate text that is a literal example of a piece of a program, using
<code>typewriter</code> font if possible.  The same characters need to be
escaped as for <code>\code</code>.  All other formatting, e.g. line breaks,
is preserved.  The closing brace should be on a line by itself.
</p>
</dd>
<dt> <code>\kbd{<var>keyboard-characters</var>}</code></dt>
<dd><a name="IDX64"></a>
<p>Indicate keyboard input, using <kbd>slanted typewriter</kbd> font if
possible, so users can distinguish the characters they are supposed to
type from those the computer outputs.
</p>
</dd>
<dt> <code>\samp{<var>text</var>}</code></dt>
<dd><a name="IDX65"></a>
<p>Indicate text that is a literal example of a sequence of characters.
</p>
</dd>
<dt> <code>\pkg{<var>package_name</var>}</code></dt>
<dd><a name="IDX66"></a>
<p>Indicate the name of an @R{} package.
</p>
</dd>
<dt> <code>\file{<var>file_name</var>}</code></dt>
<dd><a name="IDX67"></a>
<p>Indicate the name of a file.  Note that special characters do need to be
escaped.
</p></dd>
<dt> <code>\email{<var>email_address</var>}</code></dt>
<dd><a name="IDX68"></a>
<p>Indicate an electronic mail address.
</p></dd>
<dt> <code>\url{<var>uniform_resource_locator</var>}</code></dt>
<dd><a name="IDX69"></a>
<p>Indicate a uniform resource locator (<acronym>URL</acronym>) for the World Wide
Web.
</p>
</dd>
<dt> <code>\var{<var>metasyntactic_variable</var>}</code></dt>
<dd><a name="IDX70"></a>
<p>Indicate a metasyntactic variable.  In some cases this will be rendered
distinctly, e.g. in italic, but not in all<a name="DOCF15" href="#FOOT15">(15)</a>.
</p></dd>
<dt> <code>\env{<var>environment_variable</var>}</code></dt>
<dd><a name="IDX71"></a>
<p>Indicate an environment variable.
</p></dd>
<dt> <code>\option{<var>option</var>}</code></dt>
<dd><a name="IDX72"></a>
<p>Indicate a command-line option.
</p></dd>
<dt> <code>\command{<var>command_name</var>}</code></dt>
<dd><a name="IDX73"></a>
<p>Indicate the name of a command.
</p></dd>
<dt> <code>\dfn{<var>term</var>}</code></dt>
<dd><a name="IDX74"></a>
<p>Indicate the introductory or defining use of a term.
</p></dd>
<dt> <code>\cite{<var>reference</var>}</code></dt>
<dd><a name="IDX75"></a>
<p>Indicate a reference without a direct cross-reference via <code>\link</code>
(see section <a href="#SEC45">Cross-references</a>), such as the name of a book.
</p></dd>
<dt> <code>\acronym{<var>acronym</var>}</code></dt>
<dd><a name="IDX76"></a>
<p>Indicate an acronym (an abbreviation written in all capital letters),
such as <acronym>GNU</acronym>.
</p></dd>
</dl>

<p>Note that unless explicitly stated otherwise, special characters
(see section <a href="#SEC47">Insertions</a>) must be escaped inside the above markup commands.
</p>

<hr size="6">
<a name="Lists-and-tables"></a>
<a name="SEC44"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC43" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC45" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC36" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 2.4 Lists and tables </h2>

<p>The <code>\itemize</code> and <code>\enumerate</code> commands take a single
argument, within which there may be one or more <code>\item</code> commands.
The text following each <code>\item</code> is formatted as one or more
paragraphs, suitably indented and with the first paragraph marked with a
bullet point (<code>\itemize</code>) or a number (<code>\enumerate</code>).
</p>
<p><code>\itemize</code> and <code>\enumerate</code> commands may be nested.
</p>
<a name="IDX77"></a>
<p>The <code>\describe</code> command is similar to <code>\itemize</code> but allows
initial labels to be specified.  The <code>\item</code>s take two arguments,
the label and the body of the item, in exactly the same way as argument
and value <code>\item</code>s.  <code>\describe</code> commands are mapped to
<code>&lt;DL&gt;</code> lists in @HTML{} and <code>\description</code> lists in LaTeX.
</p>
<a name="IDX78"></a>
<p>The <code>\tabular</code> command takes two arguments.  The first gives for
each of the columns the required alignment (<samp>`l'</samp> for
left-justification, <samp>`r'</samp> for right-justification or <samp>`c'</samp> for
centring.)  The second argument consists of an arbitrary number of
lines separated by <code>\cr</code>, and with fields separated by <code>\tab</code>.
For example:
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">  \tabular{rlll}{
    [,1] \tab Ozone   \tab numeric \tab Ozone (ppb)\cr
    [,2] \tab Solar.R \tab numeric \tab Solar R (lang)\cr
    [,3] \tab Wind    \tab numeric \tab Wind (mph)\cr
    [,4] \tab Temp    \tab numeric \tab Temperature (degrees F)\cr
    [,5] \tab Month   \tab numeric \tab Month (1--12)\cr
    [,6] \tab Day     \tab numeric \tab Day of month (1--31)
  }
</pre></td></tr></tbody></table>

<p>There must be the same number of fields on each line as there are
alignments in the first argument, and they must be non-empty (but can
contain only spaces).  (There is no whitespace between <code>\tabular</code>
and the first argument, nor between the two arguments.)
</p>
<hr size="6">
<a name="Cross_002dreferences"></a>
<a name="SEC45"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC44" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC46" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC36" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 2.5 Cross-references </h2>

<p>The markup <code>\link{<var>foo</var>}</code> (usually in the combination
<code>\code{\link{<var>foo</var>}}</code>) produces a hyperlink to the help for
<var>foo</var>.  Here <var>foo</var> is a <em>topic</em>, that is the argument of
<code>\alias</code> markup in another Rd file (possibly in another package).
Hyperlinks are supported in some of the formats to which Rd files are
converted, for example @HTML{} and PDF, but ignored in others, e.g.
the text and S nroff formats.
</p>
<p>One main usage of <code>\link</code> is in the <code>\seealso</code> section of the
help page, see section <a href="#SEC37">Rd format</a>.
</p>
<p>Note that whereas leading and trailing spaces are stripped when
extracting a topic from a <code>\alias</code>, they are not stripped when
looking up the topic of a <code>\link</code>.
</p>
<a name="IDX79"></a>
<p>You can specify a link to a different topic than its name by
<code>\link[=<var>dest</var>]{<var>name</var>}</code> which links to topic <var>dest</var>
with name <var>name</var>.  This can be used to refer to the documentation
for S3/4 classes, for example <code>\code{"\link[=abc-class]{abc}"}</code>
would be a way to refer to the documentation of an S4 class <code>"abc"</code>
defined in your package, and
<code>\code{"\link[=terms.object]{terms}"}</code> to the S3 <code>"terms"</code>
class (in package @pkg{stats}).  To make these easy to read,
<code>\code{"\linkS4class{abc}"}</code> expands to the form given above.
</p>
<p>There are two other forms of optional argument specified as
<code>\link[<var>pkg</var>]{<var>foo</var>}</code> and
<code>\link[<var>pkg:bar</var>]{<var>foo</var>}</code> to link to the package
<var>pkg</var>, to <em>files</em> <tt>`<var>foo</var>.html'</tt> and
<tt>`<var>bar</var>.html'</tt> respectively.  These are rarely needed, perhaps to
refer to not-yet-installed packages (but there the @HTML{} help system
will resolve the link at run time) or in the normally undesirable event
that more than one package offers help on a topic<a name="DOCF16" href="#FOOT16">(16)</a> (in which case
the present package has precedence so this is only needed to refer to
other packages).  They are only in used in (C)HTML help (and not for
hyperlinks in LaTeX nor S sgml conversions of help pages), and link
to the file rather than the topic (since there is no way to know which
topics are in which files in an uninstalled package).
</p>
<hr size="6">
<a name="Mathematics"></a>
<a name="SEC46"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC45" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC47" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC36" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 2.6 Mathematics </h2>

<p>Mathematical formulae should be set beautifully for printed
documentation yet we still want something useful for text and @HTML{}
online help.  To this end, the two commands
<code>\eqn{<var>latex</var>}{<var>ascii</var>}</code> and
<code>\deqn{<var>latex</var>}{<var>ascii</var>}</code> are used.  Where <code>\eqn</code>
is used for "inline" formulae (corresponding to TeX's
<code>$…$</code>, <code>\deqn</code> gives "displayed equations" (as in
LaTeX's <code>displaymath</code> environment, or TeX's
<code>$$…$$</code>).
</p>
<p>Both commands can also be used as <code>\eqn{<var>latexascii</var>}</code> (only
<em>one</em> argument) which then is used for both <var>latex</var> and
<var>ascii</var>.  No whitespace is allowed between command and the first
argument, nor between the first and second arguments.
</p>
<p>The following example is from <tt>`Poisson.Rd'</tt>:
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">  \deqn{p(x) = \frac{\lambda^x e^{-\lambda}}{x!}}{%
        p(x) = lambda^x exp(-lambda)/x!}
  for \eqn{x = 0, 1, 2, \ldots}.
</pre></td></tr></tbody></table>

<p>For @HTML{} and text on-line help we get
</p>
<blockquote><table class="cartouche" border="1"><tbody><tr><td>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">    p(x) = lambda^x exp(-lambda)/x!

for x = 0, 1, 2, ....
</pre></td></tr></tbody></table></td></tr></tbody></table>
</blockquote>

<p>See <a href="#SEC52">Back-compatibility issues</a> for earlier problems with <code>\eqn</code>
with one argument immediately followed by a right brace.
</p>

<hr size="6">
<a name="Insertions"></a>
<a name="SEC47"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC46" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC48" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC36" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 2.7 Insertions </h2>

<p>Use <code>\R</code> for the @R{} system itself (you don't need extra
<samp>`{}'</samp> or <samp>`\'</samp>).  Use <code>\dots</code>
<a name="IDX80"></a>
for the dots in function argument lists <samp>`…'</samp>, and
<code>\ldots</code>
<a name="IDX81"></a>
for ellipsis dots in ordinary text.
</p>
<p>After a <samp>`%'</samp>, you can put your own comments regarding the help text.
The rest of the line will be completely disregarded, normally.
Therefore, you can also use it to make part of the "help" invisible.
</p>
<p>You can produce a backslash (<samp>`\'</samp>) by escaping it by another
backslash.  (Note that <code>\cr</code> is used for generating line breaks.)
</p>
<p>The "comment" character <samp>`%'</samp> and unpaired braces<a name="DOCF17" href="#FOOT17">(17)</a>
<em>always</em> need to be escaped by <samp>`\'</samp>, and <samp>`\\'</samp> can be used
for backslash and needs to be when there two or more adjacent
backslashes).  Inside the verbatim-like commands (<code>usage</code>,
<code>\code</code>, <code>\preformatted</code> and <code>\examples</code>), no other
characters are special.  Note that <code>\file</code> is <strong>not</strong> a
verbatim-like command.
</p>
<p>In "regular" text (not verbatim-like, no <code>\eqn</code>, …), you
currently must escape most LaTeX special characters, i.e., besides
<samp>`%'</samp>, <samp>`{'</samp>, and <samp>`}'</samp>, the specials <samp>`$'</samp>, <samp>`#'</samp>, and
<samp>`_'</samp> are produced by preceding each with a <samp>`\'</samp>.  (<samp>`&amp;'</samp> can
also be escaped, but need not be.)  Further, enter <samp>`^'</samp> as
<code>\eqn{\mbox{\textasciicircum}}{^}</code>, and <samp>`~'</samp> by
<code>\eqn{\mbox{\textasciitilde}}{~}</code> or <code>\eqn{\sim}{~}</code>
(for a short and long tilde respectively).  Also, <samp>`&lt;'</samp>, <samp>`&gt;'</samp>,
and <samp>`|'</samp> must only be used in math mode, i.e., within <code>\eqn</code> or
<code>\deqn</code>.
</p>
<a name="IDX82"></a>
<p>Text which might need to be represented differently in different
encodings should be marked by <code>\enc</code>, e.g.
<code>\enc{J&#246;reskog}{Joreskog}</code> where the first argument will be
used where encodings are allowed and the second should be
<acronym>ASCII</acronym> (and is used for e.g. the text conversion).
</p>
<hr size="6">
<a name="Indices"></a>
<a name="SEC48"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC47" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC49" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC36" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 2.8 Indices </h2>

<p>The <code>\alias</code> command (see section <a href="#SEC38">Documenting functions</a>) is used to
specify the "topics" documented, which should include <em>all</em> R
objects in a package such as functions and variables, data sets, and S4
classes and methods (see section <a href="#SEC40">Documenting S4 classes and methods</a>).  The
on-line help system searches the index data base consisting of all
alias topics.
</p>
<a name="IDX83"></a>
<p>In addition, it is possible to provide "concept index entries" using
<code>\concept</code>, which can be used for <code>help.search()</code> lookups.
E.g., file <tt>`cor.test.Rd'</tt> in the standard package @pkg{stats}
contains
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">\concept{Kendall correlation coefficient}
\concept{Pearson correlation coefficient}
\concept{Spearman correlation coefficient}
</pre></td></tr></tbody></table>

<p>so that e.g. <kbd>??Spearman</kbd> will succeed in finding the
help page for the test for association between paired samples using
Spearman's @eqn{\rho, rho}.  (Note that concepts are not currently
supported by the @HTML{} search accessed <em>via</em>
<samp>`help.start()'</samp>.)
</p>
<p>(Note that <code>help.search()</code> only uses "sections" of documentation
objects with no additional markup.)
</p>
<p>If you want to cross reference such items from other help files via
<code>\link</code>, you need to use <code>\alias</code> and not <code>\concept</code>.
</p>

<hr size="6">
<a name="Platform_002dspecific-sections"></a>
<a name="SEC49"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC48" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC50" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC36" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 2.9 Platform-specific documentation </h2>

<p>Sometimes the documentation needs to differ by platform.  Currently two
OS-specific options are available, <samp>`unix'</samp> and <samp>`windows'</samp>, and
lines in the help source file can be enclosed in
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#ifdef <var>OS</var>
   ...
#endif
</pre></td></tr></tbody></table>

<p>or
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#ifndef <var>OS</var>
   ...
#endif
</pre></td></tr></tbody></table>

<p>for OS-specific inclusion or exclusion.
</p>
<p>If the differences between platforms are extensive or the @R{} objects
documented are only relevant to one platform, platform-specific Rd files
can be put in a <tt>`unix'</tt> or <tt>`windows'</tt> subdirectory.
</p>
<hr size="6">
<a name="Encoding"></a>
<a name="SEC50"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC49" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC51" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC36" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 2.10 Encoding </h2>

<p>Rd files are text files and so it is impossible to deduce the encoding
they are written in unless <acronym>ASCII</acronym>: files with 8-bit
characters could be UTF-8, Latin-1, Latin-9, KOI8-R, EUC-JP,
<em>etc</em>.  So the <code>\encoding{}</code> directive must be used to
specify the encoding if it is not <acronym>ASCII</acronym>.  (The
<code>\encoding{}</code> directive must be on a line by itself, and in
particular one containing no non-<acronym>ASCII</acronym> characters.  As from
@R{} 2.6.0 the encoding declared in the <tt>`DESCRIPTION'</tt> file will
be used if none is declared in the file.)  This is used when creating
the header of the @HTML{} conversion (if not present, for
back-compatibility the processing to @HTML{} assumes that the file is
in Latin-1 (ISO-8859-1)) and to add comments to the text and examples
conversions.  It is also used to indicate to LaTeX how to process
the file (see below).
</p>
<p>Wherever possible, avoid non-<acronym>ASCII</acronym> chars in Rd files, and
even symbols such as <samp>`&lt;'</samp>, <samp>`&gt;'</samp>, <samp>`$'</samp>, <samp>`^'</samp>, <samp>`&amp;'</samp>,
<samp>`|'</samp>, <samp>`@'</samp>, <samp>`~'</samp>, and <samp>`*'</samp> outside verbatim
environments (since they may disappear in fonts designed to render
text).  (Function <code>showNonASCII</code> in package @pkg{tools} can help
in finding non-<acronym>ASCII</acronym> bytes in the files.)
</p>
<p>For convenience, encoding names <samp>`latin1'</samp> and <samp>`latin2'</samp> are
always recognized: these and <samp>`UTF-8'</samp> are likely to work fairly
widely.  However, this does not mean that all characters in
<samp>`UTF-8'</samp> will be recognized, and the coverage of non-Latin
characters is often low, especially when converting to LaTeX.
</p>
<p>The <code>\enc</code> command (see section <a href="#SEC47">Insertions</a>) can be used to provide
transliterations which will be used in conversions that do not support
the declared encoding.
</p>
<p>The LaTeX conversion converts an explicit encoding of the file to a
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">\inputencoding{<var>some_encoding</var>}
</pre></td></tr></tbody></table>

<p>command, and this needs to be matched by a suitable invocation of the
<code>\usepackage{inputenc}</code> command.  The @R{} utility <code>R
CMD Rd2dvi</code> looks at the converted code and includes the encodings used:
it might for example use
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">\usepackage[latin1,latin9,utf8]{inputenc}
</pre></td></tr></tbody></table>

<p>(Use of <code>utf8</code> as an encoding requires LaTeX dated 2003/12/01 or
later.  Also, the use of Cyrillic characters in <samp>`UTF-8'</samp> appears to also
need <samp>`\usepackage[T2A]{fontenc}'</samp>.)
</p>
<p>Note that this mechanism works best with Latin letters and for example
the copyright symbol may be rendered as a subscript and the plus-minus
symbol cannot be used in text.
</p>


<hr size="6">
<a name="Processing-Rd-format"></a>
<a name="SEC51"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC50" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC52" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC36" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 2.11 Processing Rd format </h2>

<p>There are several commands to process Rd files from the system command
line.  All of these need Perl to be installed.
</p>
<a name="IDX84"></a>
<p>Using <code>R CMD Rdconv</code> one can convert @R{} documentation format to
other formats, or extract the executable examples for run-time testing.
Currently, conversions to plain text, @HTML{}, LaTeX, and @Sl{}
version 3 or 4 documentation formats are supported.
</p>
<p>In addition to this low-level conversion tool, the @R{} distribution
provides two user-level programs for processing Rd format.
<a name="IDX85"></a>
<a name="IDX86"></a>
<code>R CMD Rd2txt</code> produces "pretty" plain text output from an Rd
file, and is particularly useful as a previewer when writing Rd format
documentation within Emacs.  <code>R CMD Rd2dvi</code> generates DVI (or, if
option <samp>`--pdf'</samp> is given, PDF) output from documentation in Rd
files, which can be specified either explicitly or by the path to a
directory with the sources of a package (or bundle).  In the latter
case, a reference manual for all documented objects in the package is
created, including the information in the <tt>`DESCRIPTION'</tt> files.
</p>
<a name="IDX87"></a>
<p><code>R CMD Sd2Rd</code> converts @Sl{} version 3 documentation files
(which use an extended Nroff format) and @Sl{} version 4 documentation
(which uses SGML markup) to Rd format.  This is useful when porting a
package originally written for the @Sl{} system to @R{}.  @Sl{} version
3 files usually have extension <tt>`.d'</tt>, whereas version 4 ones have
extension <tt>`.sgml'</tt> or <tt>`.sgm'</tt>.
</p>
<a name="IDX88"></a>
<a name="IDX89"></a>
<p><code>R CMD Sweave</code> and <code>R CMD Stangle</code> process <samp>`Sweave'</samp>
documentation files (usually with extension <samp>`.Snw'</samp> or <samp>`.Rnw'</samp>):
<code>R CMD Stangle</code> is use to extract the @R{} code fragments.
</p>
<p>The exact usage and a detailed list of available options for all but the
last two of the above commands can be obtained by running <code>R CMD
<var>command</var> --help</code>, e.g., <kbd>R CMD Rdconv --help</kbd>.  All available
commands can be listed using <kbd>R --help</kbd> (or <kbd>Rcmd --help</kbd> under
Windows).
</p>
<p>All of these work under Windows. You will need to have installed the
files in the @R{} binary Windows distribution for installing source
packages (this is true for a default installation), and for <code>R CMD
Rd2dvi</code> also the tools to build packages from source as described in the
"R Installation and Administration" manual.
</p>
<hr size="6">
<a name="Back_002dcompatibility-issues"></a>
<a name="SEC52"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC51" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC36" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC36" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 2.12 Back-compatibility issues </h2>

<p>Packages that are intended to work with earlier versions of @R{} need to
be written in a rather stricter dialect, and some notes follow.
</p>
<p>Versions of @R{} prior to 2.8.1 failed to process correctly
constructions such as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">\item{name}{some text \eqn{x}}
</pre></td></tr></tbody></table>

<p>the problem being the one- or two-argument command <code>\eqn</code>
immediately followed by a right brace.  In many cases this can be
resolved by adding punctuation, and even space before the final brace
sufficed.
</p>
<p>It was never intended to allow whitespace between arguments to
two-argument commands, e.g.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">\item{name} {some text}
</pre></td></tr></tbody></table>

<p>has always been an error.  However, this error is not looked for and
results in incorrect output (often by omitting entirely the text for the
item, sometimes with a warning).  Future versions of @R{} will detect
and fixup most cases of this error, with a warning.
</p>
<p>A <code>\value</code> block is implicitly a <code>\itemize</code> environment, but
quite a few package writers have ignored this.  As from @R{} 2.8.1 this
is detected, and the <code>\itemize</code> command (but not its contents)
removed, with a warning.
</p>

<hr size="6">
<a name="Tidying-and-profiling-R-code"></a>
<a name="SEC53"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC52" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC54" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC36" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h1 class="chapter"> 3. Tidying and profiling R code </h1>

<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC54">3.1 Tidying R code</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">              
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC55">3.2 Profiling R code for speed</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC56">3.3 Profiling R code for memory use</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC60">3.4 Profiling compiled code</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">     
</td></tr>
</tbody></table>

<p>@R{} code which is worth preserving in a package and perhaps making
available for others to use is worth documenting, tidying up and perhaps
optimizing. The last two of these activities are the subject of this
chapter.
</p>
<hr size="6">
<a name="Tidying-R-code"></a>
<a name="SEC54"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC53" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC55" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC53" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 3.1 Tidying R code </h2>

<p>@R{} treats function code loaded from packages and code entered by users
differently.  Code entered by users has the source code stored in an
attribute, and when the function is listed, the original source is
reproduced.  Loading code from a package (by default) discards the
source code, and the function listing is re-created from the parse tree
of the function.
</p>
<p>Normally keeping the source code is a good idea, and in particular it
avoids comments being moved around in the source.  However, we can make
use of the ability to re-create a function listing from its parse tree
to produce a tidy version of the function, for example with consistent
indentation and spaces around operators.  This tidied version is much
easier to read, not least by other users who are used to the standard
format.  Although the deparsing cannot do so, we recommend the
consistent use of the preferred assignment operator <samp>`&lt;-'</samp> (rather
than <samp>`='</samp>) for assignment.
</p>
<p>We can subvert the keeping of source in two ways.
</p>
<ol>
<li>
The option <code>keep.source</code> can be set to <code>FALSE</code> before the code
is loaded into @R{}.
</li><li>
The stored source code can be removed by removing the <code>source</code>
attribute, for example by

<table><tbody><tr><td>&nbsp;</td><td><pre class="example">attr(myfun, "source") &lt;- NULL
</pre></td></tr></tbody></table>
</li></ol>


<p>In each case if we then list the function we will get the standard
layout.
</p>
<p>Suppose we have a file of functions <tt>`myfuns.R'</tt> that we want to
tidy up.  Create a file <tt>`tidy.R'</tt> containing
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">options(keep.source = FALSE)
source("myfuns.R")
dump(ls(all = TRUE), file = "new.myfuns.R")
</pre></td></tr></tbody></table>

<p>and run @R{} with this as the source file, for example by <kbd>R
--vanilla &lt; tidy.R</kbd> or by pasting into an @R{} session.  Then the file
<tt>`new.myfuns.R'</tt> will contain the functions in alphabetical order in
the standard layout.  Warning:  comments in your functions will be lost.
</p>
<p>The standard format provides a good starting point for further tidying.
Many package authors use a version of Emacs (on Unix or Windows) to edit
@R{} code, using the ESS[S] mode of the <acronym>ESS</acronym> Emacs package.
See <a href="file:///C:/Users/Guohui%20Ding/Documents/Tencent%20Files/14750783/FileRecv/R-ints.html#R-coding-standards">(R-ints)R coding standards</a> section `R coding standards' in <cite>R Internals</cite>
for style options within the ESS[S] mode recommended for the source code
of @R{} itself.
</p>

<hr size="6">
<a name="Profiling-R-code-for-speed"></a>
<a name="SEC55"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC54" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC56" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC53" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 3.2 Profiling R code for speed </h2>

<p>It is possible to profile @R{} code on Windows and most<a name="DOCF18" href="#FOOT18">(18)</a> Unix-like versions of
@R{}.
</p>
<p>The command <code>Rprof</code> is used to control profiling, and its help
page can be consulted for full details.  Profiling works by recording at
fixed intervals<a name="DOCF19" href="#FOOT19">(19)</a> (by default every 20 msecs) which
@R{} function is being used, and recording the results in a file
(default <tt>`Rprof.out'</tt> in the working directory).  Then the function
<code>summaryRprof</code> or the command-line utility <code>R CMD Rprof
<var>Rprof.out</var></code> can be used to summarize the activity.
</p>
<p>As an example, consider the following code (from Venables &amp; Ripley,
2002).
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">library(MASS); library(boot)
storm.fm &lt;- nls(Time ~ b*Viscosity/(Wt - c), stormer,
                start = c(b=29.401, c=2.2183))
st &lt;- cbind(stormer, fit=fitted(storm.fm))
storm.bf &lt;- function(rs, i) {
    st$Time &lt;-  st$fit + rs[i]
    tmp &lt;- nls(Time ~ (b * Viscosity)/(Wt - c), st,
               start = coef(storm.fm))
    tmp$m$getAllPars()
}
rs &lt;- scale(resid(storm.fm), scale = FALSE) # remove the mean
Rprof("boot.out")
storm.boot &lt;- boot(rs, storm.bf, R = 4999) # pretty slow
Rprof(NULL)
</pre></td></tr></tbody></table>

<p>Having run this we can summarize the results by
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">R CMD Rprof boot.out

Each sample represents 0.02 seconds.
Total run time: 80.74 seconds.

Total seconds: time spent in function and callees.
Self seconds: time spent in function alone.

   %       total       %       self
 total    seconds     self    seconds    name
100.00     80.74      0.22      0.18     "boot"
 99.65     80.46      1.19      0.96     "statistic"
 96.33     77.78      2.68      2.16     "nls"
 50.21     40.54      1.54      1.24     "&lt;Anonymous&gt;"
 47.11     38.04      1.83      1.48     ".Call"
 23.06     18.62      2.43      1.96     "eval"
 19.87     16.04      0.67      0.54     "as.list"
 18.97     15.32      0.64      0.52     "switch"
 17.88     14.44      0.47      0.38     "model.frame"
 17.41     14.06      1.73      1.40     "model.frame.default"
 17.41     14.06      2.80      2.26     "nlsModel"
 15.43     12.46      1.88      1.52     "qr.qty"
 13.40     10.82      3.07      2.48     "assign"
 12.73     10.28      2.33      1.88     "storage.mode&lt;-"
 12.34      9.96      1.81      1.46     "qr.coef"
 10.13      8.18      5.42      4.38     "paste"
  ...

   %       self        %       total
 self     seconds    total    seconds    name
  5.42      4.38     10.13      8.18     "paste"
  3.37      2.72      6.71      5.42     "as.integer"
  3.29      2.66      5.00      4.04     "as.double"
  3.20      2.58      4.29      3.46     "seq.default"
  3.07      2.48     13.40     10.82     "assign"
  2.92      2.36      5.95      4.80     "names"
  2.80      2.26     17.41     14.06     "nlsModel"
  2.68      2.16     96.33     77.78     "nls"
  2.53      2.04      2.53      2.04     ".Fortran"
  2.43      1.96     23.06     18.62     "eval"
  2.33      1.88     12.73     10.28     "storage.mode&lt;-"
  ...
</pre></td></tr></tbody></table>

<p>This often produces surprising results and can be used to identify
bottlenecks or pieces of @R{} code that could benefit from being
replaced by compiled code.
</p>
<p><code>R CMD Rprof</code> uses a Perl script that may be a little faster than
<code>summaryRprof</code> for large files.  On the other hand
<code>summaryRprof</code> does not require Perl and provides the results as an
@R{} object.
</p>
<p>Two warnings: profiling does impose a small performance penalty, and the
output files can be very large if long runs are profiled.
</p>
<p>Profiling short runs can sometimes give misleading results.  @R{} from
time to time performs <em>garbage collection</em> to reclaim unused
memory, and this takes an appreciable amount of time which profiling
will charge to whichever function happens to provoke it.  It may be
useful to compare profiling code immediately after a call to <code>gc()</code>
with a profiling run without a preceding call to <code>gc</code>.
</p>
<p>More detailed analysis of the output can be achieved by the tools in the
CRAN packages @pkg{proftools} and @pkg{prof}: in particular these allow
call graphs to be studied.
</p>
<hr size="6">
<a name="Profiling-R-code-for-memory-use"></a>
<a name="SEC56"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC55" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC57" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC53" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 3.3 Profiling R code for memory use </h2>

<p>Measuring memory use in @R{} code is useful either when the code takes
more memory than is conveniently available or when memory allocation
and copying of objects is responsible for slow code. There are three
ways to profile memory use over time in @R{} code. All three require
@R{} to have been compiled with <samp>`--enable-memory-profiling'</samp>,
which is not the default. All can be misleading, for different
reasons.
</p>
<p>In understanding the memory profiles it is useful to know a little
more about @R{}'s memory allocation. Looking at the results of
<code>gc()</code> shows a division of memory into <code>Vcells</code> used to
store the contents of vectors and <code>Ncells</code> used to store
everything else, including all the administrative overhead for vectors
such as type and length information.  In fact the vector contents are
divided into two pools. Memory for small vectors (by default 128 bytes
or less) is obtained in large chunks and then parcelled out by R;
memory for larger vectors is obtained directly from the operating
system.
</p>
<p>Some memory allocation is obvious in interpreted code, for example,
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">y &lt;- x + 1
</pre></td></tr></tbody></table>

<p>allocates memory for a new vector <code>y</code>. Other memory allocation is
less obvious and occurs because <code>R</code> is forced to make good on its
promise of `call-by-value' argument passing.  When an argument is
passed to a function it is not immediately copied. Copying occurs (if
necessary) only when the argument is modified.  This can lead to
surprising memory use. For example, in the `survey' package we have
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">print.svycoxph &lt;- function (x, ...)
{
    print(x$survey.design, varnames = FALSE, design.summaries = FALSE,
        ...)
    x$call &lt;- x$printcall
    NextMethod()
}
</pre></td></tr></tbody></table>

<p>It may not be obvious that the assignment to <code>x$call</code> will cause
the entire object <code>x</code> to be copied.  This copying to preserve the
call-by-value illusion is usually done by the internal C function
<code>duplicate</code>.
</p>
<p>The main reason that memory-use profiling is difficult is garbage
collection. Memory is allocated at well-defined times in an @R{}
program, but is freed whenever the garbage collector happens to run.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC57">3.3.1 Memory statistics from <code>Rprof</code></a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC58">3.3.2 Tracking memory allocations</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC59">3.3.3 Tracing copies of an object</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
</tbody></table>

<hr size="6">
<a name="Memory-statistics-from-Rprof"></a>
<a name="SEC57"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC56" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC58" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC53" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC56" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 3.3.1 Memory statistics from <code>Rprof</code> </h3>

<p>The sampling profiler <code>Rprof</code> described in the previous section
can be given the option <code>memory.profiling=TRUE</code>. It then writes
the total @R{} memory allocation in small vectors, large vectors, and
cons cells or nodes at each sampling interval. It also writes out the
number of calls to the internal function <code>duplicate</code>, which is
called to copy @R{} objects. <code>summaryRprof</code> provides summaries of
this information.  The main reason that this can be misleading is that
the memory use is attributed to the function running at the end of the
sampling interval. A second reason is that garbage collection can make
the amount of memory in use decrease, so a function appears to use
little memory. Running under <code>gctorture</code> helps with both
problems: it slows down the code to effectively increase the sampling
frequency and it makes each garbage collection release a smaller
amount of memory.  Changing the memory limits with <code>mem.limits()</code>
may also be useful, to see how the code would run under different
memory conditions.
</p>
<hr size="6">
<a name="Tracking-memory-allocations"></a>
<a name="SEC58"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC57" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC59" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC53" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC56" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 3.3.2 Tracking memory allocations </h3>

<p>The second method of memory profiling uses a memory-allocation
profiler, <code>Rprofmem()</code>, which writes out a stack trace to an
output file every time a large vector is allocated (with a
user-specified threshold for `large') or a new page of memory is
allocated for the @R{} heap. Summary functions for this output are still
being designed. 
</p>
<p>Running the example from the previous section with
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">&gt; Rprofmem("boot.memprof",threshold=1000)
&gt; storm.boot &lt;- boot(rs, storm.bf, R = 4999)
&gt; Rprofmem(NULL)
</pre></td></tr></tbody></table>

<p>shows that apart from some initial and final work in <code>boot</code> there
are no vector allocations over 1000 bytes.
</p>
<hr size="6">
<a name="Tracing-copies-of-an-object"></a>
<a name="SEC59"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC58" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC60" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC53" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC56" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 3.3.3 Tracing copies of an object </h3>

<p>The third method of memory profiling involves tracing copies made of a
specific (presumably large) @R{} object. Calling <code>tracemem</code> on an
object marks it so that a message is printed to standard output when
the object is copied via <code>duplicate</code> or coercion to another type,
or when a new object of the same size is created in arithmetic
operations. The main reason that this can be misleading is that
copying of subsets or components of an object is not tracked. It may
be helpful to use <code>tracemem</code> on these components.
</p>

<p>In the example above we can run <code>tracemem</code> on the data frame
<code>st</code>
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">&gt; tracemem(st)
[1] "&lt;0x9abd5e0&gt;"
&gt; storm.boot &lt;- boot(rs, storm.bf, R = 4)
memtrace[0x9abd5e0-&gt;0x92a6d08]: statistic boot
memtrace[0x92a6d08-&gt;0x92a6d80]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x92a6d80-&gt;0x92a6df8]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x9abd5e0-&gt;0x9271318]: statistic boot
memtrace[0x9271318-&gt;0x9271390]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x9271390-&gt;0x9271408]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x9abd5e0-&gt;0x914f558]: statistic boot
memtrace[0x914f558-&gt;0x914f5f8]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x914f5f8-&gt;0x914f670]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x9abd5e0-&gt;0x972cbf0]: statistic boot
memtrace[0x972cbf0-&gt;0x972cc68]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x972cc68-&gt;0x972cd08]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x9abd5e0-&gt;0x98ead98]: statistic boot
memtrace[0x98ead98-&gt;0x98eae10]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x98eae10-&gt;0x98eae88]: $&lt;-.data.frame $&lt;- statistic boot
</pre></td></tr></tbody></table>

<p>The object is duplicated fifteen times, three times for each of the
<code>R+1</code> calls to <code>storm.bf</code>.  This is surprising, since none of the duplications happen inside <code>nls</code>. Stepping through <code>storm.bf</code> in the debugger shows that all three happen in the line
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">st$Time &lt;- st$fit + rs[i]
</pre></td></tr></tbody></table>
<p>Data frames are slower than matrices and this is an example of why.
Using <code>tracemem(st$Viscosity)</code> does not reveal any additional
copying.
</p>
<hr size="6">
<a name="Profiling-compiled-code"></a>
<a name="SEC60"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC59" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC61" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC53" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC53" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 3.4 Profiling compiled code </h2>

<p>Profiling compiled code is highly system-specific, but this section
contains some hints gleaned from various @R{} users.  Some methods need
to be different for a compiled executable and for dynamic/shared
libraries/objects as used by @R{} packages.  We know of no good way to
profile DLLs on Windows.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC61">3.4.1 Linux</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                       
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC64">3.4.2 Solaris</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                     
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC65">3.4.3 MacOS X</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                     
</td></tr>
</tbody></table>

<hr size="6">
<a name="Linux"></a>
<a name="SEC61"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC60" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC62" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC53" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC60" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 3.4.1 Linux </h3>

<p>Options include using <code>sprof</code> for a shared object, and
<code>oprofile</code> (see <a href="http://oprofile.sourceforge.net/">http://oprofile.sourceforge.net/</a>) for any
executable or shared object.
</p>
<hr size="6">
<a name="SEC62"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC61" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC63" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC53" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC61" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h4 class="subsubsection"> 3.4.1.1 sprof </h4>

<p>You can select shared objects to be profiled with <code>sprof</code> by
setting the environment variable <code>LD_PROFILE</code>.  For example
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">% setenv LD_PROFILE /path/to/R_HOME/library/stats/libs/stats.so
R 
... run the boot example
% sprof /path/to/R_HOME/library/stats/libs/stats.so \
  /var/tmp/path/to/R_HOME/library/stats/libs/stats.so.profile

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls  us/call  us/call  name
 76.19      0.32     0.32        0     0.00           numeric_deriv
 16.67      0.39     0.07        0     0.00           nls_iter
  7.14      0.42     0.03        0     0.00           getListElement

rm /path/to/R_HOME/library/stats/libs/stats.so.profile
... to clean up ...
</pre></td></tr></tbody></table>
<p>It is possible that root access is needed to create the directories used
for the profile data.
</p>
<hr size="6">
<a name="SEC63"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC62" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC64" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC53" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC61" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h4 class="subsubsection"> 3.4.1.2 oprofile </h4>

<p><code>oprofile</code> works by running a daemon which collects information.
The daemon must be started as root, e.g.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">% su
% opcontrol --no-vmlinux
% (optional, some platforms) opcontrol --callgraph=5
% opcontrol --start
% exit
</pre></td></tr></tbody></table>
<p>Then as a user
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">% R
... run the boot example
% opcontrol --dump
% opreport -l /path/to/R_HOME/library/stats/libs/stats.so
...
samples  %        symbol name
1623     75.5939  anonymous symbol from section .plt
349      16.2552  numeric_deriv
113       5.2632  nls_iter
62        2.8878  getListElement
% opreport -l /path/to/R_HOME/bin/exec/R
...
samples  %        symbol name
76052    11.9912  Rf_eval
54670     8.6198  Rf_findVarInFrame3
37814     5.9622  Rf_allocVector
31489     4.9649  Rf_duplicate
28221     4.4496  Rf_protect
26485     4.1759  Rf_cons
23650     3.7289  Rf_matchArgs
21088     3.3250  Rf_findFun
19995     3.1526  findVarLocInFrame
14871     2.3447  Rf_evalList
13794     2.1749  R_Newhashpjw
13522     2.1320  R_gc_internal
...
</pre></td></tr></tbody></table>
<p>Shutting down the profiler and clearing the records needs to be done as
root.  You can use <code>opannotate</code> to annotate the source code with
the times spent in each section, if the appropriate source code was
compiled with debugging support, and <code>opreport -c</code> to generate a
callgraph (if collection was enabled and the platform supports this).
</p>
<hr size="6">
<a name="Solaris"></a>
<a name="SEC64"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC63" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC65" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC53" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC60" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 3.4.2 Solaris </h3>

<p>On 64-bit (only) Solaris, the standard profiling tool <code>gprof</code>
collects information from shared libraries compiled with <samp>`-pg'</samp>.
</p>
<hr size="6">
<a name="MacOS-X"></a>
<a name="SEC65"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC64" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC53" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC60" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 3.4.3 MacOS X </h3>

<p>Developers have recommended <code>sample</code> (or <code>Sampler.app</code>,
which is a GUI version) and <code>Shark</code> (see
<a href="http://developer.apple.com/tools/sharkoptimize.html">http://developer.apple.com/tools/sharkoptimize.html</a> and
<a href="http://developer.apple.com/tools/shark_optimize.html">http://developer.apple.com/tools/shark_optimize.html</a>).
</p>

<hr size="6">
<a name="Debugging"></a>
<a name="SEC66"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC65" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC67" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC53" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h1 class="chapter"> 4. Debugging </h1>

<p>This chapter covers the debugging of @R{} extensions, starting with the
ways to get useful error information and moving on to how to deal with
errors that crash @R{}.  For those who prefer other styles there are
contributed packages such as @pkg{debug} on CRAN (described in an
article in <a href="http://cran.r-project.org/doc/Rnews/Rnews_2003-3.pdf">R-News 3/3</a>).  (There are notes from 2002 provided by Roger Peng at
<a href="http://www.biostat.jhsph.edu/~rpeng/docs/R-debug-tools.pdf">http://www.biostat.jhsph.edu/~rpeng/docs/R-debug-tools.pdf</a> which
provide complementary examples to those given here.)
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC67">4.1 Browsing</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                    
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC68">4.2 Debugging R code</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">            
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC69">4.3 Using gctorture and valgrind</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC72">4.4 Debugging compiled code</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">     
</td></tr>
</tbody></table>


<hr size="6">
<a name="Browsing"></a>
<a name="SEC67"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC66" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC68" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC66" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 4.1 Browsing </h2>

<p>Most of the R-level debugging facilities are based around the built-in
browser.  This can be used directly by inserting a call to
<code>browser()</code> into the code of a function (for example, using
<code>fix(my_function)</code> ).  When code execution reaches that point in
the function, control returns to the @R{} console with a special prompt.
For example
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">&gt; fix(summary.data.frame) ## insert browser() call after for() loop
&gt; summary(women)
Called from: summary.data.frame(women)
Browse[1]&gt; ls()
 [1] "digits" "i"      "lbs"    "lw"     "maxsum" "nm"     "nr"     "nv"
 [9] "object" "sms"    "z"
Browse[1]&gt; maxsum
[1] 7
Browse[1]&gt;
     height         weight
 Min.   :58.0   Min.   :115.0
 1st Qu.:61.5   1st Qu.:124.5
 Median :65.0   Median :135.0
 Mean   :65.0   Mean   :136.7
 3rd Qu.:68.5   3rd Qu.:148.0
 Max.   :72.0   Max.   :164.0
&gt; rm(summary.data.frame)
</pre></td></tr></tbody></table>

<p>At the browser prompt one can enter any @R{} expression, so for example
<code>ls()</code> lists the objects in the current frame, and entering the
name of an object will<a name="DOCF20" href="#FOOT20">(20)</a> print it.  The following commands are
also accepted
</p>
<ul>
<li> <code>n</code>

<p>Enter `step-through' mode.  In this mode, hitting return executes the
next line of code (more precisely one line and any continuation lines).
Typing <code>c</code> will continue to the end of the current context, e.g.
to the end of the current loop or function.
</p>
</li><li> <code>c</code>

<p>In normal mode, this quits the browser and continues execution, and just
return works in the same way.  <code>cont</code> is a synonym.
</p>
</li><li> <code>where</code>

<p>This prints the call stack.  For example
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">&gt; summary(women)
Called from: summary.data.frame(women)
Browse[1]&gt; where
where 1: summary.data.frame(women)
where 2: summary(women)

Browse[1]&gt;
</pre></td></tr></tbody></table>
</li><li> <code>Q</code>

<p>Quit both the browser and the current expression, and return to the
top-level prompt.
</p></li></ul>

<p>Errors in code executed at the browser prompt will normally return
control to the browser prompt.  Objects can be altered by assignment,
and will keep their changed values when the browser is exited.  If
really necessary, objects can be assigned to the workspace from the
browser prompt (by using <code>&lt;&lt;-</code> if the name is not already in
scope).
</p>
<hr size="6">
<a name="Debugging-R-code"></a>
<a name="SEC68"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC67" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC69" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC66" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 4.2 Debugging R code </h2>

<p>Suppose your @R{} program gives an error message.  The first thing to
find out is what @R{} was doing at the time of the error, and the most
useful tool is <code>traceback()</code>.  We suggest that this is run whenever
the cause of the error is not immediately obvious.  Daily, errors are
reported to the @R{} mailing lists as being in some package when
<code>traceback()</code> would show that the error was being reported by some
other package or base @R{}.  Here is an example from the regression
suite.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">&gt; success &lt;- c(13,12,11,14,14,11,13,11,12)
&gt; failure &lt;- c(0,0,0,0,0,0,0,2,2)
&gt; resp &lt;- cbind(success, failure)
&gt; predictor &lt;- c(0, 5^(0:7))
&gt; glm(resp ~ 0+predictor, family = binomial(link="log"))
Error: no valid set of coefficients has been found: please supply starting values
&gt; traceback()
3: stop("no valid set of coefficients has been found: please supply 
         starting values", call. = FALSE)
2: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart,
       mustart = mustart, offset = offset, family = family, control = control,
       intercept = attr(mt, "intercept") &gt; 0)
1: glm(resp ~ 0 + predictor, family = binomial(link ="log"))
</pre></td></tr></tbody></table>

<p>The calls to the active frames are given in reverse order (starting with
the innermost).  So we see the error message comes from an explicit
check in <code>glm.fit</code>.  (<code>traceback()</code> shows you all the lines of
the function calls, which can be limited by setting <code>option</code>
<samp>`"deparse.max.lines"'</samp>.)
</p>
<p>Sometimes the traceback will indicate that the error was detected inside
compiled code, for example (from <code>?nls</code>)
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">Error in nls(y ~ a + b * x, start = list(a = 0.12345, b = 0.54321), trace = TRUE) :
        step factor 0.000488281 reduced below 'minFactor' of 0.000976563
&gt;  traceback()
2: .Call(R_nls_iter, m, ctrl, trace)
1: nls(y ~ a + b * x, start = list(a = 0.12345, b = 0.54321), trace = TRUE)
</pre></td></tr></tbody></table>

<p>This will be the case if the innermost call is to <code>.C</code>,
<code>.Fortran</code>, <code>.Call</code>, <code>.External</code> or <code>.Internal</code>, but
as it is also possible for such code to evaluate @R{} expressions, this
need not be the innermost call, as in
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">&gt; traceback()
9: gm(a, b, x)
8: .Call(R_numeric_deriv, expr, theta, rho, dir)
7: numericDeriv(form[[3]], names(ind), env)
6: getRHS()
5: assign("rhs", getRHS(), envir = thisEnv)
4: assign("resid", .swts * (lhs - assign("rhs", getRHS(), envir = thisEnv)),
       envir = thisEnv)
3: function (newPars)
   {
       setPars(newPars)
       assign("resid", .swts * (lhs - assign("rhs", getRHS(), envir = thisEnv)),
           envir = thisEnv)
       assign("dev", sum(resid^2), envir = thisEnv)
       assign("QR", qr(.swts * attr(rhs, "gradient")), envir = thisEnv)
       return(QR$rank &lt; min(dim(QR$qr)))
   }(c(-0.00760232418963883, 1.00119632515036))
2: .Call(R_nls_iter, m, ctrl, trace)
1: nls(yeps ~ gm(a, b, x), start = list(a = 0.12345, b = 0.54321))
</pre></td></tr></tbody></table>
<p>Occasionally <code>traceback()</code> does not help, and this can be the case
if S4 method dispatch is involved.  Consider the following example
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">&gt; xyd &lt;- new("xyloc", x=runif(20), y=runif(20))
Error in as.environment(pkg) : no item called "package:S4nswv" 
on the search list
Error in initialize(value, ...) : S language method selection got 
an error when called from internal dispatch for function 'initialize'
&gt; traceback()
2: initialize(value, ...)
1: new("xyloc", x = runif(20), y = runif(20))
</pre></td></tr></tbody></table>

<p>which does not help much, as there is no call to <code>as.environment</code>
in <code>initialize</code> (and the note "called from internal dispatch"
tells us so).  In this case we searched the @R{} sources for the quoted
call, which occurred in only one place,
<code>methods:::.asEnvironmentPackage</code>.  So now we knew where the
error was occurring.  (This was an unusually opaque example.)
</p>
<p>The error message
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">evaluation nested too deeply: infinite recursion / options(expressions=)?
</pre></td></tr></tbody></table>

<p>can be hard to handle with the default value (5000).  Unless you know
that there actually is deep recursion going on, it can help to set
something like
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">options(expressions=500)
</pre></td></tr></tbody></table>
<p>and re-run the example showing the error.
</p>
<p>Sometimes there is warning that clearly is the precursor to some later
error, but it is not obvious where it is coming from.  Setting
<code>options(warn = 2)</code> (which turns warnings into errors) can help here.
</p>
<p>Once we have located the error, we have some choices.  One way to proceed
is to find out more about what was happening at the time of the crash by
looking a <em>post-mortem</em> dump.  To do so, set
<a name="IDX90"></a>
<code>options(error=dump.frames)</code> and run the code again.  Then invoke
<code>debugger()</code> and explore the dump.  Continuing our example:
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">&gt; options(error = dump.frames)
&gt; glm(resp ~ 0 + predictor, family = binomial(link ="log"))
Error: no valid set of coefficients has been found: please supply starting values
</pre></td></tr></tbody></table>

<p>which is the same as before, but an object called <code>last.dump</code> has
appeared in the workspace.  (Such objects can be large, so remove it
when it is no longer needed.)  We can examine this at a later time by
calling the function <code>debugger</code>.
<a name="IDX91"></a>
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">&gt; debugger()
Message:  Error: no valid set of coefficients has been found: please supply starting values
Available environments had calls:
1: glm(resp ~ 0 + predictor, family = binomial(link = "log"))
2: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart, mus
3: stop("no valid set of coefficients has been found: please supply starting values
Enter an environment number, or 0 to exit  Selection:
</pre></td></tr></tbody></table>

<p>which gives the same sequence of calls as <code>traceback</code>, but in
outer-first order and with only the first line of the call, truncated to
the current width.  However, we can now examine in more detail what was
happening at the time of the error.  Selecting an environment opens the
browser in that frame.  So we select the function call which spawned the
error message, and explore some of the variables (and execute two
function calls).
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">Enter an environment number, or 0 to exit  Selection: 2
Browsing in the environment with call:
   glm.fit(x = X, y = Y, weights = weights, start = start, etas
Called from: debugger.look(ind)
Browse[1]&gt; ls()
 [1] "aic"        "boundary"   "coefold"    "control"    "conv"
 [6] "dev"        "dev.resids" "devold"     "EMPTY"      "eta"
[11] "etastart"   "family"     "fit"        "good"       "intercept"
[16] "iter"       "linkinv"    "mu"         "mu.eta"     "mu.eta.val"
[21] "mustart"    "n"          "ngoodobs"   "nobs"       "nvars"
[26] "offset"     "start"      "valideta"   "validmu"    "variance"
[31] "varmu"      "w"          "weights"    "x"          "xnames"
[36] "y"          "ynames"     "z"
Browse[1]&gt; eta
            1             2             3             4             5
 0.000000e+00 -2.235357e-06 -1.117679e-05 -5.588393e-05 -2.794197e-04
            6             7             8             9
-1.397098e-03 -6.985492e-03 -3.492746e-02 -1.746373e-01
Browse[1]&gt; valideta(eta)
[1] TRUE
Browse[1]&gt; mu
        1         2         3         4         5         6         7         8
1.0000000 0.9999978 0.9999888 0.9999441 0.9997206 0.9986039 0.9930389 0.9656755
        9
0.8397616
Browse[1]&gt; validmu(mu)
[1] FALSE
Browse[1]&gt; c
Available environments had calls:
1: glm(resp ~ 0 + predictor, family = binomial(link = "log"))
2: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart
3: stop("no valid set of coefficients has been found: please supply starting v

Enter an environment number, or 0 to exit  Selection: 0
&gt; rm(last.dump)
</pre></td></tr></tbody></table>
<p>Because <code>last.dump</code> can be looked at later or even in another @R{}
session, post-mortem debugging is possible even for batch usage of @R{}.
We do need to arrange for the dump to be saved: this can be done either
using the command-line flag <samp>`--save'</samp> to save the workspace at the
end of the run, or via a setting such as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">&gt; options(error = quote({dump.frames(to.file=TRUE); q()}))
</pre></td></tr></tbody></table>

<p>See the help on <code>dump.frames</code> for further options and a worked
example.
</p>
<a name="IDX92"></a>
<p>An alternative error action is to use the function <code>recover()</code>:
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">&gt; options(error = recover)
&gt; glm(resp ~ 0 + predictor, family = binomial(link = "log"))
Error: no valid set of coefficients has been found: please supply starting values

Enter a frame number, or 0 to exit

1: glm(resp ~ 0 + predictor, family = binomial(link = "log"))
2: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart

Selection:
</pre></td></tr></tbody></table>

<p>which is very similar to <code>dump.frames</code>.  However, we can examine
the state of the program directly, without dumping and re-loading the
dump.  As its help page says, <code>recover</code> can be routinely used as
the error action in place of <code>dump.calls</code> and <code>dump.frames</code>,
since it behaves like <code>dump.frames</code> in non-interactive use.
</p>

<a name="IDX93"></a>
<p>Post-mortem debugging is good for finding out exactly what went wrong,
but not necessarily why.  An alternative approach is to take a closer
look at what was happening just before the error, and a good way to do
that is to use <code>debug</code>.  This inserts a call to the browser
at the beginning of the function, starting in step-through mode.  So in
our example we could use
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">&gt; debug(glm.fit)
&gt; glm(resp ~ 0 + predictor, family = binomial(link ="log"))
debugging in: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart,
    mustart = mustart, offset = offset, family = family, control = control,
    intercept = attr(mt, "intercept") &gt; 0)
debug: {
## lists the whole function
Browse[1]&gt;
debug: x &lt;- as.matrix(x)
...
Browse[1]&gt; start
[1] -2.235357e-06
debug: eta &lt;- drop(x %*% start)
Browse[1]&gt; eta
            1             2             3             4             5
 0.000000e+00 -2.235357e-06 -1.117679e-05 -5.588393e-05 -2.794197e-04
            6             7             8             9
-1.397098e-03 -6.985492e-03 -3.492746e-02 -1.746373e-01
Browse[1]&gt;
debug: mu &lt;- linkinv(eta &lt;- eta + offset)
Browse[1]&gt; mu
        1         2         3         4         5         6         7         8
1.0000000 0.9999978 0.9999888 0.9999441 0.9997206 0.9986039 0.9930389 0.9656755
        9
0.8397616
</pre></td></tr></tbody></table>

<p>(The prompt <code>Browse[1]&gt;</code> indicates that this is the first level of
browsing: it is possible to step into another function that is itself
being debugged or contains a call to <code>browser()</code>.)
</p>
<p><code>debug</code> can be used for hidden functions and S3 methods by
e.g. <code>debug(stats:::predict.Arima)</code>.  (It cannot be used for S4
methods, but an alternative is given on the help page for <code>debug</code>.)
Sometimes you want to debug a function defined inside another function,
e.g. the function <code>arimafn</code> defined inside <code>arima</code>.  To do so,
set <code>debug</code> on the outer function (here <code>arima</code>) and
step through it until the inner function has been defined.  Then
call <code>debug</code> on the inner function (and use <code>c</code> to get out of
step-through mode in the outer function).
</p>
<a name="IDX94"></a>
<p>To remove debugging of a function, call <code>undebug</code> with the argument
previously given to <code>debug</code>; debugging otherwise lasts for the rest
of the @R{} session (or until the function is edited or otherwise
replaced).
</p>
<a name="IDX95"></a>
<p><code>trace</code> can be used to temporarily insert debugging code into a
function, for example to insert a call to <code>browser()</code> just before
the point of the error.  To return to our running example
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">## first get a numbered listing of the expressions of the function
&gt; page(as.list(body(glm.fit)), method="print")
&gt; trace(glm.fit, browser, at=22)
Tracing function "glm.fit" in package "stats"
[1] "glm.fit"
&gt; glm(resp ~ 0 + predictor, family = binomial(link ="log"))
Tracing glm.fit(x = X, y = Y, weights = weights, start = start, 
   etastart = etastart,  .... step 22
Called from: eval(expr, envir, enclos)
Browse[1]&gt; n
## and single-step from here.
&gt; untrace(glm.fit)
</pre></td></tr></tbody></table>
<p>For your own functions, it may be as easy to use <code>fix</code> to insert
temporary code, but <code>trace</code> can help with functions in a name space
(as can <code>fixInNamespace</code>).  Alternatively, use
<code>trace(,edit=TRUE)</code> to insert code visually.
</p>

<hr size="6">
<a name="Using-gctorture-and-valgrind"></a>
<a name="SEC69"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC68" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC70" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC66" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 4.3 Using gctorture and valgrind </h2>

<p>Errors in memory allocation and reading/writing outside arrays are very
common causes of crashes (e.g., segfaults) on some machines.  Often
the crash appears long after the invalid memory access: in particular
damage to the structures which @R{} itself has allocated may only become
apparent at the next garbage collection (or even at later garbage
collections after objects have been deleted).
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC70">4.3.1 Using gctorture</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">             
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC71">4.3.2 Using valgrind</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">              
</td></tr>
</tbody></table>

<hr size="6">
<a name="Using-gctorture"></a>
<a name="SEC70"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC69" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC71" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC66" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC69" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 4.3.1 Using gctorture </h3>

<p>We can help to detect memory problems earlier by running garbage
collection as often as possible.  This is achieved by
<code>gctorture(TRUE)</code>, which as described on its help page
</p>
<blockquote><p>Provokes garbage collection on (nearly) every memory allocation.
Intended to ferret out memory protection bugs.  Also makes @R{} run
<em>very</em> slowly, unfortunately.
</p></blockquote>


<p>The reference to `memory protection' is to missing C-level calls to
<code>PROTECT</code>/<code>UNPROTECT</code> (see section <a href="#SEC87">Handling the effects of garbage collection</a>) which if
missing allow @R{} objects to be garbage-collected when they are still
in use.  But it can also help with other memory-related errors.
</p>
<p>Normally running under <code>gctorture(TRUE)</code> will just produce a crash
earlier in the @R{} program, hopefully close to the actual cause. See
the next section for how to decipher such crashes.
</p>
<p>It is possible to run all the examples, tests and vignettes covered by
<code>R CMD check</code> under <code>gctorture(TRUE)</code> by using the option
<samp>`--use-gct'</samp>. 
</p>
<hr size="6">
<a name="Using-valgrind"></a>
<a name="SEC71"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC70" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC72" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC66" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC69" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 4.3.2 Using valgrind </h3>

<p>If you have access to Linux on an @cputype{ix86}, @cputype{x86_64} or
@cputype{ppc32} platform you can use <code>valgrind</code>
(<a href="http://www.valgrind.org/">http://www.valgrind.org/</a>, pronounced to rhyme with `tinned') to
check for possible problems.  To run some examples under <code>valgrind</code>
use something like
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">R -d valgrind --vanilla &lt; mypkg-Ex.R
R -d "valgrind --tool=memcheck --leak-check=full" --vanilla &lt; mypkg-Ex.R
</pre></td></tr></tbody></table>

<p>where <tt>`mypkg-Ex.R'</tt> is a set of examples, e.g. the file created in
<tt>`mypkg.Rcheck'</tt> by <code>R CMD check</code>.  Occasionally this reports
memory reads of `uninitialised values' that are the result of compiler
optimization, so can be worth checking under an unoptimized compile.  We
know there will be some small memory leaks from <code>readline</code> and @R{}
itself -- these are memory areas that are in use right up to the end of
the @R{} session.  Expect this to run around 20x slower than without
<code>valgrind</code>, and in some cases even slower than that.  Current
versions<a name="DOCF21" href="#FOOT21">(21)</a> of <code>valgrind</code> are not happy with many optimized BLASes
that use cpu-specific instructions (3D now, SSE, SSE2, SSE3 and similar)
so you may need to build a version of @R{} specifically to use with
<code>valgrind</code>.
</p>
<p>On platforms supported by <code>valgrind</code> you can build a version of
@R{} with extra instrumentation to help <code>valgrind</code> detect errors in
the use of memory allocated from the @R{} heap.  The configure option is
<samp>`--with-valgrind-instrumentation=<var>level</var>'</samp>, where <var>level</var>
is 0, 1, or 2.  Level 0 is the default and does not add any anything.
Level 1 will detect use of uninitialised memory and has little impact on
speed. Level 2 will detect many other memory use bugs but makes @R{}
much slower when running under <code>valgrind</code>.  Using this in
conjuction with <code>gctorture</code> can be even more effective (and even
slower).
</p>
<p>An example of <code>valgrind</code> output is
</p><table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">==12539== Invalid read of size 4
==12539==    at 0x1CDF6CBE: csc_compTr (Mutils.c:273)
==12539==    by 0x1CE07E1E: tsc_transpose (dtCMatrix.c:25)
==12539==    by 0x80A67A7: do_dotcall (dotcode.c:858)
==12539==    by 0x80CACE2: Rf_eval (eval.c:400)
==12539==    by 0x80CB5AF: R_execClosure (eval.c:658)
==12539==    by 0x80CB98E: R_execMethod (eval.c:760)
==12539==    by 0x1B93DEFA: R_standardGeneric (methods_list_dispatch.c:624)
==12539==    by 0x810262E: do_standardGeneric (objects.c:1012)
==12539==    by 0x80CAD23: Rf_eval (eval.c:403)
==12539==    by 0x80CB2F0: Rf_applyClosure (eval.c:573)
==12539==    by 0x80CADCC: Rf_eval (eval.c:414)
==12539==    by 0x80CAA03: Rf_eval (eval.c:362)
==12539==  Address 0x1C0D2EA8 is 280 bytes inside a block of size 1996 alloc'd
==12539==    at 0x1B9008D1: malloc (vg_replace_malloc.c:149)
==12539==    by 0x80F1B34: GetNewPage (memory.c:610)
==12539==    by 0x80F7515: Rf_allocVector (memory.c:1915)
...
</pre></td></tr></tbody></table>
<p>This example is from an instrumented version of @R{}, while tracking
down a bug in the @pkg{Matrix} package in January, 2006.  The first line
indicates that @R{} has tried to read 4 bytes from a memory address that
it does not have access to. This is followed by a C stack trace showing
where the error occurred. Next is a description of the memory that was
accessed. It is inside a block allocated by <code>malloc</code>, called from
<code>GetNewPage</code>, that is, in the internal @R{} heap.  Since this
memory all belongs to @R{}, <code>valgrind</code> would not (and did not)
detect the problem in an uninstrumented build of @R{}.  In this example
the stack trace was enough to isolate and fix the bug, which was in
<code>tsc_transpose</code>, and in this example running under
<code>gctorture()</code> did not provide any additional information.  When the
stack trace is not sufficiently informative the option
<samp>`--db-attach=yes'</samp> to <code>valgrind</code> may be helpful.  This starts
a post-mortem debugger (by default <code>gdb</code>) so that variables in the
C code can be inspected (see section <a href="#SEC74">Inspecting R objects when debugging</a>).
</p>

<p>It is possible to run all the examples, tests and vignettes covered by
<code>R CMD check</code> under <code>valgrind</code> by using the option
<samp>`--use-valgrind'</samp>.  If you do this you will need to select the
<code>valgrind</code> options some other way, for example by having a
<tt>`~/.valgrindrc'</tt> file containing
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">--tool=memcheck
--memcheck:leak-check=full
</pre></td></tr></tbody></table>

<p>or setting the environment variable <code>VALGRIND_OPTS</code>.
</p>
<hr size="6">
<a name="Debugging-compiled-code"></a>
<a name="SEC72"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC71" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC73" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC66" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC66" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 4.4 Debugging compiled code </h2>


<p>Sooner or later programmers will be faced with the need to debug
compiled code loaded into @R{}.   This section is geared to platforms
using <code>gdb</code> with code compiled by <code>gcc</code>, but similar things
are possible with front-ends to <code>gdb</code> such as <code>ddd</code> and
<code>insight</code>, and other debuggers such as Sun's <code>dbx</code>.
</p>
<p>Consider first `crashes', that is when @R{} terminated unexpectedly with
an illegal memory access (a `segfault' or `bus error'), illegal
instruction or similar.  Unix-alike versions of @R{} use a signal
handler which aims to give some basic information.  For example
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example"> *** caught segfault ***
address 0x20000028, cause 'memory not mapped'

Traceback:
 1: .identC(class1[[1]], class2)
 2: possibleExtends(class(sloti), classi, ClassDef2 = getClassDef(classi,
where = where))
 3: validObject(t(cu))
 4: stopifnot(validObject(cu &lt;- as(tu, "dtCMatrix")), validObject(t(cu)),
validObject(t(tu)))

Possible actions:
1: abort (with core dump)
2: normal R exit
3: exit R without saving workspace
4: exit R saving workspace
Selection: 3
</pre></td></tr></tbody></table>

<p>Since the @R{} process may be damaged, the only really safe option is
the first.
</p>
<p>Another cause of a `crash' is to overrun the C stack.  @R{} tries to
track that in its own code, but it may happen in third-party compiled
code.  For modern POSIX-compliant OSes we can safely catch that and
return to the top-level prompt.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">&gt; .C("aaa")
Error: segfault from C stack overflow
&gt;
</pre></td></tr></tbody></table>

<p>However, C stack overflows are fatal under Windows and normally defeat
attempts at debugging on that platform.
</p>
<p>If you have a crash which gives a core dump you can use something like
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">gdb /path/to/R/bin/exec/R core.12345
</pre></td></tr></tbody></table>

<p>to examine the core dump.  If core dumps are disabled or to catch errors
that do not generate a dump one can run @R{} directly under a debugger
by for example
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">$ R -d gdb --vanilla
...
gdb&gt; run
</pre></td></tr></tbody></table>

<p>at which point @R{} will run normally, and hopefully the debugger will
catch the error and return to its prompt.  This can also be used to
catch infinite loops or interrupt very long-running code.  For a simple
example
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">&gt; for(i in 1:1e7) x &lt;- rnorm(100)
[hit Ctrl-C]
Program received signal SIGINT, Interrupt.
0x00397682 in _int_free () from /lib/tls/libc.so.6
(gdb) where
#0  0x00397682 in _int_free () from /lib/tls/libc.so.6
#1  0x00397eba in free () from /lib/tls/libc.so.6
#2  0xb7cf2551 in R_gc_internal (size_needed=313)
    at /users/ripley/R/svn/R-devel/src/main/memory.c:743
#3  0xb7cf3617 in Rf_allocVector (type=13, length=626)
    at /users/ripley/R/svn/R-devel/src/main/memory.c:1906
#4  0xb7c3f6d3 in PutRNGstate ()
    at /users/ripley/R/svn/R-devel/src/main/RNG.c:351
#5  0xb7d6c0a5 in do_random2 (call=0x94bf7d4, op=0x92580e8, args=0x9698f98,
    rho=0x9698f28) at /users/ripley/R/svn/R-devel/src/main/random.c:183
...
</pre></td></tr></tbody></table>
<p>Some "tricks" are worth knowing.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC73">4.4.1 Finding entry points in dynamically loaded code</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">        
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC74">4.4.2 Inspecting R objects when debugging</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">        
</td></tr>
</tbody></table>

<hr size="6">
<a name="Finding-entry-points"></a>
<a name="SEC73"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC72" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC74" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC66" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC72" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 4.4.1 Finding entry points in dynamically loaded code </h3>

<p>Under most compilation environments, compiled code dynamically loaded
into @R{} cannot have breakpoints set within it until it is loaded.  To
use a symbolic debugger on such dynamically loaded code under
Unix-alikes use
</p>
<ul>
<li>
Call the debugger on the @R{} executable, for example by <kbd>R -d gdb</kbd>.
</li><li>
Start @R{}.
</li><li>
At the @R{} prompt, use <code>dyn.load</code> or <code>library</code> to load your
shared object.
</li><li>
Send an interrupt signal.  This will put you back to the debugger
prompt.
</li><li>
Set the breakpoints in your code.
</li><li>
Continue execution of @R{} by typing <kbd>signal 0<kbd>RET</kbd></kbd>.
</li></ul>

<p>Under Windows signals may not be able to be used, and if so the procedure is
more complicated.  See the rw-FAQ and
<a href="http://www.stats.uwo.ca/faculty/murdoch/software/debuggingR/gdb.shtml"><code>www.stats.uwo.ca/faculty/murdoch/software/debuggingR/gdb.shtml</code></a>.
</p>

<hr size="6">
<a name="Inspecting-R-objects"></a>
<a name="SEC74"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC73" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC66" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC72" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 4.4.2 Inspecting R objects when debugging </h3>

<p>The key to inspecting @R{} objects from compiled code is the function
<code>PrintValue(SEXP <var>s</var>)</code> which uses the normal @R{} printing
mechanisms to print the @R{} object pointed to by <var>s</var>, or the safer
version <code>R_PV(SEXP <var>s</var>)</code> which will only print `objects'.
</p>
<p>One way to make use of <code>PrintValue</code> is to insert suitable calls
into the code to be debugged.
</p>
<p>Another way is to call <code>R_PV</code> from the symbolic debugger.
(<code>PrintValue</code> is hidden as <code>Rf_PrintValue</code>.)  For example,
from <code>gdb</code> we can use
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">(gdb) p R_PV(ab)
</pre></td></tr></tbody></table>

<p>using the object <code>ab</code> from the convolution example, if we have
placed a suitable breakpoint in the convolution C code.
</p>
<p>To examine an arbitrary @R{} object we need to work a little harder.
For example, let
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">R&gt; DF &lt;- data.frame(a = 1:3, b = 4:6)
</pre></td></tr></tbody></table>

<p>By setting a breakpoint at <code>do_get</code> and typing <kbd>get("DF")</kbd> at
the @R{} prompt, one can find out the address in memory of <code>DF</code>, for
example
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">Value returned is $1 = (SEXPREC *) 0x40583e1c
(gdb) p *$1
$2 = {
  sxpinfo = {type = 19, obj = 1, named = 1, gp = 0,
    mark = 0, debug = 0, trace = 0, = 0},
  attrib = 0x40583e80,
  u = {
    vecsxp = {
      length = 2,
      type = {c = 0x40634700 "0&gt;X@D&gt;X@0&gt;X@", i = 0x40634700,
        f = 0x40634700, z = 0x40634700, s = 0x40634700},
      truelength = 1075851272,
    },
    primsxp = {offset = 2},
    symsxp = {pname = 0x2, value = 0x40634700, internal = 0x40203008},
    listsxp = {carval = 0x2, cdrval = 0x40634700, tagval = 0x40203008},
    envsxp = {frame = 0x2, enclos = 0x40634700},
    closxp = {formals = 0x2, body = 0x40634700, env = 0x40203008},
    promsxp = {value = 0x2, expr = 0x40634700, env = 0x40203008}
  }
}
</pre></td></tr></tbody></table>

<p>(Debugger output reformatted for better legibility).
</p>
<p>Using <code>R_PV()</code> one can "inspect" the values of the various
elements of the SEXP, for example,
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">(gdb) p R_PV($1-&gt;attrib)
$names
[1] "a" "b"

$row.names
[1] "1" "2" "3"

$class
[1] "data.frame"

$3 = void
</pre></td></tr></tbody></table>
<p>To find out where exactly the corresponding information is stored, one
needs to go "deeper":
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">(gdb) set $a = $1-&gt;attrib
(gdb) p $a-&gt;u.listsxp.tagval-&gt;u.symsxp.pname-&gt;u.vecsxp.type.c
$4 = 0x405d40e8 "names"
(gdb) p $a-&gt;u.listsxp.carval-&gt;u.vecsxp.type.s[1]-&gt;u.vecsxp.type.c
$5 = 0x40634378 "b"
(gdb) p $1-&gt;u.vecsxp.type.s[0]-&gt;u.vecsxp.type.i[0]
$6 = 1
(gdb) p $1-&gt;u.vecsxp.type.s[1]-&gt;u.vecsxp.type.i[1]
$7 = 5
</pre></td></tr></tbody></table>

<hr size="6">
<a name="System-and-foreign-language-interfaces"></a>
<a name="SEC75"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC74" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC76" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC66" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h1 class="chapter"> 5. System and foreign language interfaces </h1>

<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC76">5.1 Operating system access</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">     
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC77">5.2 Interface functions <code>.C</code> and <code>.Fortran</code></a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC78">5.3 <code>dyn.load</code> and <code>dyn.unload</code></a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">     
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC79">5.4 Registering native routines</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC80">5.5 Creating shared objects</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">     
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC81">5.6 Interfacing C++ code</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">        
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC82">5.7 Fortran I/O</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                 
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC83">5.8 Linking to other packages</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">   
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC86">5.9 Handling R objects in C</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">     
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC97">5.10 Interface functions <code>.Call</code> and <code>.External</code></a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC101">5.11 Evaluating R expressions from C</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC104">5.12 Parsing R code from C</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">       
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC105">5.13 External pointers and weak references</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC106">5.14 Vector accessor functions</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">   
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC107">5.15 Character encoding issues</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">   
</td></tr>
</tbody></table>

<hr size="6">
<a name="Operating-system-access"></a>
<a name="SEC76"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC75" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC77" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 5.1 Operating system access </h2>

<p>Access to operating system functions is via the @R{} function
<code>system</code>.
<a name="IDX96"></a>
The details will differ by platform (see the on-line help), and about
all that can safely be assumed is that the first argument will be a
string <code>command</code> that will be passed for execution (not necessarily
by a shell) and the second argument will be <code>internal</code> which if
true will collect the output of the command into an @R{} character
vector.
</p>
<p>The function <code>system.time</code>
<a name="IDX97"></a>
is available for timing (although the information available may be
limited on non-Unix-like platforms: these days only on the obsolete
Windows 9x/ME).
</p>
<hr size="6">
<a name="Interface-functions-_002eC-and-_002eFortran"></a>
<a name="SEC77"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC76" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC78" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 5.2 Interface functions <code>.C</code> and <code>.Fortran</code> </h2>


<p>These two functions provide a standard interface to compiled code that
has been linked into @R{}, either at build time or via <code>dyn.load</code>
(see section <a href="#SEC78"><code>dyn.load</code> and <code>dyn.unload</code></a>).  They are primarily intended for
compiled C and FORTRAN 77 code respectively, but the <code>.C</code> function can
be used with other languages which can generate C interfaces, for
example C++ (see section <a href="#SEC81">Interfacing C++ code</a>).
</p>
<p>The first argument to each function is a character string given the
symbol name as known to C or FORTRAN, that is the function or subroutine
name.  (That the symbol is loaded can be tested by, for example,
<code>is.loaded("cg")</code>: it is no longer necessary nor correct to use
<code>symbol.For</code>, which is defunct as from @R{} 2.5.0.)  (Note that the
underscore is not a valid character in a FORTRAN 77 subprogram name, and
on versions of @R{} prior to 2.4.0 <code>.Fortran</code> may not correctly
translate names containing underscores.)
</p>
<p>There can be up to 65 further arguments giving @R{} objects to be passed
to compiled code.  Normally these are copied before being passed in, and
copied again to an @R{} list object when the compiled code returns.  If
the arguments are given names, these are used as names for the
components in the returned list object (but not passed to the compiled
code).
</p>
<p>The following table gives the mapping between the modes of @R{} vectors
and the types of arguments to a C function or FORTRAN subroutine.
</p>
<blockquote><table>
<thead><tr><th><p> @R{} storage mode </p></th><th><p>  C type  </p></th><th><p>   FORTRAN type
</p></th></tr></thead>
<tbody><tr><td><p> <code>logical</code>   </p></td><td><p> <code>int *</code>     </p></td><td><p> <code>INTEGER</code>
</p></td></tr>
<tr><td><p> <code>integer</code>   </p></td><td><p> <code>int *</code>     </p></td><td><p> <code>INTEGER</code>
</p></td></tr>
<tr><td><p> <code>double</code>    </p></td><td><p> <code>double *</code>  </p></td><td><p> <code>DOUBLE PRECISION</code>
</p></td></tr>
<tr><td><p> <code>complex</code>   </p></td><td><p> <code>Rcomplex *</code> </p></td><td><p> <code>DOUBLE COMPLEX</code>
</p></td></tr>
<tr><td><p> <code>character</code> </p></td><td><p> <code>char **</code>   </p></td><td><p> <code>CHARACTER*255</code>
</p></td></tr>
<tr><td><p> <code>raw</code>       </p></td><td><p> <code>unsigned char *</code>    </p></td><td><p> none
</p></td></tr>
</tbody></table>
</blockquote>

<p>Do please note the first two.  On the 64-bit Unix/Linux platforms,
<code>long</code> is 64-bit whereas <code>int</code> and <code>INTEGER</code> are 32-bit.
Code ported from S-PLUS (which uses <code>long *</code> for <code>logical</code> and
<code>integer</code>) will not work on all 64-bit platforms (although it may
appear to work on some).  Note also that if your compiled code is a
mixture of C functions and FORTRAN subprograms the argument types must
match as given in the table above.
</p>
<p>C type <code>Rcomplex</code> is a structure with <code>double</code> members
<code>r</code> and <code>i</code> defined in the header file <tt>`R_ext/Complex.h'</tt>
included by <tt>`R.h'</tt>.  (On most platforms which have it, this is
compatible withe C99 <code>double complex</code> type.)  Only a single
character string can be passed to or from FORTRAN, and the success of
this is compiler-dependent.  Other @R{} objects can be passed to
<code>.C</code>, but it is better to use one of the other interfaces.  An
exception is passing an @R{} function for use with <code>call_R</code>,
when the object can be handled as <code>void *</code> en route to
<code>call_R</code>, but even there <code>.Call</code> is to be preferred.
Similarly, passing an @R{} list as an argument to a C routine should be
done using the <code>.Call</code> interface.  If one does use the <code>.C</code>
function to pass a list as an argument, it is visible to the routine as
an array in C of <code>SEXP</code> types (i.e., <code>SEXP *</code>).  The elements
of the array correspond directly to the elements of the @R{} list.
However, this array must be treated as read-only and one must not assign
values to its elements within the C routine -- doing so bypasses R's
memory management facilities and will corrupt the object and the R
session.
</p>
<p>It is possible to pass numeric vectors of storage mode <code>double</code> to
C as <code>float *</code> or to FORTRAN as <code>REAL</code> by setting the
attribute <code>Csingle</code>, most conveniently by using the @R{} functions
<code>as.single</code>, <code>single</code> or <code>mode</code>.  This is intended only
to be used to aid interfacing to existing C or FORTRAN code.
</p>
<p>Unless formal argument <code>NAOK</code> is true, all the other arguments are
checked for missing values <code>NA</code> and for the <acronym>IEEE</acronym> special
values <code>NaN</code>, <code>Inf</code> and <code>-Inf</code>, and the presence of any
of these generates an error.  If it is true, these values are passed
unchecked.
</p>
<p>Argument <code>DUP</code> can be used to suppress copying.  It is dangerous:
see the on-line help for arguments against its use.  It is not possible
to pass numeric vectors as <code>float *</code> or <code>REAL</code> if
<code>DUP=FALSE</code>, and character vectors cannot be used.
</p>
<p>Argument <code>PACKAGE</code> confines the search for the symbol name to a
specific shared object (or use <code>"base"</code> for code compiled into
@R{}).  Its use is highly desirable, as there is no way to avoid two
package writers using the same symbol name, and such name clashes are
normally sufficient to cause @R{} to crash.  (If it is not present and
the call is from the body of a function defined in a package with a
name space, the shared object loaded by the first (if any)
<code>useDynLib</code> directive will be used.)
</p>
<p>For <code>.C</code> only you can specify an <code>ENCODING</code> argument: this
requests that (unless <code>DUP = FALSE</code>) character vectors be
re-encoded to the requested encoding before being passed in, and
re-encoded from the requested encoding when passed back.  Note that
encoding names are not standardized, and not all @R{} builds support
re-encoding. (The argument is ignored with a warning if re-encoding is
not supported at all: @R{} code can test for this <em>via</em>
<code>capabilities("iconv")</code>.)  But this can be useful to allow code to
work in a UTF-8 locale by specifying <code>ENCODING = "latin1"</code>.
</p>
<p>Note that the compiled code should not return anything except through
its arguments: C functions should be of type <code>void</code> and FORTRAN
subprograms should be subroutines.
</p>
<p>To fix ideas, let us consider a very simple example which convolves two
finite sequences. (This is hard to do fast in interpreted @R{} code, but
easy in C code.)  We could do this using <code>.C</code> by
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void convolve(double *a, int *na, double *b, int *nb, double *ab)
{
  int i, j, nab = *na + *nb - 1;

  for(i = 0; i &lt; nab; i++)
    ab[i] = 0.0;
  for(i = 0; i &lt; *na; i++)
    for(j = 0; j &lt; *nb; j++)
      ab[i + j] += a[i] * b[j];
}
</pre></td></tr></tbody></table>

<p>called from @R{} by
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">conv &lt;- function(a, b)
  .C("convolve",
     as.double(a),
     as.integer(length(a)),
     as.double(b),
     as.integer(length(b)),
     ab = double(length(a) + length(b) - 1))$ab
</pre></td></tr></tbody></table>
<p>Note that we take care to coerce all the arguments to the correct @R{}
storage mode before calling <code>.C</code>; mistakes in matching the types
can lead to wrong results or hard-to-catch errors.
</p>
<p>Special care is needed in handling <code>character</code> vector arguments in
C (or C++).  Since only <code>DUP = TRUE</code> is allowed, on entry the
contents of the elements are duplicated and assigned to the elements of
a <code>char **</code> array, and on exit the elements of the C array are
copied to create new elements of a character vector.  This means that
the contents of the character strings of the <code>char **</code> array can be
changed, including to <code>\0</code> to shorten the string, but the strings
cannot be lengthened.  It is possible to allocate a new string
<em>via</em> <code>R_alloc</code> and replace an entry in the <code>char **</code>
array by the new string.  However, when character vectors are used other
than in a read-only way, the <code>.Call</code> interface is much to be
preferred.
</p>
<p>Passing character strings to FORTRAN code needs even more care, and
should be avoided where possible.  Only the first element of the
character vector is passed in, as a fixed-length (255) character array.
Up to 255 characters are passed back to a length-one character vector.
How well this works (or even if it works at all) depends on the C and
FORTRAN compilers on each platform.
</p>

<hr size="6">
<a name="dyn_002eload-and-dyn_002eunload"></a>
<a name="SEC78"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC77" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC79" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 5.3 <code>dyn.load</code> and <code>dyn.unload</code> </h2>


<p>Compiled code to be used with @R{} is loaded as a shared object (Unix
and MacOS X, see section <a href="#SEC80">Creating shared objects</a> for more information) or
DLL (Windows).
</p>
<p>The shared object/DLL is loaded by <code>dyn.load</code> and unloaded by
<code>dyn.unload</code>.  Unloading is not normally necessary, but it is
needed to allow the DLL to be re-built on some platforms, including
Windows.
</p>
<p>The first argument to both functions is a character string giving the
path to the object.  Programmers should not assume a specific file
extension for the object/DLL (such as <tt>`.so'</tt>) but use a construction
like
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">file.path(path1, path2, paste("mylib", .Platform$dynlib.ext, sep=""))
</pre></td></tr></tbody></table>

<p>for platform independence.  On Unix-alike systems the path supplied to
<code>dyn.load</code> can be an absolute path, one relative to the current
directory or, if it starts with <samp>`~'</samp>, relative to the user's home
directory.
</p>
<p>Loading is most often done via a call to <code>library.dynam</code>
<a name="IDX98"></a>
in the <code>.First.lib</code> function of a package.  This has the form
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">library.dynam("libname", package, lib.loc)
</pre></td></tr></tbody></table>

<p>where <code>libname</code> is the object/DLL name <em>with the extension
omitted</em>.  Note that the first argument, <code>chname</code>, should
<strong>not</strong> be <code>package</code> since this will not work if the package
is installed under another name (as it will be with a versioned install).
</p>
<p>Under some Unix-alike systems there is a choice of how the symbols are
resolved when the object is loaded, governed by the arguments
<code>local</code> and <code>now</code>.  Only use these if really necessary: in
particular using <code>now=FALSE</code> and then calling an unresolved symbol
will terminate @R{} unceremoniously.
</p>
<p>@R{} provides a way of executing some code automatically when a object/DLL
is either loaded or unloaded.  This can be used, for example, to
register native routines with @R{}'s dynamic symbol mechanism, initialize
some data in the native code, or initialize a third party library.  On
loading a DLL, @R{} will look for a routine within that DLL named
<code>R_init_<var>lib</var></code> where <var>lib</var> is the name of the DLL file with
the extension removed.  For example, in the command
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">library.dynam("mylib", package, lib.loc)
</pre></td></tr></tbody></table>

<p>R looks for the symbol named <code>R_init_mylib</code>.  Similarly, when
unloading the object, @R{} looks for a routine named
<code>R_unload_<var>lib</var></code>, e.g., <code>R_unload_mylib</code>.  In either case,
if the routine is present, @R{} will invoke it and pass it a single
argument describing the DLL.  This is a value of type <code>DllInfo</code>
which is defined in the <tt>`Rdynload.h'</tt> file in the <tt>`R_ext'</tt>
directory.
</p>
<p>The following example shows templates for the initialization and
unload routines for the <code>mylib</code> DLL.
</p>
<blockquote><table class="cartouche" border="1"><tbody><tr><td>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;
#include &lt;R_ext/Rdynload.h&gt;

void
R_init_mylib(DllInfo *info)
{
  /* Register routines, allocate resources. */
}

void
R_unload_mylib(DllInfo *info)
{
  /* Release resources. */
}
</pre></td></tr></tbody></table></td></tr></tbody></table>
</blockquote>

<p>If a shared object/DLL is loaded more than once the most recent version
is used.  More generally, if the same symbol name appears in several
libraries, the most recently loaded occurrence is used.  The
<code>PACKAGE</code> argument and registration (see the next section) provide
good ways to avoid any ambiguity in which occurrence is meant.
</p>
<p>On Unix-alikes the paths used to resolve dynamically linked dependent
libraries are fixed (for security reasons) when the process is launched,
so <code>dyn.load</code> will only look for such libraries in the locations
set by the <tt>`R'</tt> shell script (<em>via</em> <tt>`etc/ldpaths'</tt>) and in
the OS-specific defaults.
</p>
<p>Windows allows more control (and less security) over where dependent
DLLs are looked for.  On all versions this includes the <code>PATH</code>
environment variable, but with lowest priority: note that it does not
include the directory from which the DLL was loaded.  On XP and later it
is possible<a name="DOCF22" href="#FOOT22">(22)</a> to add a single path with quite high priority via the
<code>DLLpath</code> argument to <code>dyn.load</code>.  This is (by default) used
by <code>library.dynam</code> to include the package's <tt>`libs'</tt> directory
in the DLL search path.
</p>

<hr size="6">
<a name="Registering-native-routines"></a>
<a name="SEC79"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC78" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC80" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 5.4 Registering native routines </h2>

<p>By `native' routine, we mean an entry point in compiled code.
</p>
<p>In calls to <code>.C</code>, <code>.Call</code>, <code>.Fortran</code> and
<code>.External</code>, @R{} must locate the specified native routine by looking
in the appropriate shared object/DLL.  By default, @R{} uses the operating
system-specific dynamic loader to lookup the symbol.  Alternatively, the
author of the DLL can explicitly register routines with @R{} and use a
single, platform-independent mechanism for finding the routines in the
DLL.  One can use this registration mechanism to provide additional
information about a routine, including the number and type of the
arguments, and also make it available to @R{} programmers under a different
name.  In the future, registration may be used to implement a form of
"secure" or limited native access.
</p>
<a name="IDX99"></a>
<p>To register routines with @R{}, one calls the C routine
<code>R_registerRoutines</code>.  This is typically done when the DLL is first
loaded within the initialization routine <code>R_init_<var>dll name</var></code>
described in <a href="#SEC78"><code>dyn.load</code> and <code>dyn.unload</code></a>.  <code>R_registerRoutines</code>
takes 5 arguments.  The first is the <code>DllInfo</code> object passed by
@R{} to the initialization routine. This is where @R{} stores the
information about the methods.  The remaining 4 arguments are arrays
describing the routines for each of the 4 different interfaces:
<code>.C</code>, <code>.Call</code>, <code>.Fortran</code> and <code>.External</code>.  Each
argument is a <code>NULL</code>-terminated array of the element types given in
the following table:
</p>
<blockquote><table>
<tbody><tr><td><p> <code>.C</code> </p></td><td><p> <code>R_CMethodDef</code>
</p></td></tr>
<tr><td><p> <code>.Call</code> </p></td><td><p> <code>R_CallMethodDef</code>
</p></td></tr>
<tr><td><p> <code>.Fortran</code> </p></td><td><p> <code>R_FortranMethodDef</code>
</p></td></tr>
<tr><td><p> <code>.External</code> </p></td><td><p> <code>R_ExternalMethodDef</code>
</p></td></tr>
</tbody></table>
</blockquote>

<p>Currently, the <code>R_ExternalMethodDef</code> is the same as
<code>R_CallMethodDef</code> type and contains fields for the name of the
routine by which it can be accessed in @R{}, a pointer to the actual native
symbol (i.e., the routine itself), and the number of arguments the
routine expects.  For routines with a variable number of arguments
invoked via the <code>.External</code> interface, one specifies <code>-1</code> for
the number of arguments which tells @R{} not to check the actual number
passed.  For example, if we had a routine named <code>myCall</code> defined as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">SEXP myCall(SEXP a, SEXP b, SEXP c);
</pre></td></tr></tbody></table>

<p>we would describe this as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">R_CallMethodDef callMethods[]  = {
  {"myCall", &amp;myCall, 3},
  {NULL, NULL, 0}
};
</pre></td></tr></tbody></table>

<p>along with any other routines for the <code>.Call</code> interface.
</p>
<p>Routines for use with the <code>.C</code> and <code>.Fortran</code> interfaces are
described with similar data structures, but which have two additional
fields for describing the type and "style" of each argument.  Each of
these can be omitted. However, if specified, each should be an array
with the same number of elements as the number of parameters for the
routine.  The types array should contain the <code>SEXP</code> types
describing the expected type of the argument. (Technically, the elements
of the types array are of type <code>R_NativePrimitiveArgType</code> which is
just an unsigned integer.)  The @R{} types and corresponding type
identifiers are provided in the following table:
</p>
<blockquote><table>
<tbody><tr><td><p> <code>numeric</code> </p></td><td><p> <code>REALSXP</code>
</p></td></tr>
<tr><td><p> <code>integer</code> </p></td><td><p> <code>INTSXP</code>
</p></td></tr>
<tr><td><p> <code>logical</code> </p></td><td><p> <code>LGLSXP</code>
</p></td></tr>
<tr><td><p> <code>single</code> </p></td><td><p> <code>SINGLESXP</code>
</p></td></tr>
<tr><td><p> <code>character</code> </p></td><td><p> <code>STRSXP</code>
</p></td></tr>
<tr><td><p> <code>list</code> </p></td><td><p> <code>VECSXP</code>
</p></td></tr>
</tbody></table>
</blockquote>

<p>Consider a C routine, <code>myC</code>, declared as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void myC(double *x, int *n, char **names, int *status);
</pre></td></tr></tbody></table>
<p>We would register it as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">R_CMethodDef cMethods[] = {
   {"myC", &amp;myC, 4, {REALSXP, INTSXP, STRSXP, LGLSXP}},
   {NULL, NULL, 0}
};
</pre></td></tr></tbody></table>
<p>One can also specify whether each argument is used simply as input, or
as output, or as both input and output.  The style field in the
description of a method is used for this.  The purpose is to allow @R{}
to transfer values more efficiently across the R-C/FORTRAN interface by
avoiding copying values when it is not necessary. Typically, one omits
this information in the registration data.
</p>
<p>Having created the arrays describing each routine, the last step is to
actually register them with @R{}.  We do this by calling
<code>R_registerRoutines</code>.  For example, if we have the descriptions
above for the routines accessed by the <code>.C</code> and <code>.Call</code>
we would use the following code:
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void
R_init_myLib(DllInfo *info)
{
   R_registerRoutines(info, cMethods, callMethods, NULL, NULL);
}
</pre></td></tr></tbody></table>
<p>This routine will be invoked when @R{} loads the shared object/DLL named
<code>myLib</code>.  The last two arguments in the call to
<code>R_registerRoutines</code> are for the routines accessed by
<code>.Fortran</code> and <code>.External</code> interfaces.  In our example, these
are given as <code>NULL</code> since we have no routines of these types.
</p>
<p>When @R{} unloads a shared object/DLL, any registered routines are
automatically removed. There is no (direct) facility for unregistering
a symbol.
</p>
<p>Examples of registering routines can be found in the different packages
in the @R{} source tree (e.g., @pkg{stats}).  Also, there is a
brief, high-level introduction in <em>R News</em> (volume 1/3, September
2001, pages 20-23).
</p>

<p>In addition to registering C routines to be called by @R{}, it can at
times be useful for one package to make some of its C routines available
to be called by C code in another package.  An interface to support this
has been provided since @R{} 2.4.0.  The interface consists of two
routines declared as
</p>
<a name="IDX100"></a>
<a name="IDX101"></a>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void R_RegisterCCallable(const char *package, const char *name,
                         DL_FUNC fptr);
DL_FUNC R_GetCCallable(const char *package, const char *name);
</pre></td></tr></tbody></table>
<p>A package @pkg{packA} that wants to make a C routine <code>myCfun</code>
available to C code in other packages would include the call
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">R_RegisterCCallable("packA", "myCfun", myCfun);
</pre></td></tr></tbody></table>
<p>in its initialization function <code>R_init_packA</code>.  A package
@pkg{packB} that wants to use this routine would retrieve the function
pointer with a call of the form
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">p_myCfun = R_GetCCallable("packA", "myCfun");
</pre></td></tr></tbody></table>
<p>The author of @pkg{packB} is responsible for ensuring that
<code>p_myCfun</code> has an appropriate declaration. In the future @R{} may
provide some automated tools to simplify exporting larger numbers of
routines.
</p>
<p>A package that wishes to make use of header files in other packages needs
to declare them as a comma-separated list in the field <code>LinkingTo</code>
in the <tt>`DESCRIPTION'</tt> file.  For example
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">Depends: link2, link3
LinkingTo: link2, link3
</pre></td></tr></tbody></table>
<p>It should also `Depend' on those packages for they have to be installed
prior to this one, and loaded prior to this one (so the path to their
compiled code can be found).
</p>
<p>This then arranges that the <tt>`include'</tt> directories in the installed
linked-to packages are added to the include paths for C and C++ code.
</p>
<p>A CRAN example of the use of this mechanism is package @pkg{lme4}, which
links to @pkg{Matrix}.
</p>
<hr size="6">
<a name="Creating-shared-objects"></a>
<a name="SEC80"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC79" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC81" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 5.5 Creating shared objects </h2>

<p>Shared objects for loading into @R{} can be created using <code>R CMD
SHLIB</code>.  This accepts as arguments a list of files which must be object
files (with extension <tt>`.o'</tt>) or sources for C, C++, FORTRAN 77,
Fortran 9x, Objective C or Objective C++ (with extensions <tt>`.c'</tt>,
<tt>`.cc'</tt> or <tt>`.cpp'</tt> or <tt>`.C'</tt>, <tt>`.f'</tt>, <tt>`.f90'</tt> or
<tt>`.f95'</tt>, <tt>`.m'</tt>, and <tt>`.mm'</tt> or <tt>`.M'</tt>, respectively), or
commands to be passed to the linker.  See <kbd>R CMD SHLIB --help</kbd> (or
the @R{} help for <code>SHLIB</code>) for usage information.
</p>
<p>If compiling the source files does not work "out of the box", you can
specify additional flags by setting some of the variables
<a name="IDX102"></a>
<code>PKG_CPPFLAGS</code> (for the C preprocessor, typically <samp>`-I'</samp> flags),
<a name="IDX103"></a>
<a name="IDX104"></a>
<a name="IDX105"></a>
<a name="IDX106"></a>
<a name="IDX107"></a>
<code>PKG_CFLAGS</code>, <code>PKG_CXXFLAGS</code>, <code>PKG_FFLAGS</code>,
<code>PKG_FCFLAGS</code>, and <code>PKG_OBJCFLAGS</code> (for the C, C++, FORTRAN
77, Fortran 9x, and Objective C compilers, respectively) in the file
<tt>`Makevars'</tt> in the compilation directory (or, of course, create the
object files directly from the command line).
<a name="IDX108"></a>
Similarly, variable <code>PKG_LIBS</code> in <tt>`Makevars'</tt> can be used for
additional <samp>`-l'</samp> and <samp>`-L'</samp> flags to be passed to the linker when
building the shared object. (Supplying linker commands as arguments to
<code>R CMD SHLIB</code> will override <code>PKG_LIBS</code> in <tt>`Makevars'</tt>.)
</p>
<a name="IDX109"></a>
<p>It is possible to arrange to include compiled code from other languages
by setting the macro <samp>`OBJECTS'</samp> in file <tt>`Makevars'</tt>, together
with suitable rules to make the objects.
</p>
<p>Flags which are already set (for example in file
<tt>`etc<var>R_ARCH</var>/Makeconf'</tt> on Unix-alikes) can be overridden by the
environment variable <code>MAKEFLAGS</code> (at least for systems using a
POSIX-compliant <code>make</code>), as in (Bourne shell syntax)
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">MAKEFLAGS="CFLAGS=-O3" R CMD SHLIB *.c
</pre></td></tr></tbody></table>
<p>It is also possible to set such variables in personal <tt>`Makevars'</tt>
files, which are read after the local <tt>`Makevars'</tt> and the system
makefiles. 
</p>

<p>Note that as <code>R CMD SHLIB</code> uses Make, it will not remake a shared
object just because the flags have changed, and if <tt>`test.c'</tt> and
<tt>`test.f'</tt> both exist in the current directory
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">R CMD SHLIB test.f
</pre></td></tr></tbody></table>

<p>will compile <tt>`test.c'</tt>!
</p>

<p>If the <tt>`src'</tt> subdirectory of an add-on package contains source code
with one of the extensions listed above or a file <tt>`Makevars'</tt> but
<strong>not</strong> a file <code>Makefile</code>, <code>R CMD INSTALL</code> creates a
shared object (for loading into @R{} in the <code>.First.lib</code> or
<code>.onLoad</code> function of the package) using the <code>R CMD SHLIB</code>
mechanism.  If file <tt>`Makevars'</tt> exists it is read first, then the
system makefile and then any personal <tt>`Makevars'</tt> files.
</p>
<p>If the <tt>`src'</tt> subdirectory of package contains a file
<tt>`Makefile'</tt>, this is used in place of the <code>R CMD SHLIB</code>
mechanism.  <code>make</code> is called with makefiles
<tt>`<var>R_HOME</var>/etc<var>R_ARCH</var>/Makeconf'</tt><a name="DOCF23" href="#FOOT23">(23)</a>, <tt>`src/Makefile'</tt> and any personal
<tt>`Makevars'</tt> files (in that order).  The first target found in
<tt>`src/Makefile'</tt> is used.
</p>
<p>It is better to make use of a <code>Makevars</code>
file rather than a <code>Makefile</code>: the latter should be needed only
exceptionally.
</p>
<p>Note that whereas <code>R CMD INSTALL</code> makes use of a <tt>`Makefile'</tt>,
<code>R CMD SHLIB</code> does not.  The file must be named <tt>`Makefile'</tt>,
not for example <tt>`makefile'</tt> nor <tt>`GNUmakefile'</tt>.
</p>
<p>Under Windows<a name="DOCF24" href="#FOOT24">(24)</a> the same commands
work, but <tt>`Makevars.win'</tt> will be used in preference to
<tt>`Makevars'</tt>, and only <tt>`src/Makefile.win'</tt> will be used by
<code>R CMD INSTALL</code> with <tt>`src/Makefile'</tt> being ignored.  For
details of building DLLs with a variety of compilers, see file
<samp>`README.packages'</samp> and
<a href="http://www.stats.uwo.ca/faculty/murdoch/software/compilingDLLs/">http://www.stats.uwo.ca/faculty/murdoch/software/compilingDLLs/</a>
.
</p>
<p>Under Windows you can supply an exports file called
<tt>`<var>dllname</var>-win.def'</tt>: otherwise all entry points in objects (but
not libraries) supplied to <code>R CMD SHLIB</code> will be exported from the
DLL.  An example is <tt>`stats-win.def'</tt> for the @pkg{stats} package.
</p>

<hr size="6">
<a name="Interfacing-C_002b_002b-code"></a>
<a name="SEC81"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC80" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC82" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 5.6 Interfacing C++ code </h2>

<p>Suppose we have the following hypothetical C++ library, consisting of
the two files <tt>`X.hh'</tt> and <tt>`X.cc'</tt>, and implementing the two
classes <code>X</code> and <code>Y</code> which we want to use in @R{}.
</p>
<blockquote><table class="cartouche" border="1"><tbody><tr><td>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">// X.hh

class X {
public: X (); ~X ();
};

class Y {
public: Y (); ~Y ();
};
</pre></td></tr></tbody></table></td></tr></tbody></table>
</blockquote>

<blockquote><table class="cartouche" border="1"><tbody><tr><td>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">// X.cc

#include &lt;iostream&gt;
#include "X.hh"

static Y y;

X::X()  { std::cout &lt;&lt; "constructor X" &lt;&lt; std::endl; }
X::~X() { std::cout &lt;&lt; "destructor X"  &lt;&lt; std::endl; }
Y::Y()  { std::cout &lt;&lt; "constructor Y" &lt;&lt; std::endl; }
Y::~Y() { std::cout &lt;&lt; "destructor Y"  &lt;&lt; std::endl; }
</pre></td></tr></tbody></table></td></tr></tbody></table>
</blockquote>

<p>To use with @R{}, the only thing we have to do is writing a wrapper
function and ensuring that the function is enclosed in
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">extern "C" {

}
</pre></td></tr></tbody></table>
<p>For example,
</p>
<blockquote><table class="cartouche" border="1"><tbody><tr><td>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">// X_main.cc:

#include "X.hh"

extern "C" {

void X_main () {
  X x;
}

} // extern "C"
</pre></td></tr></tbody></table></td></tr></tbody></table>
</blockquote>

<p>Compiling and linking should be done with the C++ compiler-linker
(rather than the C compiler-linker or the linker itself); otherwise, the
C++ initialization code (and hence the constructor of the static
variable <code>Y</code>) are not called.  On a properly configured system, one
can simply use
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">R CMD SHLIB X.cc X_main.cc
</pre></td></tr></tbody></table>

<p>to create the shared object, typically <tt>`X.so'</tt> (the file name
extension may be different on your platform).  Now starting @R{} yields
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">R : Copyright 2000, The R Development Core Team
Version 1.1.0 Under development (unstable) (April 14, 2000)
...
Type    "q()" to quit R.

R&gt; dyn.load(paste("X", .Platform$dynlib.ext, sep = ""))
constructor Y
R&gt; .C("X_main")
constructor X
destructor X
list()
R&gt; q()
Save workspace image? [y/n/c]: y
destructor Y
</pre></td></tr></tbody></table>
<p>The @R{} for Windows <acronym>FAQ</acronym> (<tt>`rw-FAQ'</tt>) contains details of how
to compile this example under various Windows compilers.
</p>
<p>Using C++ iostreams, as in this example, is best avoided.  There is no
guarantee that the output will appear in the @R{} console, and indeed it
will not on the @R{} for Windows console.  Use @R{} code or the C entry points
(see section <a href="#SEC116">Printing</a>) for all I/O if at all possible.
</p>
<p>Most @R{} header files can be included within C++ programs, and they
should <strong>not</strong> be included within an <code>extern "C"</code> block (as
they include C++ system headers).  It may not be possible to include
some @R{} headers as they in turn include C header files that may cause
conflicts--if this happens, define <samp>`NO_C_HEADERS'</samp> before including
the @R{} headers, and include the appropriate headers yourself.
</p>
<hr size="6">
<a name="Fortran-I_002fO"></a>
<a name="SEC82"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC81" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC83" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 5.7 Fortran I/O </h2>

<p>We have already warned against the use of C++ iostreams not least
because output is not guaranteed to appear on the @R{} console, and this
warning applies equally to Fortran (77 or 9x) output to units <code>*</code>
and <code>6</code>. See section <a href="#SEC117">Printing from FORTRAN</a>, which describes workarounds.
</p>
<p>In the past most Fortran compilers implemented I/O on top of the C I/O
system and so the two interworked successfully.  This was true of
<code>g77</code>, but it is less true of <code>gfortran</code> as used in
<code>gcc 4.y.z</code>.  In particular, any package that makes use of Fortran
I/O will when compiled on Windows interfere with C I/O: when the Fortran
I/O is initialized (typically when the package is loaded) the C
<code>stdout</code> and <code>stderr</code> are switched to LF line endings.
(Function <code>La_Init</code> in file <tt>`src/main/lapack.c'</tt> shows how to
mitigate this.)  Even worse, prior to @R{} 2.6.2 using Fortran output
when running under the Windows GUI console (<code>Rgui</code>) would hang the
@R{} session.  This is now avoided by ensuring that the Fortran output
is written to a file (<tt>`fort.6'</tt> in the working directory).
</p>
<hr size="6">
<a name="Linking-to-other-packages"></a>
<a name="SEC83"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC82" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC84" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 5.8 Linking to other packages </h2>

<p>It is not in general possible to link a DLL in package @pkg{packA} to a
DLL provided by package @pkg{packB} (for the security reasons mentioned
in <a href="#SEC78"><code>dyn.load</code> and <code>dyn.unload</code></a>, and also because some platforms
distinguish between shared and dynamic libraries), but it is on Windows.
</p>
<p>Note that there can be tricky versioning issues here, as package
@pkg{packB} could be re-installed after package @pkg{packA} -- it is
desirable that the API provided by package @pkg{packB} remains
backwards-compatible.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC84">5.8.1 Unix-alikes</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                 
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC85">5.8.2 Windows</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                     
</td></tr>
</tbody></table>

<hr size="6">
<a name="Unix_002dalikes"></a>
<a name="SEC84"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC83" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC85" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC83" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 5.8.1 Unix-alikes </h3>

<p>It is possible to link a shared object in package @pkg{packA} to a
library provided by package @pkg{packB} under limited circumstances
on a Unix-alke OS.  There are severe portability issues, so this is not
recommended for a distributed package.
</p>
<p>This is easiest if @pkg{packB} provides a static library
<tt>`packB/libs/libpackB.a'</tt>.  (This will need to be comiled with
<code>PIC</code> flags on platforms where it matters.)  Then as the code from
package @pkg{packB} is incorporated when package @pkg{packA} is
installed, we only need to find the static library at install time for
package @pkg{packB}.  The only issue is to find package @pkg{packB}, and
for that we can ask @R{} by something like
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">PKGB_PATH=`echo 'library(packB); cat(system.file("libs", package="packB"))' \
 | R --vanilla --slave`
PKG_LIBS=$(PKGB_PATH)/libpackB.a
</pre></td></tr></tbody></table>

<p>(If <tt>`libpackB.a'</tt> itself depends on other libraries these will need
to be included in <code>PKG_LIBS</code>.)
</p>
<p>For a dynamic library <tt>`packB/libs/libpackB.so'</tt>
(<tt>`packB/libs/libpackB.dylib'</tt> on Mac OS X) we could use
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">PKGB_PATH=`echo 'library(packB); cat(system.file("libs", package="packB"))' \
 | R --vanilla --slave`
PKG_LIBS=-L"$(PKGB_PATH)" -lpackB 
</pre></td></tr></tbody></table>

<p>This will work for installation, but very likely not when package
<code>packB</code> is loaded, as the path to package @pkg{packB}'s <tt>`libs'</tt>
directory is not in the <code>ld.so</code><a name="DOCF25" href="#FOOT25">(25)</a>  search path.  You can
arrange to put it there <strong>before</strong> @R{} is launched by setting (on
some platforms) <code>LD_RUN_PATH</code> or <code>LD_LIBRARY_PATH</code> or adding to
the <code>ld.so</code> cache (see <code>ldconfig</code>).  On platforms that
support it, the path to the dynamic library can be hardcoded at install
time (which assumes that the location of package @pkg{packB} will not be
changed).  On systems with the GNU linker (e.g. Linux) and some others
(e.g. Mac OS X) this can be done by
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">PKGB_PATH=`echo 'library(packB); cat(system.file("libs", package="packB"))' \
 | R --vanilla --slave`
PKG_LIBS=-L"$(PKGB_PATH)" -rpath "$(PKGB_PATH)" -lpackB 
</pre></td></tr></tbody></table>

<p>and on some other systems (e.g. Solaris with its native linker) use
<code>-R</code> rather than <code>-rpath</code>.
</p>
<p>It may be possible to figure out what is required semi-automatically
from the result of <code>R CMD libtool --config</code> (look for
<samp>`hardode'</samp>).
</p>
<p>Making headers provided by package @pkg{packB} available to the code to
be compiled in package @pkg{packA} can be done by the <code>LinkingTo</code>
mechanism (see section <a href="#SEC79">Registering native routines</a>).
</p>

<hr size="6">
<a name="Windows"></a>
<a name="SEC85"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC84" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC86" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC83" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 5.8.2 Windows </h3>

<p>Suppose package @pkg{packA} wants to make use of compiled code provided
by @pkg{packB} in DLL <tt>`packB/libs/exB.dll'</tt>, possibly the package's
DLL <tt>`packB/libs/packB.dll'</tt>.  (This can be extended to linking to
more than one package in a similar way.)  There are three issues to be
addressed:
</p>
<ul class="toc">
<li>
Making headers provided by package @pkg{packB} available to the code to
be compiled in package @pkg{packA}.

<p>This is done by the <code>LinkingTo</code> mechanism (see section <a href="#SEC79">Registering native routines</a>).
</p>
</li><li> preparing <code>packA.dll</code> to link to <tt>`packB/libs/exB.dll'</tt>.

<p>This needs an entry in <tt>`Makevars.win'</tt> of the form
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">PKG_LIBS= -L&lt;something&gt; -lexB
</pre></td></tr></tbody></table>
<p>and one possibility is that <code>&lt;something&gt;</code> is the path to the
installed <tt>`pkgB/libs'</tt> directory.  To find that we need to ask @R{}
where it is by something like
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">PKGB_PATH=`echo 'library(packB); cat(system.file("libs", package="packB"))' \
 | rterm --vanilla --slave`
PKG_LIBS= -L"$(PKGB_PATH)" -lexB
</pre></td></tr></tbody></table>
<p>Another possibility is to use an import library, shipping with package
@pkg{packA} an exports file <tt>`exB.def'</tt>.  Then <tt>`Makevars.win'</tt>
could contain
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">PKG_LIBS= -L. -lexB

before: libexB.dll.a
libexB.dll.a: exB.def
</pre></td></tr></tbody></table>
<p>and then installing package @pkg{packA} will make and use the import
library for <tt>`exB.dll'</tt>.  (One way to prepare the exports file is to
use <tt>`pexports.exe'</tt>.
</p>
</li><li> loading <tt>`packA.dll'</tt> which depends on <tt>`exB.dll'</tt>.

<p>If <code>exB.dll</code> was used by package @pkg{packB} (because it is in fact
<tt>`packB.dll'</tt> or <tt>`packB.dll'</tt> depends on it) and @pkg{packB} has
been loaded before @pkg{packA}, then nothing more needs to be done as
<tt>`exB.dll'</tt> will already be loaded into the @R{} executable.  (This
is the most common scenario).
</p>
<p>More generally, we can use the <code>DLLpath</code> argument to
<code>library.dynam</code> to ensure that <code>exB.dll</code> is found, for example
by setting
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">library.dynam("packA", pkg, lib, 
              DLLpath = system.file("libs", package="packB"))
</pre></td></tr></tbody></table>
<p>Note that <code>DLLpath</code> can only set one path, and so for linking to
two or more packages you would need to resort to setting <code>PATH</code>.
</p>
</li></ul>

<hr size="6">
<a name="Handling-R-objects-in-C"></a>
<a name="SEC86"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC85" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC87" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 5.9 Handling R objects in C </h2>

<p>Using C code to speed up the execution of an @R{} function is often very
fruitful.  Traditionally this has been done via the <code>.C</code> function
in @R{}.
One restriction of this interface is that the @R{} objects can not be
handled directly in C.  This becomes more troublesome when one wishes to
call @R{} functions from within the C code.  There is a C function
provided called <code>call_R</code> (also known as <code>call_S</code> for
compatibility with S) that can do that, but it is cumbersome to use, and
the mechanisms documented here are usually simpler to use, as well as
more powerful.
</p>
<p>If a user really wants to write C code using internal @R{} data
structures, then that can be done using the <code>.Call</code> and
<code>.External</code> function.  The syntax for the calling function in @R{}
in each case is similar to that of <code>.C</code>, but the two functions have
different C interfaces.  Generally the <code>.Call</code> interface (which is
modelled on the interface of the same name in @Sl{} version 4) is a
little simpler to use, but <code>.External</code> is a little more general.
<a name="IDX110"></a>
<a name="IDX111"></a>
</p>
<p>A call to <code>.Call</code> is very similar to <code>.C</code>, for example
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">.Call("convolve2", a, b)
</pre></td></tr></tbody></table>

<p>The first argument should be a character string giving a C symbol name
of code that has already been loaded into @R{}.  Up to 65 @R{} objects
can passed as arguments.  The C side of the interface is
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

SEXP convolve2(SEXP a, SEXP b)
 ...
</pre></td></tr></tbody></table>
<p>A call to <code>.External</code> is almost identical
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">.External("convolveE", a, b)
</pre></td></tr></tbody></table>

<p>but the C side of the interface is different, having only one argument
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

SEXP convolveE(SEXP args)
 ...
</pre></td></tr></tbody></table>

<p>Here <code>args</code> is a <code>LISTSXP</code>, a Lisp-style pairlist from which
the arguments can be extracted.
</p>
<p>In each case the @R{} objects are available for manipulation via a set
of functions and macros defined in the header file <tt>`Rinternals.h'</tt>
or some S4-compatibility macros defined in <tt>`Rdefines.h'</tt>.  See
<a href="#SEC97">Interface functions <code>.Call</code> and <code>.External</code></a> for details on
<code>.Call</code> and <code>.External</code>.
</p>
<p>Before you decide to use <code>.Call</code> or <code>.External</code>, you should
look at other alternatives.  First, consider working in interpreted @R{}
code; if this is fast enough, this is normally the best option.  You
should also see if using <code>.C</code> is enough.  If the task to be
performed in C is simple enough requiring no call to @R{}, <code>.C</code>
suffices.  The new interfaces are relatively recent additions to @Sl{}
and @R{}, and a great deal of useful code has been written using just
<code>.C</code> before they were available.  The <code>.Call</code> and
<code>.External</code> interfaces allow much more control, but they also
impose much greater responsibilities so need to be used with care.
Neither <code>.Call</code> nor <code>.External</code> copy their arguments.  You
should treat arguments you receive through these interfaces as
read-only.
</p>
<p>There are two approaches that can be taken to handling @R{} objects from
within C code.  The first (historically) is to use the macros and
functions that have been used to implement the core parts of @R{}
through <code>.Internal</code> calls.  A public<a name="DOCF26" href="#FOOT26">(26)</a>  subset of these is
defined in the header file <tt>`Rinternals.h'</tt> in the directory
<tt>`<var>R_INCLUDE_DIR</var>'</tt> (default <tt>`<var>R_HOME</var>/include'</tt>) that
should be available on any @R{} installation.
</p>
<p>Another approach is to use @R{} versions of the macros and functions
defined for the @Sl{} version 4 interface <code>.Call</code>, which are
defined in the header file <tt>`Rdefines.h'</tt>.  This is a somewhat
simpler approach, and is to be preferred if the code is intended to be
shared with @Sl{}.  However, it is less well documented and even less
tested.  Note too that some idiomatic S4 constructions with these macros
(such as assigning elements of character vectors or lists) are invalid
in @R{}.
</p>
<p>A substantial amount of @R{} is implemented using the functions and
macros described here, so the @R{} source code provides a rich source of
examples and "how to do it": indeed many of the examples here were
developed by examining closely @R{} system functions for similar tasks.
Do make use of the source code for inspirational examples.
</p>
<p>It is necessary to know something about how @R{} objects are handled in
C code.  All the @R{} objects you will deal with will be handled with
the type <em>SEXP</em><a name="DOCF27" href="#FOOT27">(27)</a>, which is a
pointer to a structure with typedef <code>SEXPREC</code>.  Think of this
structure as a <em>variant type</em> that can handle all the usual types
of @R{} objects, that is vectors of various modes, functions,
environments, language objects and so on.  The details are given later
in this section and in <a href="file:///C:/Users/Guohui%20Ding/Documents/Tencent%20Files/14750783/FileRecv/R-ints.html#R-Internal-Structures">(R-ints)R Internal Structures</a> section `R Internal Structures' in <cite>R Internals</cite>, but for most
purposes the programmer does not need to know them.  Think rather of a
model such as that used by Visual Basic, in which @R{} objects are
handed around in C code (as they are in interpreted @R{} code) as the
variant type, and the appropriate part is extracted for, for example,
numerical calculations, only when it is needed.  As in interpreted @R{}
code, much use is made of coercion to force the variant object to the
right type.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC87">5.9.1 Handling the effects of garbage collection</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">          
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC88">5.9.2 Allocating storage</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">          
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC89">5.9.3 Details of R types</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">          
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC90">5.9.4 Attributes</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC91">5.9.5 Classes</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                     
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC92">5.9.6 Handling lists</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">              
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC93">5.9.7 Handling character data</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">     
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC94">5.9.8 Finding and setting variables</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC95">5.9.9 Some convenience functions</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC96">5.9.10 Named objects and copying</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">   
</td></tr>
</tbody></table>

<hr size="6">
<a name="Garbage-Collection"></a>
<a name="SEC87"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC86" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC88" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC86" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 5.9.1 Handling the effects of garbage collection </h3>


<p>We need to know a little about the way @R{} handles memory allocation.
The memory allocated for @R{} objects is not freed by the user; instead,
the memory is from time to time <em>garbage collected</em>.  That is, some
or all of the allocated memory not being used is freed.
</p>
<p>The @R{} object types are represented by a C structure defined by a
typedef <code>SEXPREC</code> in <tt>`Rinternals.h'</tt>.  It contains several
things among which are pointers to data blocks and to other
<code>SEXPREC</code>s.  A <code>SEXP</code> is simply a pointer to a <code>SEXPREC</code>.
</p>
<p>If you create an @R{} object in your C code, you must tell @R{} that you
are using the object by using the <code>PROTECT</code> macro on a pointer to
the object. This tells @R{} that the object is in use so it is not
destroyed during garbage collection.  Notice that it is the object which
is protected, not the pointer variable.  It is a common mistake to
believe that if you invoked <code>PROTECT(<var>p</var>)</code> at some point then
<var>p</var> is protected from then on, but that is not true once a new
object is assigned to <var>p</var>.
</p>
<p>Protecting an @R{} object automatically protects all the @R{} objects
pointed to in the corresponding <code>SEXPREC</code>, for example all elements
of a protected list are automatically protected.
</p>
<p>The programmer is solely responsible for housekeeping the calls to
<code>PROTECT</code>.  There is a corresponding macro <code>UNPROTECT</code> that
takes as argument an <code>int</code> giving the number of objects to
unprotect when they are no longer needed.  The protection mechanism is
stack-based, so <code>UNPROTECT(<var>n</var>)</code> unprotects the last <var>n</var>
objects which were protected.  The calls to <code>PROTECT</code> and
<code>UNPROTECT</code> must balance when the user's code returns.  @R{} will
warn about <code>"stack imbalance in .Call"</code> (or <code>.External</code>) if
the housekeeping is wrong.
</p>
<p>Here is a small example of creating an @R{} numeric vector in C code.
First we use the macros in <tt>`Rinternals.h'</tt>:
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

  SEXP ab;
    ....
  PROTECT(ab = allocVector(REALSXP, 2));
  REAL(ab)[0] = 123.45;
  REAL(ab)[1] = 67.89;
  UNPROTECT(1);
</pre></td></tr></tbody></table>

<p>and then those in <tt>`Rdefines.h'</tt>:
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R.h&gt;
#include &lt;Rdefines.h&gt;

  SEXP ab;
    ....
  PROTECT(ab = NEW_NUMERIC(2));
  NUMERIC_POINTER(ab)[0] = 123.45;
  NUMERIC_POINTER(ab)[1] = 67.89;
  UNPROTECT(1);
</pre></td></tr></tbody></table>
<p>Now, the reader may ask how the @R{} object could possibly get removed
during those manipulations, as it is just our C code that is running.
As it happens, we can do without the protection in this example, but in
general we do not know (nor want to know) what is hiding behind the @R{}
macros and functions we use, and any of them might cause memory to be
allocated, hence garbage collection and hence our object <code>ab</code> to be
removed. It is usually wise to err on the side of caution and assume
that any of the @R{} macros and functions might remove the object.
</p>
<p>In some cases it is necessary to keep better track of whether protection
is really needed.  Be particularly aware of situations where a large
number of objects are generated.  The pointer protection stack has a
fixed size (default 10,000) and can become full.  It is not a good idea
then to just <code>PROTECT</code> everything in sight and <code>UNPROTECT</code>
several thousand objects at the end. It will almost invariably be
possible to either assign the objects as part of another object (which
automatically protects them) or unprotect them immediately after use.
</p>
<p>Protection is not needed for objects which @R{} already knows are in
use.  In particular, this applies to function arguments.
</p>
<p>There is a less-used macro <code>UNPROTECT_PTR(<var>s</var>)</code> that unprotects
the object pointed to by the <code>SEXP</code> <var>s</var>, even if it is not the
top item on the pointer protection stack. This is rarely needed outside
the parser (the @R{} sources have one example, in
<tt>`src/main/plot3d.c'</tt>).
<a name="IDX112"></a>
</p>
<p>Sometimes an object is changed (for example duplicated, coerced or
grown) yet the current value needs to be protected.  For these cases
<code>PROTECT_WITH_INDEX</code> saves an index of the protection location that
can be used to replace the protected value using <code>REPROTECT</code>.
<a name="IDX113"></a>
<a name="IDX114"></a>
For example (from the internal code for <code>optim</code>)
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">    PROTECT_INDEX ipx;

    ....
    PROTECT_WITH_INDEX(s = eval(OS-&gt;R_fcall, OS-&gt;R_env), &amp;ipx);
    REPROTECT(s = coerceVector(s, REALSXP), ipx);
</pre></td></tr></tbody></table>

<hr size="6">
<a name="Allocating-storage"></a>
<a name="SEC88"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC87" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC89" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC86" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 5.9.2 Allocating storage </h3>

<p>For many purposes it is sufficient to allocate @R{} objects and
manipulate those.  There are quite a few <code>alloc<var>Xxx</var></code> functions
defined in <tt>`Rinternals.h'</tt>--you may want to explore them.  These
allocate @R{} objects of various types, and for the standard vector
types there are equivalent <code>NEW_<var>XXX</var></code> macros defined in
<tt>`Rdefines.h'</tt>.
</p>
<p>If storage is required for C objects during the calculations this is
best allocating by calling <code>R_alloc</code>; see section <a href="#SEC109">Memory allocation</a>.
All of these memory allocation routines do their own error-checking, so
the programmer may assume that they will raise an error and not return
if the memory cannot be allocated.
</p>
<hr size="6">
<a name="Details-of-R-types"></a>
<a name="SEC89"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC88" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC90" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC86" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 5.9.3 Details of R types </h3>

<p>Users of the <tt>`Rinternals.h'</tt> macros will need to know how the @R{}
types are known internally: if the <tt>`Rdefines.h'</tt> macros are used
then S4-compatible names are used.
</p>
<p>The different @R{} data types are represented in C by <em>SEXPTYPE</em>.
Some of these are familiar from @R{} and some are internal data types.
The usual @R{} object modes are given in the table.
</p>
<blockquote><table>
<thead><tr><th><p> SEXPTYPE </p></th><th><p> @R{} equivalent
</p></th></tr></thead>
<tbody><tr><td><p> <code>REALSXP</code>  </p></td><td><p> numeric with storage mode <code>double</code>
</p></td></tr>
<tr><td><p> <code>INTSXP</code>   </p></td><td><p> integer
</p></td></tr>
<tr><td><p> <code>CPLXSXP</code>  </p></td><td><p> complex
</p></td></tr>
<tr><td><p> <code>LGLSXP</code>   </p></td><td><p> logical
</p></td></tr>
<tr><td><p> <code>STRSXP</code>   </p></td><td><p> character
</p></td></tr>
<tr><td><p> <code>VECSXP</code>   </p></td><td><p> list (generic vector)
</p></td></tr>
<tr><td><p> <code>LISTSXP</code>  </p></td><td><p> "dotted-pair" list
</p></td></tr>
<tr><td><p> <code>DOTSXP</code>   </p></td><td><p> a <samp>`…'</samp> object
</p></td></tr>
<tr><td><p> <code>NILSXP</code>   </p></td><td><p> NULL
</p></td></tr>
<tr><td><p> <code>SYMSXP</code>   </p></td><td><p> name/symbol
</p></td></tr>
<tr><td><p> <code>CLOSXP</code>   </p></td><td><p> function or function closure
</p></td></tr>
<tr><td><p> <code>ENVSXP</code>   </p></td><td><p> environment
</p></td></tr>
</tbody></table>
</blockquote>


<p>Among the important internal <code>SEXPTYPE</code>s are <code>LANGSXP</code>,
<code>CHARSXP</code>, <code>PROMSXP</code>, etc.  (<strong>Note</strong>: although it is
possible to return objects of internal types, it is unsafe to do so as
assumptions are made about how they are handled which may be violated at
user-level evaluation.)  More details are given in <a href="file:///C:/Users/Guohui%20Ding/Documents/Tencent%20Files/14750783/FileRecv/R-ints.html#R-Internal-Structures">(R-ints)R Internal Structures</a> section `R Internal Structures' in <cite>R Internals</cite>.
</p>
<p>Unless you are very sure about the type of the arguments, the code
should check the data types.  Sometimes it may also be necessary to
check data types of objects created by evaluating an @R{} expression in
the C code.  You can use functions like <code>isReal</code>, <code>isInteger</code>
and <code>isString</code> to do type checking.  See the header file
<tt>`Rinternals.h'</tt> for definitions of other such functions.  All of
these take a <code>SEXP</code> as argument and return 1 or 0 to indicate
<var>TRUE</var> or <var>FALSE</var>.  Once again there are two ways to do this,
and <tt>`Rdefines.h'</tt> has macros such as <code>IS_NUMERIC</code>.
</p>
<p>What happens if the <code>SEXP</code> is not of the correct type?  Sometimes
you have no other option except to generate an error.  You can use the
function <code>error</code> for this.  It is usually better to coerce the
object to the correct type.  For example, if you find that an
<code>SEXP</code> is of the type <code>INTEGER</code>, but you need a <code>REAL</code>
object, you can change the type by using, equivalently,
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">PROTECT(<var>newSexp</var> = coerceVector(<var>oldSexp</var>, REALSXP));
</pre></td></tr></tbody></table>

<p>or
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">PROTECT(<var>newSexp</var> = AS_NUMERIC(<var>oldSexp</var>));
</pre></td></tr></tbody></table>

<p>Protection is needed as a new <em>object</em> is created; the object
formerly pointed to by the <code>SEXP</code> is still protected but now
unused.
</p>
<p>All the coercion functions do their own error-checking, and generate
<code>NA</code>s with a warning or stop with an error as appropriate.
</p>
<p>Note that these coercion functions are <em>not</em> the same as calling
<code>as.numeric</code> (and so on) in @R{} code, as they do not dispatch on
the class of the object.  Thus it is normally preferable to do the
coercion in the calling @R{} code.
</p>
<p>So far we have only seen how to create and coerce @R{} objects from C
code, and how to extract the numeric data from numeric @R{} vectors.
These can suffice to take us a long way in interfacing @R{} objects to
numerical algorithms, but we may need to know a little more to create
useful return objects.
</p>
<hr size="6">
<a name="Attributes"></a>
<a name="SEC90"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC89" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC91" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC86" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 5.9.4 Attributes </h3>

<p>Many @R{} objects have attributes: some of the most useful are classes
and the <code>dim</code> and <code>dimnames</code> that mark objects as matrices or
arrays.  It can also be helpful to work with the <code>names</code> attribute
of vectors.
</p>
<p>To illustrate this, let us write code to take the outer product of two
vectors (which <code>outer</code> and <code>%o%</code> already do).  As usual the
@R{} code is simple
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">out &lt;- function(x, y)
{
   storage.mode(x) &lt;- storage.mode(y) &lt;- "double"
   .Call("out", x, y)
}
</pre></td></tr></tbody></table>

<p>where we expect <code>x</code> and <code>y</code> to be numeric vectors (possibly
integer), possibly with names.  This time we do the coercion in the
calling @R{} code.
</p>
<p>C code to do the computations is
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

SEXP out(SEXP x, SEXP y)
{
  int i, j, nx, ny;
  double tmp, *rx = REAL(x), *ry = REAL(y), *rans;
  SEXP ans;

  nx = length(x); ny = length(y);
  PROTECT(ans = allocMatrix(REALSXP, nx, ny));
  rans = REAL(ans);
  for(i = 0; i &lt; nx; i++) {
    tmp = rx[i];
    for(j = 0; j &lt; ny; j++)
      rans[i + nx*j] = tmp * ry[j];
  }
  UNPROTECT(1);
  return(ans);
}
</pre></td></tr></tbody></table>

<p>Note the way <code>REAL</code> is used: as it is a function call it can be
considerably faster to store the result and index that.
</p>
<p>However, we would like to set the <code>dimnames</code> of the result.
Although <code>allocMatrix</code> provides a short cut, we will show how to
set the <code>dim</code> attribute directly.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

SEXP out(SEXP x, SEXP y)
{
  R_len_t i, j, nx, ny;
  double tmp, *rx = REAL(x), *ry = REAL(y), *rans;
  SEXP ans, dim, dimnames;

  nx = length(x); ny = length(y);
  PROTECT(ans = allocVector(REALSXP, nx*ny));
  rans = REAL(ans);
  for(i = 0; i &lt; nx; i++) {
    tmp = rx[i];
    for(j = 0; j &lt; ny; j++)
      rans[i + nx*j] = tmp * ry[j];
  }

  PROTECT(dim = allocVector(INTSXP, 2));
  INTEGER(dim)[0] = nx; INTEGER(dim)[1] = ny;
  setAttrib(ans, R_DimSymbol, dim);

  PROTECT(dimnames = allocVector(VECSXP, 2));
  SET_VECTOR_ELT(dimnames, 0, getAttrib(x, R_NamesSymbol));
  SET_VECTOR_ELT(dimnames, 1, getAttrib(y, R_NamesSymbol));
  setAttrib(ans, R_DimNamesSymbol, dimnames);

  UNPROTECT(3);
  return(ans);
}
</pre></td></tr></tbody></table>
<p>This example introduces several new features.  The <code>getAttrib</code> and
<code>setAttrib</code>
<a name="IDX115"></a>
<a name="IDX116"></a>
functions get and set individual attributes.  Their second argument is a
<code>SEXP</code> defining the name in the symbol table of the attribute we
want; these and many such symbols are defined in the header file
<tt>`Rinternals.h'</tt>.
</p>
<p>There are shortcuts here too: the functions <code>namesgets</code>,
<code>dimgets</code> and <code>dimnamesgets</code> are the internal versions of the
default methods of <code>names&lt;-</code>, <code>dim&lt;-</code> and <code>dimnames&lt;-</code>
(for vectors and arrays), and there are functions such as
<code>GetMatrixDimnames</code> and <code>GetArrayDimnames</code>.
</p>
<p>What happens if we want to add an attribute that is not pre-defined? We
need to add a symbol for it <em>via</em> a call to
<a name="IDX117"></a>
<code>install</code>.  Suppose for illustration we wanted to add an attribute
<code>"version"</code> with value <code>3.0</code>.  We could use
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">  SEXP version;
  PROTECT(version = allocVector(REALSXP, 1));
  REAL(version)[0] = 3.0;
  setAttrib(ans, install("version"), version);
  UNPROTECT(1);
</pre></td></tr></tbody></table>
<p>Using <code>install</code> when it is not needed is harmless and provides a
simple way to retrieve the symbol from the symbol table if it is already
installed.
</p>
<hr size="6">
<a name="Classes"></a>
<a name="SEC91"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC90" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC92" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC86" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 5.9.5 Classes </h3>

<p>In @R{} the (S3) class is just the attribute named <code>"class"</code> so it
can be handled as such, but there is a shortcut <code>classgets</code>.
Suppose we want to give the return value in our example the class
<code>"mat"</code>.  We can use
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R.h&gt;
#include &lt;Rdefines.h&gt;
    .... 
  SEXP ans, dim, dimnames, class;
    ....
  PROTECT(class = allocVector(STRSXP, 1));
  SET_STRING_ELT(class, 0, mkChar("mat"));
  classgets(ans, class);
  UNPROTECT(4);
  return(ans);
}
</pre></td></tr></tbody></table>

<p>As the value is a character vector, we have to know how to create that
from a C character array, which we do using the function
<code>mkChar</code>.
</p>
<hr size="6">
<a name="Handling-lists"></a>
<a name="SEC92"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC91" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC93" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC86" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 5.9.6 Handling lists </h3>

<p>Some care is needed with lists, as @R{} moved early on from using
LISP-like lists (now called "pairlists") to S-like generic vectors.
As a result, the appropriate test for an object of mode <code>list</code> is
<code>isNewList</code>, and we need <code>allocVector(VECSXP, <var>n</var></code>) and
<em>not</em> <code>allocList(<var>n</var>)</code>.
</p>
<p>List elements can be retrieved or set by direct access to the elements
of the generic vector.  Suppose we have a list object
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">a &lt;- list(f=1, g=2, h=3)
</pre></td></tr></tbody></table>

<p>Then we can access <code>a$g</code> as <code>a[[2]]</code> by
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">  double g;
    ....
  g = REAL(VECTOR_ELT(a, 1))[0];
</pre></td></tr></tbody></table>
<p>This can rapidly become tedious, and the following function (based on
one in package @pkg{stats}) is very useful:
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">/* get the list element named str, or return NULL */

SEXP getListElement(SEXP list, const char *str)
{
  SEXP elmt = R_NilValue, names = getAttrib(list, R_NamesSymbol);
  int i;

  for (i = 0; i &lt; length(list); i++)
    if(strcmp(CHAR(STRING_ELT(names, i)), str) == 0) {
      elmt = VECTOR_ELT(list, i);
      break;
    }
  return elmt;
}
</pre></td></tr></tbody></table>

<p>and enables us to say
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">  double g;
  g = REAL(getListElement(a, "g"))[0];
</pre></td></tr></tbody></table>
<hr size="6">
<a name="Handling-character-data"></a>
<a name="SEC93"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC92" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC94" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC86" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 5.9.7 Handling character data </h3>

<p>R character vectors are stored as <code>STRSXP</code>s, a vector type like
<code>VECSXP</code> where every element is of type <code>CHARSXP</code>.  The
<code>CHARSXP</code> elements of <code>STRSXP</code>s are accessed using
<code>STRING_ELT</code> and <code>SET_STRING_ELT</code>.
</p>
<p>As of @R{} 2.6.0, <code>CHARSXP</code>s are read-only objects and must never
be modified.  In particular, the C-style string contained in a
<code>CHARSXP</code> should be treated as read-only and for this reason the
<code>CHAR</code> function used to access the character data of a
<code>CHARSXP</code> returns <code>(const char *)</code> (this also allows compilers
to issue warnings about improper use).  Since <code>CHARSXP</code>s are
immutable, the same <code>CHARSXP</code> can be shared by any <code>STRSXP</code>
needing an element representing the same string.  As of @R{} 2.6.0, @R{}
maintains a global cache of <code>CHARSXP</code>s so that there is only ever
one <code>CHARSXP</code> representing a given string in memory.
</p>
<a name="IDX118"></a>
<a name="IDX119"></a>
<p>You can obtain a <code>CHARSXP</code> by calling <code>mkChar</code> and providing a
nul-terminated C-style string.  This function will return a pre-existing
<code>CHARSXP</code> if one with a matching string already exists, otherwise
it will create a new one and add it to the cache before returning it to
you.   The variant <code>mkCharLen</code> can be used to create a
<code>CHARSXP</code> from part of a buffer and will ensure null-termination.
</p>
<p>Currently, it is still possible to create <code>CHARSXP</code>s using
<code>allocVector</code>; <code>CHARSXP</code>s created in this way will not be
captured by the global <code>CHARSXP</code> cache and this should be avoided.
In the future, all <code>CHARSXP</code>s will be captured by the cache and
this will allow further optimizations, for example, replacing calls to
<code>strcmp</code> with pointer comparisons.  A helper macro,
<code>CallocCharBuf</code>, can be used to obtain a temporary character buffer
for in-place string manipulation: this memory must be released using
<code>Free</code>.
</p>
<hr size="6">
<a name="Finding-and-setting-variables"></a>
<a name="SEC94"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC93" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC95" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC86" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 5.9.8 Finding and setting variables </h3>

<p>It will be usual that all the @R{} objects needed in our C computations
are passed as arguments to <code>.Call</code> or <code>.External</code>, but it is
possible to find the values of @R{} objects from within the C given
their names.  The following code is the equivalent of <code>get(name,
envir = rho)</code>.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">SEXP getvar(SEXP name, SEXP rho)
{
  SEXP ans;

  if(!isString(name) || length(name) != 1)
    error("name is not a single string");
  if(!isEnvironment(rho))
    error("rho should be an environment");
  ans = findVar(install(CHAR(STRING_ELT(name, 0))), rho);
  printf("first value is %f\n", REAL(ans)[0]);
  return(R_NilValue);
}
</pre></td></tr></tbody></table>
<p>The main work is done by
<a name="IDX120"></a>
<code>findVar</code>, but to use it we need to install <code>name</code> as a name
in the symbol table.  As we wanted the value for internal use, we return
<code>NULL</code>.
</p>
<p>Similar functions with syntax
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void defineVar(SEXP symbol, SEXP value, SEXP rho)
void setVar(SEXP symbol, SEXP value, SEXP rho)
</pre></td></tr></tbody></table><a name="IDX121"></a>
<a name="IDX122"></a>


<p>can be used to assign values to @R{} variables.  <code>defineVar</code>
creates a new binding or changes the value of an existing binding in the
specified environment frame; it is the analogue of <code>assign(symbol,
value, envir = rho, inherits = FALSE)</code>, but unlike <code>assign</code>,
<code>defineVar</code> does not make a copy of the object
<code>value</code>.<a name="DOCF28" href="#FOOT28">(28)</a>  <code>setVar</code> searches for an existing
binding for <code>symbol</code> in <code>rho</code> or its enclosing environments.
If a binding is found, its value is changed to <code>value</code>.  Otherwise,
a new binding with the specified value is created in the global
environment.  This corresponds to <code>assign(symbol, value, envir =
rho, inherits = TRUE)</code>.
</p>
<hr size="6">
<a name="Some-convenience-functions"></a>
<a name="SEC95"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC94" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC96" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC86" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 5.9.9 Some convenience functions </h3>

<p>Some operations are done so frequently that there are convenience
functions to handle them.  Suppose we wanted to pass a single logical
argument <code>ignore_quotes</code>: we could use
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">    int ign;

    ign = asLogical(ignore_quotes);
    if(ign == NA_LOGICAL) error("'ignore_quotes' must be TRUE or FALSE");
</pre></td></tr></tbody></table>

<p>which will do any coercion needed (at least from a vector argument), and
return <code>NA_LOGICAL</code> if the value passed was <code>NA</code> or coercion
failed.  There are also <code>asInteger</code>, <code>asReal</code> and
<code>asComplex</code>.  The function <code>asChar</code> returns a <code>CHARSXP</code>.
All of these functions ignore any elements of an input vector after the
first.
</p>
<p>To return a length-one real vector we can use
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">    double x;

    ...
    return ScalarReal(x);
</pre></td></tr></tbody></table>

<p>and there are versions of this for all the atomic vector types (those for
a length-one character vector being <code>ScalarString</code> with argument a
<code>CHARSXP</code> and <code>mkString</code> with argument <code>const char *</code>).
</p>
<p>Some of the <code>is<var>XXXX</var></code> functions differ from their apparent
@R{}-level counterparts: for example <code>isVector</code> is true for any
atomic vector type (<code>isVectorAtomic</code>) and for lists and expressions
(<code>isVectorList</code>) (with no check on attributes).  <code>isMatrix</code> is
a test of a length-2 <code>"dim"</code> attribute.
</p>
<p>There are a series of small macros/functions to help construct pairlists
and language objects (whose internal structures just differ by
<code>SEXPTYPE</code>.  Function <code>CONS(u, v)</code> is the basic building
block: is constructs a pairlist from <code>u</code> followed by <code>v</code>
(which is a pairlist or <code>R_NilValue</code>).  <code>LCONS</code> is a variant
that constructs a language object.  Functions <code>list1</code> to
<code>list4</code> construct a pairlist from one to four items, and
<code>lang1</code> to <code>lang4</code> do the same for a language object (a
function to call plus zero to three arguments).  Function <code>elt</code> and
<code>lastElt</code> find the <var>i</var>th element and the last element of a
pairlist, and <code>nthcdr</code> returns a pointer to the <var>n</var>th position
in the pairlist (whose <code>CAR</code> is the <var>n</var>th item).
</p>
<p>Functions <code>str2type</code> and <code>type2str</code> map @R{}
length-one character strings to and from <code>SEXPTYPE</code> numbers, and
<code>type2char</code> maps numbers to C character strings.
</p>

<hr size="6">
<a name="Named-objects-and-copying"></a>
<a name="SEC96"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC95" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC97" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC86" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 5.9.10 Named objects and copying </h3>

<p>When assignments are done in @R{} such as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">x &lt;- 1:10
y &lt;- x
</pre></td></tr></tbody></table>

<p>the named object is not necessarily copied, so after those two
assignments <code>y</code> and <code>x</code> are bound to the same <code>SEXPREC</code>
(the structure a <code>SEXP</code> points to).  This means that any code which
alters one of them has to make a copy before modifying the copy if the
usual @R{} semantics are to apply.  Note that whereas <code>.C</code> and
<code>.Fortran</code> do copy their arguments (unless the dangerous <code>dup
= FALSE</code> is used), <code>.Call</code> and <code>.External</code> do not.  So
<code>duplicate</code> is commonly called on arguments to <code>.Call</code> before
modifying them.
</p>
<p>However, at least some of this copying is unneeded.  In the first
assignment shown, <code>x &lt;- 1:10</code>, @R{} first creates an object with
value <code>1:10</code> and then assigns it to <code>x</code> but if <code>x</code> is
modified no copy is necessary as the temporary object with value
<code>1:10</code> cannot be referred to again.  @R{} distinguishes between
named and unnamed objects <em>via</em> a field in a <code>SEXPREC</code> that
can be accessed via the macros <code>NAMED</code> and <code>SET_NAMED</code>.  This
can take values
</p>
<dl compact="compact">
<dt> <code>0</code></dt>
<dd><p>The object is not bound to any symbol
</p></dd>
<dt> <code>1</code></dt>
<dd><p>The object has been bound to exactly one symbol
</p></dd>
<dt> <code>2</code></dt>
<dd><p>The object has potentially been bound to two or more symbols, and one
should act as if another variable is currently bound to this value.
</p></dd>
</dl>


<p>Note the past tenses: @R{} does not do full reference counting and there
may currently be fewer bindings.
</p>
<p>It is safe to modify the value of any <code>SEXP</code> for which
<code>NAMED(foo)</code> is zero, and if <code>NAMED(foo)</code> is two, the value
should be duplicated (via a call to <code>duplicate</code>) before any
modification.  Note that it is the responsibility of the author of the
code making the modification to do the duplication, even if it is
<code>x</code> whose value is being modified after <code>y &lt;- x</code>.
</p>
<p>The case <code>NAMED(foo) == 1</code> allows some optimization, but it can be
ignored (and duplication done whenever <code>NAMED(foo) &gt; 0</code>).  (This
optimization is not currently usable in user code.)  It is intended
for use within assignment functions.  Suppose we used
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">x &lt;- 1:10
foo(x) &lt;- 3
</pre></td></tr></tbody></table>

<p>which is computed as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">x &lt;- 1:10
x &lt;- "foo&lt;-"(x, 3)
</pre></td></tr></tbody></table>

<p>Then inside <code>"foo&lt;-"</code> the object pointing to the current value of
<code>x</code> will have <code>NAMED(foo)</code> as one, and it would be safe to
modify it as the only symbol bound to it is <code>x</code> and that will be
rebound immediately.  (Provided the remaining code in <code>"foo&lt;-"</code>
make no reference to <code>x</code>, and no one is going to attempt a direct
call such as <code>y &lt;- "foo&lt;-"(x)</code>.)
</p>
<p>Currently all arguments to a <code>.Call</code> call will have <code>NAMED</code>
set to 2, and so users must assume that they need to be duplicated
before alteration.
</p>
<hr size="6">
<a name="Interface-functions-_002eCall-and-_002eExternal"></a>
<a name="SEC97"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC96" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC98" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 5.10 Interface functions <code>.Call</code> and <code>.External</code> </h2>

<p>In this section we consider the details of the @R{}/C interfaces.
</p>
<p>These two interfaces have almost the same functionality. <code>.Call</code> is
based on the interface of the same name in @Sl{} version 4, and
<code>.External</code> is based on <code>.Internal</code>.  <code>.External</code> is more
complex but allows a variable number of arguments.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC98">5.10.1 Calling <code>.Call</code></a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">               
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC99">5.10.2 Calling <code>.External</code></a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">           
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC100">5.10.3 Missing and special values</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
</tbody></table>

<hr size="6">
<a name="Calling-_002eCall"></a>
<a name="SEC98"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC97" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC99" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC97" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 5.10.1 Calling <code>.Call</code> </h3>


<p>Let us convert our finite convolution example to use <code>.Call</code>, first
using the <tt>`Rdefines.h'</tt> macros.  The calling function in @R{} is
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">conv &lt;- function(a, b) .Call("convolve2", a, b)
</pre></td></tr></tbody></table>

<p>which could hardly be simpler, but as we shall see all the type checking
must be transferred to the C code, which is
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R.h&gt;
#include &lt;Rdefines.h&gt;

SEXP convolve2(SEXP a, SEXP b)
{
  int i, j, na, nb, nab;
  double *xa, *xb, *xab;
  SEXP ab;

  PROTECT(a = AS_NUMERIC(a));
  PROTECT(b = AS_NUMERIC(b));
  na = LENGTH(a); nb = LENGTH(b); nab = na + nb - 1;
  PROTECT(ab = NEW_NUMERIC(nab));
  xa = NUMERIC_POINTER(a); xb = NUMERIC_POINTER(b);
  xab = NUMERIC_POINTER(ab);
  for(i = 0; i &lt; nab; i++) xab[i] = 0.0;
  for(i = 0; i &lt; na; i++)
    for(j = 0; j &lt; nb; j++) xab[i + j] += xa[i] * xb[j];
  UNPROTECT(3);
  return(ab);
}
</pre></td></tr></tbody></table>
<p>Note that unlike the macros in @Sl{} version 4, the @R{} versions of
these macros do check that coercion can be done and raise an error if it
fails.  They will raise warnings if missing values are introduced by
coercion.  Although we illustrate doing the coercion in the C code here,
it often is simpler to do the necessary coercions in the @R{} code.
</p>
<p>Now for the version in @R{}-internal style.  Only the C code changes.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

SEXP convolve2(SEXP a, SEXP b)
{
  R_len_t i, j, na, nb, nab;
  double *xa, *xb, *xab;
  SEXP ab;

  PROTECT(a = coerceVector(a, REALSXP));
  PROTECT(b = coerceVector(b, REALSXP));
  na = length(a); nb = length(b); nab = na + nb - 1;
  PROTECT(ab = allocVector(REALSXP, nab));
  xa = REAL(a); xb = REAL(b);
  xab = REAL(ab);
  for(i = 0; i &lt; nab; i++) xab[i] = 0.0;
  for(i = 0; i &lt; na; i++)
    for(j = 0; j &lt; nb; j++) xab[i + j] += xa[i] * xb[j];
  UNPROTECT(3);
  return(ab);
}
</pre></td></tr></tbody></table>

<p>This is called in exactly the same way.
</p>
<hr size="6">
<a name="Calling-_002eExternal"></a>
<a name="SEC99"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC98" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC100" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC97" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 5.10.2 Calling <code>.External</code> </h3>


<p>We can use the same example to illustrate <code>.External</code>.  The @R{}
code changes only by replacing <code>.Call</code> by <code>.External</code>
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">conv &lt;- function(a, b) .External("convolveE", a, b)
</pre></td></tr></tbody></table>

<p>but the main change is how the arguments are passed to the C code, this
time as a single SEXP.  The only change to the C code is how we handle
the arguments.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

SEXP convolveE(SEXP args)
{
  int i, j, na, nb, nab;
  double *xa, *xb, *xab;
  SEXP a, b, ab;

  PROTECT(a = coerceVector(CADR(args), REALSXP));
  PROTECT(b = coerceVector(CADDR(args), REALSXP));
    ...
}
</pre></td></tr></tbody></table>

<p>Once again we do not need to protect the arguments, as in the @R{} side
of the interface they are objects that are already in use.  The macros
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">  first = CADR(args);
  second = CADDR(args);
  third = CADDDR(args);
  fourth = CAD4R(args);
</pre></td></tr></tbody></table>

<p>provide convenient ways to access the first four arguments.  More
generally we can use the
<a name="IDX123"></a>
<a name="IDX124"></a>
<code>CDR</code> and <code>CAR</code> macros as in
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">  args = CDR(args); a = CAR(args);
  args = CDR(args); b = CAR(args);
</pre></td></tr></tbody></table>

<p>which clearly allows us to extract an unlimited number of arguments
(whereas <code>.Call</code> has a limit, albeit at 65 not a small one).
</p>
<p>More usefully, the <code>.External</code> interface provides an easy way to
handle calls with a variable number of arguments, as <code>length(args)</code>
will give the number of arguments supplied (of which the first is
ignored).  We may need to know the names (`tags') given to the actual
arguments, which we can by using the <code>TAG</code> macro and using
something like the following example, that prints the names and the first
value of its arguments if they are vector types.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R_ext/PrtUtil.h&gt;

SEXP showArgs(SEXP args)
{
  int i, nargs;
  Rcomplex cpl;
  const char *name;
  SEXP el;

  args = CDR(args); /* skip 'name' */
  for(i = 0; args != R_NilValue; i++, args = CDR(args)) {
    args = CDR(args);
    name = CHAR(PRINTNAME(TAG(args)));
    switch(TYPEOF(CAR(args))) {
    case REALSXP:
      Rprintf("[%d] '%s' %f\n", i+1, name, REAL(CAR(args))[0]);
      break;
    case LGLSXP:
    case INTSXP:
      Rprintf("[%d] '%s' %d\n", i+1, name, INTEGER(CAR(args))[0]);
      break;
    case CPLXSXP:
      cpl = COMPLEX(CAR(args))[0];
      Rprintf("[%d] '%s' %f + %fi\n", i+1, name, cpl.r, cpl.i);
      break;
    case STRSXP:
      Rprintf("[%d] '%s' %s\n", i+1, name,
             CHAR(STRING_ELT(CAR(args), 0)));
      break;
    default:
      Rprintf("[%d] '%s' R type\n", i+1, name);
    }
  }
  return(R_NilValue);
}
</pre></td></tr></tbody></table>
<p>This can be called by the wrapper function
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">showArgs &lt;- function(...) .External("showArgs", ...)
</pre></td></tr></tbody></table>

<p>Note that this style of programming is convenient but not necessary, as
an alternative style is
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">showArgs1 &lt;- function(...) .Call("showArgs1", list(...))
</pre></td></tr></tbody></table>

<p>The (very similar) C code is in the scripts.
</p>
<hr size="6">
<a name="Missing-and-special-values"></a>
<a name="SEC100"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC99" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC101" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC97" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 5.10.3 Missing and special values </h3>

<p>One piece of error-checking the <code>.C</code> call does (unless <code>NAOK</code>
is true) is to check for missing (<code>NA</code>) and <acronym>IEEE</acronym> special
values (<code>Inf</code>, <code>-Inf</code> and <code>NaN</code>) and give an error if any
are found.  With the <code>.Call</code> interface these will be passed to our
code.  In this example the special values are no problem, as
<acronym>IEEE</acronym> arithmetic will handle them correctly.  In the current
implementation this is also true of <code>NA</code> as it is a type of
<code>NaN</code>, but it is unwise to rely on such details.  Thus we will
re-write the code to handle <code>NA</code>s using macros defined in
<tt>`R_exts/Arith.h'</tt> included by <tt>`R.h'</tt>.
</p>
<p>The code changes are the same in any of the versions of <code>convolve2</code>
or <code>convolveE</code>:
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">    ...
  for(i = 0; i &lt; na; i++)
    for(j = 0; j &lt; nb; j++)
        if(ISNA(xa[i]) || ISNA(xb[j]) || ISNA(xab[i + j]))
          xab[i + j] = NA_REAL;
        else
          xab[i + j] += xa[i] * xb[j];
    ...
</pre></td></tr></tbody></table>
<a name="IDX125"></a>
<a name="IDX126"></a>

<p>Note that the <code>ISNA</code> macro, and the similar macros <code>ISNAN</code>
(which checks for <code>NaN</code> or <code>NA</code>) and <code>R_FINITE</code> (which is
false for <code>NA</code> and all the special values), only apply to numeric
values of type <code>double</code>.  Missingness of integers, logicals and
character strings can be tested by equality to the constants
<code>NA_INTEGER</code>, <code>NA_LOGICAL</code> and <code>NA_STRING</code>.  These and
<code>NA_REAL</code> can be used to set elements of @R{} vectors to <code>NA</code>.
</p>
<p>The constants <code>R_NaN</code>, <code>R_PosInf</code>, <code>R_NegInf</code> and
<code>R_NaReal</code> can be used to set <code>double</code>s to the special values.
</p>
<hr size="6">
<a name="Evaluating-R-expressions-from-C"></a>
<a name="SEC101"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC100" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC102" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 5.11 Evaluating R expressions from C </h2>

<p>We noted that the <code>call_R</code> interface could be used to evaluate @R{}
expressions from C code, but the current interfaces are much more
convenient to use.  The main function we will use is
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">SEXP eval(SEXP expr, SEXP rho);
</pre></td></tr></tbody></table>

<p>the equivalent of the interpreted @R{} code <code>eval(expr, envir =
rho)</code>, although we can also make use of <code>findVar</code>, <code>defineVar</code>
and <code>findFun</code> (which restricts the search to functions).
</p>
<p>To see how this might be applied, here is a simplified internal version
of <code>lapply</code> for expressions, used as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">a &lt;- list(a = 1:5, b = rnorm(10), test = runif(100))
.Call("lapply", a, quote(sum(x)), new.env())
</pre></td></tr></tbody></table>

<p>with C code
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">SEXP lapply(SEXP list, SEXP expr, SEXP rho)
{
  R_len_t i, n = length(list);
  SEXP ans;

  if(!isNewList(list)) error("'list' must be a list");
  if(!isEnvironment(rho)) error("'rho' should be an environment");
  PROTECT(ans = allocVector(VECSXP, n));
  for(i = 0; i &lt; n; i++) {
    defineVar(install("x"), VECTOR_ELT(list, i), rho);
    SET_VECTOR_ELT(ans, i, eval(expr, rho));
  }
  setAttrib(ans, R_NamesSymbol, getAttrib(list, R_NamesSymbol));
  UNPROTECT(1);
  return(ans);
}
</pre></td></tr></tbody></table>
<p>It would be closer to <code>lapply</code> if we could pass in a function
rather than an expression.  One way to do this is <em>via</em> interpreted
@R{} code as in the next example, but it is possible (if somewhat
obscure) to do this in C code.  The following is based on the code in
<tt>`src/main/optimize.c'</tt>.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">SEXP lapply2(SEXP list, SEXP fn, SEXP rho)
{
  R_len_t i, n = length(list);
  SEXP R_fcall, ans;

  if(!isNewList(list)) error("'list' must be a list");
  if(!isFunction(fn)) error("'fn' must be a function");
  if(!isEnvironment(rho)) error("'rho' should be an environment");
  PROTECT(R_fcall = lang2(fn, R_NilValue));
  PROTECT(ans = allocVector(VECSXP, n));
  for(i = 0; i &lt; n; i++) {
    SETCADR(R_fcall, VECTOR_ELT(list, i));
    SET_VECTOR_ELT(ans, i, eval(R_fcall, rho));
  }
  setAttrib(ans, R_NamesSymbol, getAttrib(list, R_NamesSymbol));
  UNPROTECT(2);
  return(ans);
}
</pre></td></tr></tbody></table>

<p>used by
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">.Call("lapply2", a, sum, new.env())
</pre></td></tr></tbody></table>

<p>Function <code>lang2</code> creates an executable pairlist of two elements, but
this will only be clear to those with a knowledge of a LISP-like
language.
</p>
<p>As a more comprehensive example of constructing an @R{} call in C code
and evaluating, consider the following fragment of
<code>printAttributes</code> in <tt>`src/main/print.c'</tt>.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">    /* Need to construct a call to
       print(CAR(a), digits=digits)
       based on the R_print structure, then eval(call, env).
       See do_docall for the template for this sort of thing.
    */
    SEXP s, t;
    PROTECT(t = s = allocList(3));
    SET_TYPEOF(s, LANGSXP);
    SETCAR(t, install("print")); t = CDR(t);
    SETCAR(t,  CAR(a)); t = CDR(t);
    SETCAR(t, ScalarInteger(digits));
    SET_TAG(t, install("digits"));
    eval(s, env);
    UNPROTECT(1);
</pre></td></tr></tbody></table>

<p>At this point <code>CAR(a)</code> is the @R{} object to be printed, the
current attribute.  There are three steps: the call is constructed as
a pairlist of length 3, the list is filled in, and the expression
represented by the pairlist is evaluated.
</p>
<p>A pairlist is quite distinct from a generic vector list, the only
user-visible form of list in @R{}.  A pairlist is a linked list (with
<code>CDR(t)</code> computing the next entry), with items (accessed by
<code>CAR(t)</code>) and names or tags (set by <code>SET_TAG</code>).  In this call
there are to be three items, a symbol (pointing to the function to be
called) and two argument values, the first unnamed and the second named.
Setting the type to <code>LANGSXP</code> makes this a call which can be evaluated.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC102">5.11.1 Zero-finding</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC103">5.11.2 Calculating numerical derivatives</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
</tbody></table>

<hr size="6">
<a name="Zero_002dfinding"></a>
<a name="SEC102"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC101" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC103" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC101" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 5.11.1 Zero-finding </h3>

<p>In this section we re-work the example of <code>call_S</code> in Becker,
Chambers &amp; Wilks (1988) on finding a zero of a univariate function,
The @R{} code and an example are
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">zero &lt;- function(f, guesses, tol = 1e-7) {
  f.check &lt;- function(x) {
    x &lt;- f(x)
    if(!is.numeric(x)) stop("Need a numeric result")
    as.double(x)
  }
  .Call("zero", body(f.check), as.double(guesses), as.double(tol),
        new.env())
}

cube1 &lt;- function(x) (x^2 + 1) * (x - 1.5)
zero(cube1, c(0, 5))
</pre></td></tr></tbody></table>

<p>where this time we do the coercion and error-checking in the @R{} code.
The C code is
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">SEXP mkans(double x)
{
    SEXP ans;
    PROTECT(ans = allocVector(REALSXP, 1));
    REAL(ans)[0] = x;
    UNPROTECT(1);
    return ans;
}

double feval(double x, SEXP f, SEXP rho)
{
    defineVar(install("x"), mkans(x), rho);
    return(REAL(eval(f, rho))[0]);
}

SEXP zero(SEXP f, SEXP guesses, SEXP stol, SEXP rho)
{
    double x0 = REAL(guesses)[0], x1 = REAL(guesses)[1],
           tol = REAL(stol)[0];
    double f0, f1, fc, xc;

    if(tol &lt;= 0.0) error("non-positive tol value");
    f0 = feval(x0, f, rho); f1 = feval(x1, f, rho);
    if(f0 == 0.0) return mkans(x0);
    if(f1 == 0.0) return mkans(x1);
    if(f0*f1 &gt; 0.0) error("x[0] and x[1] have the same sign");

    for(;;) {
        xc = 0.5*(x0+x1);
        if(fabs(x0-x1) &lt; tol) return  mkans(xc);
        fc = feval(xc, f, rho);
        if(fc == 0) return  mkans(xc);
        if(f0*fc &gt; 0.0) {
            x0 = xc; f0 = fc;
        } else {
            x1 = xc; f1 = fc;
        }
    }
}
</pre></td></tr></tbody></table>

<p>The C code is essentially unchanged from the <code>call_R</code> version, just
using a couple of functions to convert from <code>double</code> to <code>SEXP</code>
and to evaluate <code>f.check</code>.
</p>
<hr size="6">
<a name="Calculating-numerical-derivatives"></a>
<a name="SEC103"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC102" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC104" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC101" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 5.11.2 Calculating numerical derivatives </h3>

<p>We will use a longer example (by Saikat DebRoy) to illustrate the use of
evaluation and <code>.External</code>.  This calculates numerical derivatives,
something that could be done as effectively in interpreted @R{} code but
may be needed as part of a larger C calculation.
</p>
<p>An interpreted @R{} version and an example are
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">numeric.deriv &lt;- function(expr, theta, rho=sys.frame(sys.parent()))
{
  eps &lt;- sqrt(.Machine$double.eps)
  ans &lt;- eval(substitute(expr), rho)
  grad &lt;- matrix(,length(ans), length(theta),
                 dimnames=list(NULL, theta))
  for (i in seq(along=theta)) {
    old &lt;- get(theta[i], envir=rho)
    delta &lt;- eps * min(1, abs(old))
    assign(theta[i], old+delta, envir=rho)
    ans1 &lt;- eval(substitute(expr), rho)
    assign(theta[i], old, envir=rho)
    grad[, i] &lt;- (ans1 - ans)/delta
  }
  attr(ans, "gradient") &lt;- grad
  ans
}
omega &lt;- 1:5; x &lt;- 1; y &lt;- 2
numeric.deriv(sin(omega*x*y), c("x", "y"))
</pre></td></tr></tbody></table>

<p>where <code>expr</code> is an expression, <code>theta</code> a character vector of
variable names and <code>rho</code> the environment to be used.
</p>
<p>For the compiled version the call from @R{} will be
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">.External("numeric_deriv", <var>expr</var>, <var>theta</var>, <var>rho</var>)
</pre></td></tr></tbody></table>

<p>with example usage
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">.External("numeric_deriv", quote(sin(omega*x*y)),
          c("x", "y"), .GlobalEnv)
</pre></td></tr></tbody></table>

<p>Note the need to quote the expression to stop it being evaluated.
</p>
<p>Here is the complete C code which we will explain section by section.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R.h&gt; /* for DOUBLE_EPS */
#include &lt;Rinternals.h&gt;

SEXP numeric_deriv(SEXP args)
{
  SEXP theta, expr, rho, ans, ans1, gradient, par, dimnames;
  double tt, xx, delta, eps = sqrt(DOUBLE_EPS), *rgr, *rans;
  int start, i, j;

  expr = CADR(args);
  if(!isString(theta = CADDR(args)))
    error("theta should be of type character");
  if(!isEnvironment(rho = CADDDR(args)))
    error("rho should be an environment");

  PROTECT(ans = coerceVector(eval(expr, rho), REALSXP));
  PROTECT(gradient = allocMatrix(REALSXP, LENGTH(ans), LENGTH(theta)));
  rgr = REAL(gradient); rans = REAL(ans);

  for(i = 0, start = 0; i &lt; LENGTH(theta); i++, start += LENGTH(ans)) {
    PROTECT(par = findVar(install(CHAR(STRING_ELT(theta, i))), rho));
    tt = REAL(par)[0];
    xx = fabs(tt);
    delta = (xx &lt; 1) ? eps : xx*eps;
    REAL(par)[0] += delta;
    PROTECT(ans1 = coerceVector(eval(expr, rho), REALSXP));
    for(j = 0; j &lt; LENGTH(ans); j++)
      rgr[j + start] = (REAL(ans1)[j] - rans[j])/delta;
    REAL(par)[0] = tt;
    UNPROTECT(2); /* par, ans1 */
  }

  PROTECT(dimnames = allocVector(VECSXP, 2));
  SET_VECTOR_ELT(dimnames, 1,  theta);
  dimnamesgets(gradient, dimnames);
  setAttrib(ans, install("gradient"), gradient);
  UNPROTECT(3); /* ans  gradient  dimnames */
  return ans;
}
</pre></td></tr></tbody></table>
<p>The code to handle the arguments is
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">  expr = CADR(args);
  if(!isString(theta = CADDR(args)))
    error("theta should be of type character");
  if(!isEnvironment(rho = CADDDR(args)))
    error("rho should be an environment");
</pre></td></tr></tbody></table>

<p>Note that we check for correct types of <code>theta</code> and <code>rho</code> but
do not check the type of <code>expr</code>.  That is because <code>eval</code> can
handle many types of @R{} objects other than <code>EXPRSXP</code>.  There is
no useful coercion we can do, so we stop with an error message if the
arguments are not of the correct mode.
</p>
<p>The first step in the code is to evaluate the expression in the
environment <code>rho</code>, by
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">  PROTECT(ans = coerceVector(eval(expr, rho), REALSXP));
</pre></td></tr></tbody></table>

<p>We then allocate space for the calculated derivative by
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">  PROTECT(gradient = allocMatrix(REALSXP, LENGTH(ans), LENGTH(theta)));
</pre></td></tr></tbody></table>

<p>The first argument to <code>allocMatrix</code> gives the <code>SEXPTYPE</code> of
the matrix: here we want it to be <code>REALSXP</code>.  The other two
arguments are the numbers of rows and columns.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">  for(i = 0, start = 0; i &lt; LENGTH(theta); i++, start += LENGTH(ans)) {
    PROTECT(par = findVar(install(CHAR(STRING_ELT(theta, i))), rho));
</pre></td></tr></tbody></table>

<p>Here, we are entering a for loop.  We loop through each of the
variables.  In the <code>for</code> loop, we first create a symbol
corresponding to the <code>i</code>'th element of the <code>STRSXP</code>
<code>theta</code>.  Here, <code>STRING_ELT(theta, i)</code> accesses the
<code>i</code>'th element of the <code>STRSXP</code> <code>theta</code>.  Macro
<code>CHAR()</code> extracts the actual character
representation<a name="DOCF29" href="#FOOT29">(29)</a> of it: it returns a pointer.  We then
install the name and use <code>findVar</code> to find its value.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">    tt = REAL(par)[0];
    xx = fabs(tt);
    delta = (xx &lt; 1) ? eps : xx*eps;
    REAL(par)[0] += delta;
    PROTECT(ans1 = coerceVector(eval(expr, rho), REALSXP));
</pre></td></tr></tbody></table>

<p>We first extract the real value of the parameter, then calculate
<code>delta</code>, the increment to be used for approximating the numerical
derivative.  Then we change the value stored in <code>par</code> (in
environment <code>rho</code>) by <code>delta</code> and evaluate <code>expr</code> in
environment <code>rho</code> again.  Because we are directly dealing with
original @R{} memory locations here, @R{} does the evaluation for the
changed parameter value.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">    for(j = 0; j &lt; LENGTH(ans); j++)
      rgr[j + start] = (REAL(ans1)[j] - rans[j])/delta;
    REAL(par)[0] = tt;
    UNPROTECT(2);
  }
</pre></td></tr></tbody></table>

<p>Now, we compute the <code>i</code>'th column of the gradient matrix.  Note how
it is accessed: @R{} stores matrices by column (like FORTRAN).
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">  PROTECT(dimnames = allocVector(VECSXP, 2));
  SET_VECTOR_ELT(dimnames, 1, theta);
  dimnamesgets(gradient, dimnames);
  setAttrib(ans, install("gradient"), gradient);
  UNPROTECT(3);
  return ans;
}
</pre></td></tr></tbody></table>

<p>First we add column names to the gradient matrix.  This is done by
allocating a list (a <code>VECSXP</code>) whose first element, the row names,
is <code>NULL</code> (the default) and the second element, the column names,
is set as <code>theta</code>.  This list is then assigned as the attribute
having the symbol <code>R_DimNamesSymbol</code>.  Finally we set the gradient
matrix as the gradient attribute of <code>ans</code>, unprotect the remaining
protected locations and return the answer <code>ans</code>.
</p>
<hr size="6">
<a name="Parsing-R-code-from-C"></a>
<a name="SEC104"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC103" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC105" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 5.12 Parsing R code from C </h2>

<p>Suppose an @R{} extension want to accept an @R{} expression from the
user and evaluate it.  The previous section covered evaluation, but the
expression will be entered as text and needs to be parsed first.  A
small part of @R{}'s parse interface is declared in header file
<tt>`R_ext/Parse.h'</tt><a name="DOCF30" href="#FOOT30">(30)</a>.
</p>
<p>An example of the usage can be found in the (example) Windows package
@pkg{windlgs} included in the @R{} source tree.  The essential part is
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;
#include &lt;R_ext/Parse.h&gt;

SEXP menu_ttest3()
{
    char cmd[256];
    SEXP cmdSexp, cmdexpr, ans = R_NilValue;
    int i;
    ParseStatus status;
   ...
    if(done == 1) {
        PROTECT(cmdSexp = allocVector(STRSXP, 1));
        SET_STRING_ELT(cmdSexp, 0, mkChar(cmd));
        cmdexpr = PROTECT(R_ParseVector(cmdSexp, -1, &amp;status, R_NilValue));
        if (status != PARSE_OK) {
            UNPROTECT(2);
            error("invalid call %s", cmd);
        }
        /* Loop is needed here as EXPSEXP will be of length &gt; 1 */
        for(i = 0; i &lt; length(cmdexpr); i++)
            ans = eval(VECTOR_ELT(cmdexpr, i), R_GlobalEnv);
        UNPROTECT(2);
    }
    return ans;
}
</pre></td></tr></tbody></table>
<p>Note that a single line of text may give rise to more than one @R{}
expression.
</p>
<a name="IDX127"></a>
<p><code>R_ParseVector</code> is essentially the code used to implement
<code>parse(text=)</code> at @R{} level.  The first argument is a character
vector (corresponding to <code>text</code>) and the second the maximal number
of expressions to parse (corresponding to <code>n</code>).  The third argument
is a pointer to a variable of an enumeration type, and it is normal (as
<code>parse</code> does) to regard all values other than <code>PARSE_OK</code> as an
error.  Other values which might be returned are <code>PARSE_INCOMPLETE</code>
(an incomplete expression was found) and <code>PARSE_ERROR</code> (a syntax
error), in both cases the value returned being <code>R_NilValue</code>.
The fourth argument is a <code>srcfile</code> object or the @R{} <code>NULL</code>
object (as in the example above). In the former case a <code>srcref</code>
attribute would be attached to the result, containing a list of
<code>srcref</code> objects of the same length as the expression, to allow it to be
echoed with its original formatting.
</p>
<hr size="6">
<a name="External-pointers-and-weak-references"></a>
<a name="SEC105"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC104" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC106" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 5.13 External pointers and weak references </h2>

<p>The <code>SEXPTYPE</code>s <code>EXTPTRSXP</code> and <code>WEAKREFSXP</code> can be
encountered at @R{} level, but are created in C code.
</p>
<a name="IDX128"></a>
<p>External pointer <code>SEXP</code>s are intended to handle references to C
structures such as `handles', and are used for this purpose in package
@pkg{RODBC} for example.  They are unusual in their copying semantics in
that when an @R{} object is copied, the external pointer object is not
duplicated.  (For this reason external pointers should only be used as
part of an object with normal semantics, for example an attribute or an
element of a list.)
</p>
<p>An external pointer is created by
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">SEXP R_MakeExternalPtr(void *p, SEXP tag, SEXP prot);
</pre></td></tr></tbody></table>

<p>where <code>p</code> is the pointer (and hence this cannot portably be a
function pointer), and <code>tag</code> and <code>prot</code> are references to
ordinary R objects which will remain in existence (be protected from
garbage collection) for the lifetime of the external pointer object.
A useful convention is to use the <code>tag</code> field for some form of
type identification and the <code>prot</code> field for protecting the
memory that the external pointer represents, if that memory is
allocated from the R heap.  Both <code>tag</code> and <code>prot</code> can be
<code>R_NilValue</code>, and often are.
</p>
<p>The elements of an external pointer can be accessed and set <em>via</em>
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void *R_ExternalPtrAddr(SEXP s);
SEXP R_ExternalPtrTag(SEXP s);
SEXP R_ExternalPtrProtected(SEXP s);
void R_ClearExternalPtr(SEXP s);
void R_SetExternalPtrAddr(SEXP s, void *p);
void R_SetExternalPtrTag(SEXP s, SEXP tag);
void R_SetExternalPtrProtected(SEXP s, SEXP p);
</pre></td></tr></tbody></table>

<p>Clearing a pointer sets its value to the C <code>NULL</code> pointer.
</p>
<a name="IDX129"></a>
<p>An external pointer object can have a <em>finalizer</em>, a piece of code
to be run when the object is garbage collected.  This can be @R{} code
or C code, and the various interfaces are
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void R_RegisterFinalizer(SEXP s, SEXP fun);
void R_RegisterFinalizerEx(SEXP s, SEXP fun, Rboolean onexit);

typedef void (*R_CFinalizer_t)(SEXP);
void R_RegisterCFinalizer(SEXP s, R_CFinalizer_t fun);
void R_RegisterCFinalizerEx(SEXP s, R_CFinalizer_t fun, Rboolean onexit);
</pre></td></tr></tbody></table>

<p>The @R{} function indicated by <code>fun</code> should be a function of a
single argument, the object to be finalized.  @R{} does not perform a
garbage collection when shutting down, and the <code>onexit</code> argument of
the extended forms can be used to ask that the finalizer be run during a
normal shutdown of the @R{} session.  It is suggested that it is good
practice to clear the pointer on finalization.
</p>
<p>The only @R{} level function for interacting with external pointers is
<code>reg.finalizer</code> which can be used to set a finalizer.
</p>
<p>It is probably not a good idea to allow an external pointer to be
<code>save</code>d and then reloaded, but if this happens the pointer will be
set to the C <code>NULL</code> pointer.
</p>

<a name="IDX130"></a>
<p>Weak references are used to allow the programmer to maintain information
on entities without preventing the garbage collection of the entities
once they become unreachable.
</p>
<p>A weak reference contains a key and a value.  The value is reachable is
if it either reachable directly or via weak references with reachable
keys.  Once a value is determined to be unreachable during garbage
collection, the key and value are set to <code>R_NilValue</code> and the
finalizer will be run later in the garbage collection.
</p>
<p>Weak reference objects are created by one of
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">SEXP R_MakeWeakRef(SEXP key, SEXP val, SEXP fin, Rboolean onexit);
SEXP R_MakeWeakRefC(SEXP key, SEXP val, R_CFinalizer_t fin,
                    Rboolean onexit);
</pre></td></tr></tbody></table>

<p>where the @R{} or C finalizer are specified in exactly the same way as
for an external pointer object (whose finalization interface is
implemented via weak references).
</p>
<p>The parts can be accessed <em>via</em>
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">SEXP R_WeakRefKey(SEXP w);
SEXP R_WeakRefValue(SEXP w);
void R_RunWeakRefFinalizer(SEXP w);
</pre></td></tr></tbody></table>
<p>A toy example of the use of weak references can be found at
<a href="http://www.stat.uiowa.edu/~luke/R/references/weakfinex.html"><code>www.stat.uiowa.edu/~luke/R/references/weakfinex.html</code></a>,
but that is used to add finalizers to external pointers which can now be
done more directly.
</p>

<hr size="6">
<a name="Vector-accessor-functions"></a>
<a name="SEC106"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC105" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC107" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 5.14 Vector accessor functions </h2>

<p>The vector accessors like <code>REAL</code> and <code>INTEGER</code> and
<code>VECTOR_ELT</code> are <em>functions</em> when used in @R{} extensions.
(For efficiency they are macros when used in the @R{} source code, apart
from <code>SET_STRING_ELT</code> and <code>SET_VECTOR_ELT</code> which are always
functions.)
</p>
<p>The accessor functions check that they are being used on an appropriate
type of <code>SEXP</code>.  By default a certain amount of misuse is allowed
where the internal representation is the same: for example
<code>LOGICAL</code> can be used on a <code>INTSXP</code> and <code>SET_VECTOR_ELT</code>
on a <code>STRSXP</code>.  Strict checking can be enabled by compiling @R{}
(specifically <tt>`src/main/memory.c'</tt>) with
<samp>`USE_TYPE_CHECKING_STRICT'</samp> defined (e.g. in as the configure
variable <samp>`DEFS'</samp> on a Unix-alike).
</p>
<p>If efficiency is essential, the macro versions of the accessors can be 
obtained by defining <samp>`USE_RINTERNALS'</samp> before including
<tt>`Rinternals.h'</tt>.  If you find it necessary to do so, please do test
that your code compiled without <samp>`USE_RINTERNALS'</samp> defined, as this
provides a stricter test that the accessors have been used correctly.
</p>
<hr size="6">
<a name="Character-encoding-issues"></a>
<a name="SEC107"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC106" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC75" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 5.15 Character encoding issues </h2>

<p>As from @R{} 2.5.0 <code>CHARSXP</code>s can be marked as coming from a known
encoding (Latin-1 or UTF-8).  This is mainly intended for human-readable
output, and most packages can just treat such <code>CHARSXP</code>s as a
whole.  However, if they need to be interpreted as characters or output
at C level then it would normally be correct to ensure that they are
converted to the encoding of the current locale: this can be done by
accessing the data in the <code>CHARSXP</code> by <code>translateChar</code> rather
than by <code>CHAR</code>.  If re-encoding is needed this allocates memory
with <code>R_alloc</code> which thus persists to the end of the
<code>.Call</code>/<code>.External</code> call unless <code>vmaxset</code> is used.
</p>
<p>As from @R{} 2.7.0 there is a similar function <code>translateCharUTF8</code>
which converts to UTF-8: this has the advantage that a faithful
translation is almost always possible (whereas only a few languages can
be represented in the encoding of the current locale unless that is
UTF-8).
</p>
<p>@R{} can be built without <code>iconv</code> (although this is very much
discouraged) in which case these functions exist but do no translation:
such a build of @R{} is in any case not suitable for handling
non-<acronym>ASCII</acronym> data.
</p>
<a name="IDX131"></a>
<a name="IDX132"></a>
<p>As from @R{} 2.7.0 there is a public interface to the encoding marked on
<code>CHARXSXPs</code> <em>via</em>
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">typedef enum {CE_NATIVE, CE_UTF8, CE_LATIN1, CE_SYMBOL, CE_ANY} cetype_t;
cetype_t getCharCE(SEXP);
SEXP mkCharCE(const char *, cetype_t);
</pre></td></tr></tbody></table>

<p>Only the <code>CE_UTF8</code> and <code>CE_LATIN1</code> are marked on
<code>CHARSXPs</code> (and so <code>Rf_getCharCE</code> will only return one of the
first three), and these should only be used on non-<acronym>ASCII</acronym>
strings.  Value <code>CE_SYMBOL</code> is used internally to indicate Adobe
Symbol encoding.  Value <code>CE_ANY</code> is used to indicate a character
string that will not need re-encoding - this is used for character
strings known to be in <acronym>ASCII</acronym>, and can also be used as an input
parameter where the intention is that the string is treated as a series
of bytes.
</p>
<p>Function
</p>
<a name="IDX133"></a>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">const char *reEnc(const char *x, cetype_t ce_in, cetype_t ce_out,
                  int subst);
</pre></td></tr></tbody></table>

<p>can be used to re-encode character strings: like <code>translateChar</code> it
returns a string allocated by <code>R_alloc</code>.  This can translate from
<code>CE_SYMBOL</code> to <code>CE_UTF8</code>, but not conversely.  Argument
<code>subst</code> controls what to do with untranslatable characters or
invalid input: this is done byte-by-byte with <code>1</code> indicates to
output hex of the form <code>&lt;a0&gt;</code>, and <code>2</code> to replace by <code>.</code>,
with any other value causing the byte to produce no output.
</p>
<a name="IDX134"></a>
<p>@R{} 2.8.0 added
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">SEXP mkCharLenCE(const char *, int, cetype_t);
</pre></td></tr></tbody></table>

<p>to create marked character strings of a given length.
</p>

<hr size="6">
<a name="The-R-API"></a>
<a name="SEC108"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC107" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC109" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC75" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h1 class="chapter"> 6. The R <acronym>API</acronym>: entry points for C code </h1>

<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC109">6.1 Memory allocation</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">           
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC112">6.2 Error handling</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">              
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC114">6.3 Random number generation</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">              
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC115">6.4 Missing and <acronym>IEEE</acronym> special values</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">     
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC116">6.5 Printing</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                    
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC118">6.6 Calling C from FORTRAN and vice versa</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC119">6.7 Numerical analysis subroutines</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC124">6.8 Optimization</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC125">6.9 Integration</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                 
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC126">6.10 Utility functions</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">           
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC127">6.11 Re-encoding</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                 
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC128">6.12 Allowing interrupts</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">         
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC129">6.13 Platform and version information</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC130">6.14 Inlining C functions</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">        
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC131">6.15 Controlling visibility</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">      
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC132">6.16 Using these functions in your own C code</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">          
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC133">6.17 Organization of header files</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
</tbody></table>

<p>There are a large number of entry points in the @R{} executable/DLL that
can be called from C code (and some that can be called from FORTRAN
code).  Only those documented here are stable enough that they will only
be changed with considerable notice.
</p>
<p>The recommended procedure to use these is to include the header file
<tt>`R.h'</tt> in your C code by
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R.h&gt;
</pre></td></tr></tbody></table>

<p>This will include several other header files from the directory
<tt>`<var>R_INCLUDE_DIR</var>/R_ext'</tt>, and there are other header files
there that can be included too, but many of the features they contain
should be regarded as undocumented and unstable.
</p>
<p>An alternative is to include the header file <tt>`S.h'</tt>, which may be
useful when porting code from @Sl{}.  This includes rather less than
<tt>`R.h'</tt>, and has extra some compatibility definitions (for example
the <code>S_complex</code> type from @Sl{}).
</p>
<p>The defines used for compatibility with @Sl{} sometimes causes
conflicts (notably with Windows headers), and the known
problematic defines can be removed by defining <code>STRICT_R_HEADERS</code>.
</p>
<p>Most of these header files, including all those included by <tt>`R.h'</tt>,
can be used from C++ code.  Some others need to be included within an
<code>extern "C"</code> declaration, and for clarity this is advisable for all
@R{} header files.
</p>
<blockquote><p><b> Note:</b> Because @R{} re-maps many of its external names to avoid clashes with
user code, it is <em>essential</em> to include the appropriate header
files when using these entry points.
</p></blockquote>

<p>This remapping can cause problems<a name="DOCF31" href="#FOOT31">(31)</a>, and can
be eliminated by defining <code>R_NO_REMAP</code> and prepending <samp>`Rf_'</samp> to
<em>all</em> the function names used from <tt>`Rinternals.h'</tt> and
<tt>`R_ext/Error.h'</tt>.
</p>
<p>We can classify the entry points as
</p>
<dl compact="compact">
<dt> <em>API</em></dt>
<dd><p>Entry points which are documented in this manual and declared in an
installed header file.  These can be used in distributed packages and
will only be changed after deprecation.
</p>
</dd>
<dt> <em>public</em></dt>
<dd><p>Entry points declared in an installed header file that are exported
on all @R{} platforms but are not documented and subject to change
without notice.
</p>
</dd>
<dt> <em>private</em></dt>
<dd><p>Entry points that are used when building @R{} and exported on all @R{}
platforms but are not declared in the installed header files.
Do not use these in distributed code.
</p>
</dd>
<dt> <em>hidden</em></dt>
<dd><p>Entry points that are where possible (Windows and some modern Unix
compilers/loaders when using @R{} as a shared library) not exported.
</p></dd>
</dl>

<hr size="6">
<a name="Memory-allocation"></a>
<a name="SEC109"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC108" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC110" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 6.1 Memory allocation </h2>

<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC110">6.1.1 Transient storage allocation</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                   
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC111">6.1.2 User-controlled memory</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">             
</td></tr>
</tbody></table>

<p>There are two types of memory allocation available to the C programmer,
one in which @R{} manages the clean-up and the other in which user
has full control (and responsibility).
</p>
<hr size="6">
<a name="Transient"></a>
<a name="SEC110"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC109" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC111" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC109" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 6.1.1 Transient storage allocation </h3>

<p>Here @R{} will reclaim the memory at the end of the call to <code>.C</code>.
Use
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">char *R_alloc(size_t <var>n</var>, int <var>size</var>)
</pre></td></tr></tbody></table>

<p>which allocates <var>n</var> units of <var>size</var> bytes each.  A typical usage
(from package @pkg{stats}) is
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">x = (int *) R_alloc(nrows(merge)+2, sizeof(int));
</pre></td></tr></tbody></table>

<p>(<code>size_t</code> is defined in <tt>`stddef.h'</tt> which the header defining
<code>R_alloc</code> includes.)
</p>
<p>There is a similar call, <code>S_alloc</code> (for compatibility with older
versions of @Sl{}) which zeroes the memory allocated,
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">char *S_alloc(long <var>n</var>, int <var>size</var>)
</pre></td></tr></tbody></table>

<p>and
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">char *S_realloc(char *<var>p</var>, long <var>new</var>, long <var>old</var>, int <var>size</var>)
</pre></td></tr></tbody></table>

<p>which changes the allocation size from <var>old</var> to <var>new</var> units, and
zeroes the additional units.
</p>
<p>For compatibility with current versions of @Sl{}, header <tt>`S.h'</tt>
(only) defines wrapper macros equivalent to
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">type* Salloc(long <var>n</var>, int <var>type</var>)
type* Srealloc(char *<var>p</var>, long <var>new</var>, long <var>old</var>, int <var>type</var>)
</pre></td></tr></tbody></table>
<p>This memory is taken from the heap, and released at the end of the
<code>.C</code>, <code>.Call</code> or <code>.External</code> call.  Users can also manage
it, by noting the current position with a call to <code>vmaxget</code> and
clearing memory allocated subsequently by a call to <code>vmaxset</code>.
This is only recommended for experts.
</p>
<p>Note that this memory will be freed on error or user interrupt
(if allowed: see section <a href="#SEC128">Allowing interrupts</a>).
</p>
<p>Note that although <var>n</var> is <code>long</code>, there are limits imposed by
@R{}'s internal allocation mechanism.  These will only come into play on
64-bit systems, where the current limit for <var>n</var> is just under 16Gb.
</p>
<hr size="6">
<a name="User_002dcontrolled"></a>
<a name="SEC111"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC110" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC112" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC109" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 6.1.2 User-controlled memory </h3>

<p>The other form of memory allocation is an interface to <code>malloc</code>,
the interface providing @R{} error handling.  This memory lasts until
freed by the user and is additional to the memory allocated for the @R{}
workspace.
</p>
<p>The interface functions are
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example"><var>type</var>* Calloc(size_t <var>n</var>, <var>type</var>)
<var>type</var>* Realloc(<var>any</var> *<var>p</var>, size_t <var>n</var>, <var>type</var>)
void Free(<var>any</var> *<var>p</var>)
</pre></td></tr></tbody></table>

<p>providing analogues of <code>calloc</code>, <code>realloc</code> and <code>free</code>.
If there is an error during allocation it is handled by @R{}, so if
these routines return the memory has been successfully allocated or
freed.  <code>Free</code> will set the pointer <var>p</var> to <code>NULL</code>.  (Some
but not all versions of @Sl{} do so.)
</p>
<p>Users should arrange to <code>Free</code> this memory when no longer needed,
including on error or user interrupt.  This can often be done most
conveniently from an <code>on.exit</code> action in the calling @R{} function
- see <code>pwilcox</code> for an example.
</p>
<p>Do not assume that memory allocated by <code>Calloc</code>/<code>Realloc</code>
comes from the same pool as used by <code>malloc</code>: in particular do not
use <code>free</code> or <code>strdup</code> with it.
</p>
<p>These entry points need to be prefixed by <code>R_</code> if
<code>STRICT_R_HEADERS</code> has been defined.
</p>

<hr size="6">
<a name="Error-handling"></a>
<a name="SEC112"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC111" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC113" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 6.2 Error handling </h2>

<p>The basic error handling routines are the equivalents of <code>stop</code> and
<code>warning</code> in @R{} code, and use the same interface.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void error(const char * <var>format</var>, ...);
void warning(const char * <var>format</var>, ...);
</pre></td></tr></tbody></table>

<p>These have the same call sequences as calls to <code>printf</code>, but in the
simplest case can be called with a single character string argument
giving the error message. (Don't do this if the string contains <samp>`%'</samp>
or might otherwise be interpreted as a format.)
</p>
<p>If <code>STRICT_R_HEADERS</code> is not defined there is also an
@Sl{}-compatibility interface which uses calls of the form
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">PROBLEM ...... ERROR
MESSAGE ...... WARN
PROBLEM ...... RECOVER(NULL_ENTRY)
MESSAGE ...... WARNING(NULL_ENTRY)
</pre></td></tr></tbody></table>

<p>the last two being the forms available in all @Sl{} versions.  Here
<samp>`......'</samp> is a set of arguments to <code>printf</code>, so can be a string
or a format string followed by arguments separated by commas.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC113">6.2.1 Error handling from FORTRAN</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
</tbody></table>

<hr size="6">
<a name="Error-handling-from-FORTRAN"></a>
<a name="SEC113"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC112" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC114" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC112" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 6.2.1 Error handling from FORTRAN </h3>

<p>There are two interface function provided to call <code>error</code> and
<code>warning</code> from FORTRAN code, in each case with a simple character
string argument.  They are defined as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">subroutine rexit(<var>message</var>)
subroutine rwarn(<var>message</var>)
</pre></td></tr></tbody></table>
<p>Messages of more than 255 characters are truncated, with a warning.
</p>

<hr size="6">
<a name="Random-numbers"></a>
<a name="SEC114"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC113" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC115" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 6.3 Random number generation </h2>

<p>The interface to @R{}'s internal random number generation routines is
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">double unif_rand();
double norm_rand();
double exp_rand();
</pre></td></tr></tbody></table>

<p>giving one uniform, normal or exponential pseudo-random variate.
However, before these are used, the user must call
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">GetRNGstate();
</pre></td></tr></tbody></table>

<p>and after all the required variates have been generated, call
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">PutRNGstate();
</pre></td></tr></tbody></table>

<p>These essentially read in (or create) <code>.Random.seed</code> and write it
out after use.
</p>
<p>File <tt>`S.h'</tt> defines <code>seed_in</code> and <code>seed_out</code> for
@Sl{}-compatibility rather than <code>GetRNGstate</code> and
<code>PutRNGstate</code>.  These take a <code>long *</code> argument which is
ignored.
</p>
<p>The random number generator is private to @R{}; there is no way to
select the kind of RNG or set the seed except by evaluating calls to the
@R{} functions.
</p>
<p>The C code behind @R{}'s <code>r<var>xxx</var></code> functions can be accessed by
including the header file <tt>`Rmath.h'</tt>; See section <a href="#SEC120">Distribution functions</a>.  Those calls generate a single variate and should also be
enclosed in calls to <code>GetRNGstate</code> and <code>PutRNGstate</code>.
</p>

<p>In addition, there is an interface (defined in header
<tt>`R_ext/Applic.h'</tt>) to the generation of random 2-dimensional tables
with given row and column totals using Patefield's algorithm.
</p>
<dl>
<dt><u>Function:</u> void <b>rcont2</b><i> (int* <var>nrow</var>, int* <var>ncol</var>, int* <var>nrowt</var>, int* <var>ncolt</var>, int* <var>ntotal</var>, double* <var>fact</var>, int* <var>jwork</var>, int* <var>matrix</var>)</i>
<a name="IDX135"></a>
</dt>
<dd><p>Here, <var>nrow</var> and <var>ncol</var> give the numbers <em>nr</em> and <em>nc</em>
of rows and columns and <var>nrowt</var> and <var>ncolt</var> the corresponding
row and column totals, respectively, <var>ntotal</var> gives the sum of the
row (or columns) totals, <var>jwork</var> is a workspace of length <em>nc</em>,
and on output <var>matrix</var> a contains the <em>nr * nc</em> generated
random counts in the usual column-major order.
</p></dd></dl>

<hr size="6">
<a name="Missing-and-IEEE-values"></a>
<a name="SEC115"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC114" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC116" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 6.4 Missing and <acronym>IEEE</acronym> special values </h2>

<p>A set of functions is provided to test for <code>NA</code>, <code>Inf</code>,
<code>-Inf</code> and <code>NaN</code>.  These functions are accessed via macros:
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">ISNA(<var>x</var>)        True for R's <code>NA</code> only
ISNAN(<var>x</var>)       True for R's <code>NA</code> and <acronym>IEEE</acronym> <code>NaN</code>
R_FINITE(<var>x</var>)    False for <code>Inf</code>, <code>-Inf</code>, <code>NA</code>, <code>NaN</code>
</pre></td></tr></tbody></table>

<p>and via function <code>R_IsNaN</code> which is true for <code>NaN</code> but not
<code>NA</code>.
</p>
<p>Do use <code>R_FINITE</code> rather than <code>isfinite</code> or <code>finite</code>; the
latter is often mendacious and <code>isfinite</code> is only available on a
few platforms, on which <code>R_FINITE</code> is a macro expanding to
<code>isfinite</code>.
</p>
<p>Currently in C code <code>ISNAN</code> is a macro calling <code>isnan</code>.
(Since this gives problems on some C++ systems, if the @R{} headers is
called from C++ code a function call is used.)
</p>
<p>You can check for <code>Inf</code> or <code>-Inf</code> by testing equality to
<code>R_PosInf</code> or <code>R_NegInf</code>, and set (but not test) an <code>NA</code>
as <code>NA_REAL</code>.
</p>
<p>All of the above apply to <em>double</em> variables only.  For integer
variables there is a variable accessed by the macro <code>NA_INTEGER</code>
which can used to set or test for missingness.
</p>

<hr size="6">
<a name="Printing"></a>
<a name="SEC116"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC115" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC117" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 6.5 Printing </h2>

<p>The most useful function for printing from a C routine compiled into
@R{} is <code>Rprintf</code>.  This is used in exactly the same way as
<code>printf</code>, but is guaranteed to write to @R{}'s output (which might
be a <acronym>GUI</acronym> console rather than a file).  It is wise to write
complete lines (including the <code>"\n"</code>) before returning to @R{}.
</p>
<p>The function <code>REprintf</code> is similar but writes on the error stream
(<code>stderr</code>) which may or may not be different from the standard
output stream.  Functions <code>Rvprintf</code> and <code>REvprintf</code> are
analogues using the <code>vprintf</code> interface.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC117">6.5.1 Printing from FORTRAN</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">       
</td></tr>
</tbody></table>

<hr size="6">
<a name="Printing-from-FORTRAN"></a>
<a name="SEC117"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC116" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC118" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC116" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 6.5.1 Printing from FORTRAN </h3>

<p>On many systems FORTRAN <code>write</code> and <code>print</code> statements can be
used, but the output may not interleave well with that of C, and will be
invisible on <acronym>GUI</acronym> interfaces.  They are not portable and best
avoided.
</p>
<p>Three subroutines are provided to ease the output of information from
FORTRAN code.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">subroutine dblepr(<var>label</var>, <var>nchar</var>, <var>data</var>, <var>ndata</var>)
subroutine realpr(<var>label</var>, <var>nchar</var>, <var>data</var>, <var>ndata</var>)
subroutine intpr (<var>label</var>, <var>nchar</var>, <var>data</var>, <var>ndata</var>)
</pre></td></tr></tbody></table>

<p>Here <var>label</var> is a character label of up to 255 characters,
<var>nchar</var> is its length (which can be <code>-1</code> if the whole label is
to be used), and <var>data</var> is an array of length at least <var>ndata</var>
of the appropriate type (<code>double precision</code>, <code>real</code> and
<code>integer</code> respectively).  These routines print the label on one
line and then print <var>data</var> as if it were an @R{} vector on
subsequent line(s).  They work with zero <var>ndata</var>, and so can be used
to print a label alone.
</p>
<hr size="6">
<a name="Calling-C-from-FORTRAN-and-vice-versa"></a>
<a name="SEC118"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC117" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC119" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 6.6 Calling C from FORTRAN and vice versa </h2>

<p>Naming conventions for symbols generated by FORTRAN differ by platform:
it is not safe to assume that FORTRAN names appear to C with a trailing
underscore.  To help cover up the platform-specific differences there is
a set of macros that should be used.
</p>
<dl compact="compact">
<dt> <code>F77_SUB(<var>name</var>)</code></dt>
<dd><p>to define a function in C to be called from FORTRAN
</p></dd>
<dt> <code>F77_NAME(<var>name</var>)</code></dt>
<dd><p>to declare a FORTRAN routine in C before use
</p></dd>
<dt> <code>F77_CALL(<var>name</var>)</code></dt>
<dd><p>to call a FORTRAN routine from C
</p></dd>
<dt> <code>F77_COMDECL(<var>name</var>)</code></dt>
<dd><p>to declare a FORTRAN common block in C
</p></dd>
<dt> <code>F77_COM(<var>name</var>)</code></dt>
<dd><p>to access a FORTRAN common block from C
</p></dd>
</dl>

<p>On most current platforms these are all the same, but it is unwise to
rely on this.  Note that names with underscores are not legal in FORTRAN
77, and are not portably handled by the above macros.  (Also, all
FORTRAN names for use by @R{} are lower case, but this is not enforced
by the macros.)
</p>
<p>For example, suppose we want to call R's normal random numbers from
FORTRAN.  We need a C wrapper along the lines of
</p>
<a name="IDX136"></a>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R.h&gt;

void F77_SUB(rndstart)(void) { GetRNGstate(); }
void F77_SUB(rndend)(void) { PutRNGstate(); }
double F77_SUB(normrnd)(void) { return norm_rand(); }
</pre></td></tr></tbody></table>

<p>to be called from FORTRAN as in
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">      subroutine testit()
      double precision normrnd, x
      call rndstart()
      x = normrnd()
      call dblepr("X was", 5, x, 1)
      call rndend()
      end
</pre></td></tr></tbody></table>

<p>Note that this is not guaranteed to be portable, for the return
conventions might not be compatible between the C and FORTRAN compilers
used.  (Passing values via arguments is safer.)
</p>
<p>The standard packages, for example @pkg{stats}, are a rich source of
further examples.
</p>


<hr size="6">
<a name="Numerical-analysis-subroutines"></a>
<a name="SEC119"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC118" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC120" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 6.7 Numerical analysis subroutines </h2>

<p>@R{} contains a large number of mathematical functions for its own use,
for example numerical linear algebra computations and special functions.
</p>
<p>The header files <tt>`R_ext/BLAS.h'</tt>, <tt>`R_ext/Lapack.h'</tt> and
<tt>`R_ext/Linpack.h'</tt> contains declarations of the BLAS, LAPACK and
LINPACK/EISPACK linear algebra functions included in @R{}.  These
are expressed as calls to FORTRAN subroutines, and they will also be
usable from users' FORTRAN code.  Although not part of the official
<acronym>API</acronym>, this set of subroutines is unlikely to change (but might
be supplemented).
</p>
<p>The header file <tt>`Rmath.h'</tt> lists many other functions that are
available and documented in the following subsections. Many of these are
C interfaces to the code behind @R{} functions, so the @R{} function
documentation may give further details.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC120">6.7.1 Distribution functions</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">      
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC121">6.7.2 Mathematical functions</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">      
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC122">6.7.3 Numerical Utilities</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">         
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC123">6.7.4 Mathematical constants</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">      
</td></tr>
</tbody></table>

<hr size="6">
<a name="Distribution-functions"></a>
<a name="SEC120"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC119" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC121" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC119" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 6.7.1 Distribution functions </h3>

<p>The routines used to calculate densities, cumulative distribution
functions and quantile functions for the standard statistical
distributions are available as entry points.
</p>
<p>The arguments for the entry points follow the pattern of those for the
normal distribution:
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">double dnorm(double <var>x</var>, double <var>mu</var>, double <var>sigma</var>, int <var>give_log</var>);
double pnorm(double <var>x</var>, double <var>mu</var>, double <var>sigma</var>, int <var>lower_tail</var>,
             int <var>give_log</var>);
double qnorm(double <var>p</var>, double <var>mu</var>, double <var>sigma</var>, int <var>lower_tail</var>,
             int <var>log_p</var>);
double rnorm(double <var>mu</var>, double <var>sigma</var>);
</pre></td></tr></tbody></table>

<p>That is, the first argument gives the position for the density and CDF
and probability for the quantile function, followed by the
distribution's parameters.  Argument <var>lower_tail</var> should be
<code>TRUE</code> (or <code>1</code>) for normal use, but can be <code>FALSE</code> (or
<code>0</code>) if the probability of the upper tail is desired or specified.
</p>
<p>Finally, <var>give_log</var> should be non-zero if the result is required on
log scale, and <var>log_p</var> should be non-zero if <var>p</var> has been
specified on log scale.
</p>
<p>Note that you directly get the cumulative (or "integrated")
<em>hazard</em> function, @eqn{H(t) = - \log(1 - F(t)), H(t) = - log(1 -
F(t))}, by using
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">- p<var>dist</var>(t, ..., /*lower_tail = */ FALSE, /* give_log = */ TRUE)
</pre></td></tr></tbody></table>

<p>or shorter (and more cryptic) <code>- p<var>dist</var>(t, ..., 0, 1)</code>.
<a name="IDX137"></a>
</p>
<p>The random-variate generation routine <code>rnorm</code> returns one normal
variate. See section <a href="#SEC114">Random number generation</a>, for the protocol in using the
random-variate routines.
<a name="IDX138"></a>
</p>
<p>Note that these argument sequences are (apart from the names and that
<code>rnorm</code> has no <var>n</var>) mainly the same as the corresponding @R{}
functions of the same name, so the documentation of the @R{} functions
can be used.  Note that the exponential and gamma distributions are
parametrized by <code>scale</code> rather than <code>rate</code>.
</p>

<p>For reference, the following table gives the basic name (to be prefixed
by <samp>`d'</samp>, <samp>`p'</samp>, <samp>`q'</samp> or <samp>`r'</samp> apart from the exceptions
noted) and distribution-specific arguments for the complete set of
distributions.
</p>
<blockquote><table>
<tbody><tr><td><p> beta </p></td><td><p> <code>beta</code> </p></td><td><p> <code>a</code>, <code>b</code>
</p></td></tr>
<tr><td><p> non-central beta </p></td><td><p> <code>nbeta</code> </p></td><td><p> <code>a</code>, <code>b</code>, <code>ncp</code>
</p></td></tr>
<tr><td><p> binomial </p></td><td><p> <code>binom</code> </p></td><td><p> <code>n</code>, <code>p</code>
</p></td></tr>
<tr><td><p> Cauchy </p></td><td><p> <code>cauchy</code> </p></td><td><p> <code>location</code>, <code>scale</code>
</p></td></tr>
<tr><td><p> chi-squared </p></td><td><p> <code>chisq</code> </p></td><td><p> <code>df</code>
</p></td></tr>
<tr><td><p> non-central chi-squared </p></td><td><p> <code>nchisq</code> </p></td><td><p> <code>df</code>, <code>ncp</code>
</p></td></tr>
<tr><td><p> exponential </p></td><td><p> <code>exp</code> </p></td><td><p> <code>scale</code> (and <strong>not</strong> <code>rate</code>)
</p></td></tr>
<tr><td><p> F </p></td><td><p> <code>f</code> </p></td><td><p> <code>n1</code>, <code>n2</code>
</p></td></tr>
<tr><td><p> non-central F </p></td><td><p> <code>nf</code> </p></td><td><p> <code>n1</code>, <code>n2</code>, <code>ncp</code>
</p></td></tr>
<tr><td><p> gamma </p></td><td><p> <code>gamma</code> </p></td><td><p> <code>shape</code>, <code>scale</code>
</p></td></tr>
<tr><td><p> geometric </p></td><td><p> <code>geom</code> </p></td><td><p> <code>p</code>
</p></td></tr>
<tr><td><p> hypergeometric </p></td><td><p> <code>hyper</code> </p></td><td><p> <code>NR</code>, <code>NB</code>, <code>n</code>
</p></td></tr>
<tr><td><p> logistic </p></td><td><p> <code>logis</code> </p></td><td><p> <code>location</code>, <code>scale</code>
</p></td></tr>
<tr><td><p> lognormal </p></td><td><p> <code>lnorm</code> </p></td><td><p> <code>logmean</code>, <code>logsd</code>
</p></td></tr>
<tr><td><p> negative binomial </p></td><td><p> <code>nbinom</code> </p></td><td><p> <code>size</code>, <code>prob</code>
</p></td></tr>
<tr><td><p> normal </p></td><td><p> <code>norm</code> </p></td><td><p> <code>mu</code>, <code>sigma</code>
</p></td></tr>
<tr><td><p> Poisson </p></td><td><p> <code>pois</code> </p></td><td><p> <code>lambda</code>
</p></td></tr>
<tr><td><p> Student's t </p></td><td><p> <code>t</code> </p></td><td><p> <code>n</code>
</p></td></tr>
<tr><td><p> non-central t </p></td><td><p> <code>nt</code> </p></td><td><p> <code>df</code>, <code>delta</code>
</p></td></tr>
<tr><td><p> Studentized range </p></td><td><p> <code>tukey</code> (*) </p></td><td><p> <code>rr</code>, <code>cc</code>, <code>df</code>
</p></td></tr>
<tr><td><p> uniform </p></td><td><p> <code>unif</code> </p></td><td><p> <code>a</code>, <code>b</code>
</p></td></tr>
<tr><td><p> Weibull </p></td><td><p> <code>weibull</code> </p></td><td><p> <code>shape</code>, <code>scale</code>
</p></td></tr>
<tr><td><p> Wilcoxon rank sum </p></td><td><p> <code>wilcox</code> </p></td><td><p> <code>m</code>, <code>n</code>
</p></td></tr>
<tr><td><p> Wilcoxon signed rank </p></td><td><p> <code>signrank</code> </p></td><td><p> <code>n</code>
</p></td></tr>
</tbody></table>
</blockquote>


<p>Entries marked with an asterisk only have <samp>`p'</samp> and <samp>`q'</samp>
functions available, and none of the non-central distributions have
<samp>`r'</samp> functions.  After a call to <code>dwilcox</code>, <code>pwilcox</code> or
<code>qwilcox</code> the function <code>wilcox_free()</code> should be called, and
similarly for the signed rank functions.
</p>
<hr size="6">
<a name="Mathematical-functions"></a>
<a name="SEC121"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC120" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC122" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC119" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 6.7.2 Mathematical functions </h3>

<dl>
<dt><u>Function:</u> double <b>gammafn</b><i> (double <var>x</var>)</i>
<a name="IDX139"></a>
</dt>
<dt><u>Function:</u> double <b>lgammafn</b><i> (double <var>x</var>)</i>
<a name="IDX140"></a>
</dt>
<dt><u>Function:</u> double <b>digamma</b><i> (double <var>x</var>)</i>
<a name="IDX141"></a>
</dt>
<dt><u>Function:</u> double <b>trigamma</b><i> (double <var>x</var>)</i>
<a name="IDX142"></a>
</dt>
<dt><u>Function:</u> double <b>tetragamma</b><i> (double <var>x</var>)</i>
<a name="IDX143"></a>
</dt>
<dt><u>Function:</u> double <b>pentagamma</b><i> (double <var>x</var>)</i>
<a name="IDX144"></a>
</dt>
<dt><u>Function:</u> double <b>psigamma</b><i> (double <var>x</var>, double <var>deriv</var>)</i>
<a name="IDX145"></a>
</dt>
<dd><p>The Gamma function, the natural logarithm of its absolute value and
first four derivatives and the n-th derivative of Psi, the digamma
function.
</p></dd></dl>

<a name="IDX146"></a>
<a name="IDX147"></a>
<a name="IDX148"></a>
<dl>
<dt><u>Function:</u> double <b>beta</b><i> (double <var>a</var>, double <var>b</var>)</i>
<a name="IDX149"></a>
</dt>
<dt><u>Function:</u> double <b>lbeta</b><i> (double <var>a</var>, double <var>b</var>)</i>
<a name="IDX150"></a>
</dt>
<dd><p>The (complete) Beta function and its natural logarithm.
</p></dd></dl>

<a name="IDX151"></a>
<a name="IDX152"></a>
<dl>
<dt><u>Function:</u> double <b>choose</b><i> (double <var>n</var>, double <var>k</var>)</i>
<a name="IDX153"></a>
</dt>
<dt><u>Function:</u> double <b>lchoose</b><i> (double <var>n</var>, double <var>k</var>)</i>
<a name="IDX154"></a>
</dt>
<dd><p>The number of combinations of <var>k</var> items chosen from from <var>n</var> and
its natural logarithm.  <var>k</var> is rounded to the nearest integer (with
a warning if needed).
</p></dd></dl>

<a name="IDX155"></a>
<a name="IDX156"></a>
<a name="IDX157"></a>
<a name="IDX158"></a>
<a name="IDX159"></a>
<dl>
<dt><u>Function:</u> double <b>bessel_i</b><i> (double <var>x</var>, double <var>nu</var>, double <var>expo</var>)</i>
<a name="IDX160"></a>
</dt>
<dt><u>Function:</u> double <b>bessel_j</b><i> (double <var>x</var>, double <var>nu</var>)</i>
<a name="IDX161"></a>
</dt>
<dt><u>Function:</u> double <b>bessel_k</b><i> (double <var>x</var>, double <var>nu</var>, double <var>expo</var>)</i>
<a name="IDX162"></a>
</dt>
<dt><u>Function:</u> double <b>bessel_y</b><i> (double <var>x</var>, double <var>nu</var>)</i>
<a name="IDX163"></a>
</dt>
<dd><p>Bessel functions of types I, J, K and Y with index <var>nu</var>.  For
<code>bessel_i</code> and <code>bessel_k</code> there is the option to return
exp(-<var>x</var>) I(<var>x</var>; <var>nu</var>) or exp(<var>x</var>) K(<var>x</var>;
<var>nu</var>) if <var>expo</var> is 2. (Use <code><var>expo</var> == 1</code> for unscaled
values.)
</p></dd></dl>


<hr size="6">
<a name="Numerical-Utilities"></a>
<a name="SEC122"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC121" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC123" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC119" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 6.7.3 Numerical Utilities </h3>
<p>There are a few other numerical utility functions available as entry points.
</p>

<dl>
<dt><u>Function:</u> double <b>R_pow</b><i> (double <var>x</var>, double <var>y</var>)</i>
<a name="IDX164"></a>
</dt>
<dt><u>Function:</u> double <b>R_pow_di</b><i> (double <var>x</var>, int <var>i</var>)</i>
<a name="IDX165"></a>
</dt>
<dd><p><code>R_pow(<var>x</var>, <var>y</var>)</code> and <code>R_pow_di(<var>x</var>, <var>i</var>)</code>
compute <code><var>x</var>^<var>y</var></code> and <code><var>x</var>^<var>i</var></code>, respectively
using <code>R_FINITE</code> checks and returning the proper result (the same
as @R{}) for the cases where <var>x</var>, <var>y</var> or <var>i</var> are 0 or
missing or infinite or <code>NaN</code>.
</p></dd></dl>

<dl>
<dt><u>Function:</u> double <b>pythag</b><i> (double <var>a</var>, double <var>b</var>)</i>
<a name="IDX166"></a>
</dt>
<dd><p><code>pythag(<var>a</var>, <var>b</var>)</code> computes <code>sqrt(<var>a</var>^2 +
<var>b</var>^2)</code> without overflow or destructive underflow: for example it
still works when both <var>a</var> and <var>b</var> are between <code>1e200</code> and
<code>1e300</code> (in <acronym>IEEE</acronym> double precision).
</p></dd></dl>

<dl>
<dt><u>Function:</u> double <b>log1p</b><i> (double <var>x</var>)</i>
<a name="IDX167"></a>
</dt>
<dd><p>Computes <code>log(1 + <var>x</var>)</code> (<em>log 1 <b>p</b>lus x</em>), accurately
even for small <var>x</var>, i.e., @eqn{|x| \ll 1, |x| &lt;&lt; 1}.
</p>
<p>This may be provided by your platform, in which case it is not included
in <tt>`Rmath.h'</tt>, but is (probably) in <tt>`math.h'</tt> which
<tt>`Rmath.h'</tt> includes.  For backwards compatibility with @R{} versions
prior to 1.5.0, the entry point <code>Rf_log1p</code> is still provided.
</p></dd></dl>

<dl>
<dt><u>Function:</u> double <b>log1pmx</b><i> (double <var>x</var>)</i>
<a name="IDX168"></a>
</dt>
<dd><p>Computes <code>log(1 + <var>x</var>) - <var>x</var></code> (<em>log 1 <b>p</b>lus x <b>m</b>inus <b>x</b></em>),
accurately even for small <var>x</var>, i.e., @eqn{|x| \ll 1, |x| &lt;&lt; 1}.
</p></dd></dl>

<dl>
<dt><u>Function:</u> double <b>expm1</b><i> (double <var>x</var>)</i>
<a name="IDX169"></a>
</dt>
<dd><p>Computes <code>exp(<var>x</var>) - 1</code> (<em>exp x <b>m</b>inus 1</em>), accurately
even for small <var>x</var>, i.e., @eqn{|x| \ll 1, |x| &lt;&lt; 1}.
</p>
<p>This may be provided by your platform, in which case it is not included
in <tt>`Rmath.h'</tt>, but is (probably) in <tt>`math.h'</tt> which
<tt>`Rmath.h'</tt> includes.
</p></dd></dl>

<dl>
<dt><u>Function:</u> double <b>lgamma1p</b><i> (double <var>x</var>)</i>
<a name="IDX170"></a>
</dt>
<dd><p>Computes <code>log(gamma(<var>x</var> + 1))</code> (<em>log(gamma(1 <b>p</b>lus x))</em>),
accurately even for small <var>x</var>, i.e., @eqn{0 &lt; x &lt; 0.5, 0 &lt; x &lt; 0.5}.
</p></dd></dl>

<dl>
<dt><u>Function:</u> double <b>logspace_add</b><i> (double <var>logx</var>, double <var>logy</var>)</i>
<a name="IDX171"></a>
</dt>
<dt><u>Function:</u> double <b>logspace_sub</b><i> (double <var>logx</var>, double <var>logy</var>)</i>
<a name="IDX172"></a>
</dt>
<dd><p>Compute the log of a sum or difference from logs of terms, i.e.,
"x + y" as <code>log (exp(<var>logx</var>) + exp(<var>logy</var>))</code> and
"x - y" as <code>log (exp(<var>logx</var>) - exp(<var>logy</var>))</code>,
without causing overflows or throwing away too much accuracy.
</p></dd></dl>

<dl>
<dt><u>Function:</u> int <b>imax2</b><i> (int <var>x</var>, int <var>y</var>)</i>
<a name="IDX173"></a>
</dt>
<dt><u>Function:</u> int <b>imin2</b><i> (int <var>x</var>, int <var>y</var>)</i>
<a name="IDX174"></a>
</dt>
<dt><u>Function:</u> double <b>fmax2</b><i> (double <var>x</var>, double <var>y</var>)</i>
<a name="IDX175"></a>
</dt>
<dt><u>Function:</u> double <b>fmin2</b><i> (double <var>x</var>, double <var>y</var>)</i>
<a name="IDX176"></a>
</dt>
<dd><p>Return the larger (<code>max</code>) or smaller (<code>min</code>) of two integer or
double numbers, respectively.
</p></dd></dl>

<dl>
<dt><u>Function:</u> double <b>sign</b><i> (double <var>x</var>)</i>
<a name="IDX177"></a>
</dt>
<dd><p>Compute the <em>signum</em> function, where sign(<var>x</var>) is 1, 0, or
<em>-1</em>, when <var>x</var> is positive, 0, or negative, respectively.
</p></dd></dl>

<dl>
<dt><u>Function:</u> double <b>fsign</b><i> (double <var>x</var>, double <var>y</var>)</i>
<a name="IDX178"></a>
</dt>
<dd><p>Performs "transfer of sign" and is defined as @eqn{|x| *
\hbox{sign}(y), |x| * sign(y).
</p></dd></dl>

<dl>
<dt><u>Function:</u> double <b>fprec</b><i> (double <var>x</var>, double <var>digits</var>)</i>
<a name="IDX179"></a>
</dt>
<dd><p>Returns the value of <var>x</var> rounded to <var>digits</var> decimal digits
(after the decimal point).
</p>
<p>This is the function used by @R{}'s <code>round()</code>.
</p></dd></dl>

<dl>
<dt><u>Function:</u> double <b>fround</b><i> (double <var>x</var>, double <var>digits</var>)</i>
<a name="IDX180"></a>
</dt>
<dd><p>Returns the value of <var>x</var> rounded to <var>digits</var> <em>significant</em>
decimal digits.
</p>
<p>This is the function used by @R{}'s <code>signif()</code>.
</p></dd></dl>

<dl>
<dt><u>Function:</u> double <b>ftrunc</b><i> (double <var>x</var>)</i>
<a name="IDX181"></a>
</dt>
<dd><p>Returns the value of <var>x</var> truncated (to an integer value) towards zero.
</p></dd></dl>

<hr size="6">
<a name="Mathematical-constants"></a>
<a name="SEC123"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC122" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC124" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC119" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 6.7.4 Mathematical constants </h3>

<p>@R{} has a set of commonly used mathematical constants encompassing
constants usually found <tt>`math.h'</tt> and contains further ones that are
used in statistical computations.  All these are defined to (at least)
30 digits accuracy in <tt>`Rmath.h'</tt>.  The following definitions
use <code>ln(x)</code> for the natural logarithm (<code>log(x)</code> in @R{}).
</p>
<blockquote><table>
<thead><tr><th><p> Name </p></th><th><p> Definition (<code>ln = log</code>) </p></th><th><p> round(<em>value</em>, 7)
</p></th></tr></thead>
<tbody><tr><td><p> <code>M_E</code> </p></td><td><p> <em>e</em> </p></td><td><p> 2.7182818
</p></td></tr>
<tr><td><p> <code>M_LOG2E</code> </p></td><td><p> log2(<em>e</em>) </p></td><td><p> 1.4426950
</p></td></tr>
<tr><td><p> <code>M_LOG10E</code> </p></td><td><p> log10(<em>e</em>) </p></td><td><p> 0.4342945
</p></td></tr>
<tr><td><p> <code>M_LN2</code> </p></td><td><p> ln(2) </p></td><td><p> 0.6931472
</p></td></tr>
<tr><td><p> <code>M_LN10</code> </p></td><td><p> ln(10) </p></td><td><p> 2.3025851
</p></td></tr>
<tr><td><p> <code>M_PI</code> </p></td><td><p> @eqn{\pi, pi}   </p></td><td><p> 3.1415927
</p></td></tr>
<tr><td><p> <code>M_PI_2</code> </p></td><td><p> @eqn{\pi/2, pi/2} </p></td><td><p> 1.5707963
</p></td></tr>
<tr><td><p> <code>M_PI_4</code> </p></td><td><p> @eqn{\pi/4, pi/4} </p></td><td><p> 0.7853982
</p></td></tr>
<tr><td><p> <code>M_1_PI</code> </p></td><td><p> @eqn{1/\pi, 1/pi} </p></td><td><p> 0.3183099
</p></td></tr>
<tr><td><p> <code>M_2_PI</code> </p></td><td><p> @eqn{2/\pi, 2/pi} </p></td><td><p> 0.6366198
</p></td></tr>
<tr><td><p> <code>M_2_SQRTPI</code> </p></td><td><p> 2/sqrt(@eqn{\pi, pi}) </p></td><td><p> 1.1283792
</p></td></tr>
<tr><td><p> <code>M_SQRT2</code> </p></td><td><p> sqrt(2) </p></td><td><p> 1.4142136
</p></td></tr>
<tr><td><p> <code>M_SQRT1_2</code> </p></td><td><p> 1/sqrt(2) </p></td><td><p> 0.7071068
</p></td></tr>
<tr><td><p> <code>M_SQRT_3</code> </p></td><td><p> sqrt(3) </p></td><td><p> 1.7320508
</p></td></tr>
<tr><td><p> <code>M_SQRT_32</code> </p></td><td><p> sqrt(32) </p></td><td><p> 5.6568542
</p></td></tr>
<tr><td><p> <code>M_LOG10_2</code> </p></td><td><p> log10(2) </p></td><td><p> 0.3010300
</p></td></tr>
<tr><td><p> <code>M_2PI</code> </p></td><td><p> @eqn{2\pi, 2*pi} </p></td><td><p> 6.2831853
</p></td></tr>
<tr><td><p> <code>M_SQRT_PI</code> </p></td><td><p> sqrt(@eqn{\pi, pi}) </p></td><td><p> 1.7724539
</p></td></tr>
<tr><td><p> <code>M_1_SQRT_2PI</code> </p></td><td><p> 1/sqrt(@eqn{2\pi, 2*pi}) </p></td><td><p> 0.3989423
</p></td></tr>
<tr><td><p> <code>M_SQRT_2dPI</code> </p></td><td><p> sqrt(2/@eqn{\pi, pi}) </p></td><td><p> 0.7978846
</p></td></tr>
<tr><td><p> <code>M_LN_SQRT_PI</code> </p></td><td><p> ln(sqrt(@eqn{\pi, pi})) </p></td><td><p> 0.5723649
</p></td></tr>
<tr><td><p> <code>M_LN_SQRT_2PI</code> </p></td><td><p> ln(sqrt(@eqn{2\pi, 2*pi})) </p></td><td><p> 0.9189385
</p></td></tr>
<tr><td><p> <code>M_LN_SQRT_PId2</code> </p></td><td><p> ln(sqrt(@eqn{\pi, pi}/2)) </p></td><td><p> 0.2257914
</p></td></tr>
</tbody></table>
</blockquote>

<p>There are a set of constants (<code>PI</code>, <code>DOUBLE_EPS</code>) (and so on)
defined (unless <code>STRICT_R_HEADERS</code> is defined) in the included
header <tt>`R_ext/Constants.h'</tt>, mainly for compatibility with @Sl{}.
</p>
<a name="IDX182"></a>
<a name="IDX183"></a>
<p>Further, the included header <tt>`R_ext/Boolean.h'</tt> has constants
<code>TRUE</code> and <code>FALSE = 0</code> of type <code>Rboolean</code> in order to
provide a way of using "logical" variables in C consistently.
</p>

<hr size="6">
<a name="Optimization"></a>
<a name="SEC124"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC123" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC125" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 6.8 Optimization </h2>

<p>The C code underlying <code>optim</code> can be accessed directly.  The user
needs to supply a function to compute the function to be minimized, of
the type
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">typedef double optimfn(int n, double *par, void *ex);
</pre></td></tr></tbody></table>

<p>where the first argument is the number of parameters in the second
argument.  The third argument is a pointer passed down from the calling
routine, normally used to carry auxiliary information.
</p>
<p>Some of the methods also require a gradient function
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">typedef void optimgr(int n, double *par, double *gr, void *ex);
</pre></td></tr></tbody></table>

<p>which passes back the gradient in the <code>gr</code> argument.  No function
is provided for finite-differencing, nor for approximating the Hessian
at the result.
</p>
<p>The interfaces (defined in header <tt>`R_ext/Applic.h'</tt>) are
</p>
<ul>
<li> Nelder Mead:
<a name="IDX184"></a>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void nmmin(int n, double *xin, double *x, double *Fmin, optimfn fn,
           int *fail, double abstol, double intol, void *ex,
           double alpha, double beta, double gamma, int trace,
           int *fncount, int maxit);
</pre></td></tr></tbody></table>
</li><li> BFGS:
<a name="IDX185"></a>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void vmmin(int n, double *x, double *Fmin,
           optimfn fn, optimgr gr, int maxit, int trace,
           int *mask, double abstol, double reltol, int nREPORT,
           void *ex, int *fncount, int *grcount, int *fail);
</pre></td></tr></tbody></table>
</li><li> Conjugate gradients:
<a name="IDX186"></a>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void cgmin(int n, double *xin, double *x, double *Fmin,
           optimfn fn, optimgr gr, int *fail, double abstol,
           double intol, void *ex, int type, int trace,
           int *fncount, int *grcount, int maxit);
</pre></td></tr></tbody></table>
</li><li> Limited-memory BFGS with bounds:
<a name="IDX187"></a>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void lbfgsb(int n, int lmm, double *x, double *lower,
            double *upper, int *nbd, double *Fmin, optimfn fn,
            optimgr gr, int *fail, void *ex, double factr,
            double pgtol, int *fncount, int *grcount,
            int maxit, char *msg, int trace, int nREPORT);
</pre></td></tr></tbody></table>
</li><li> Simulated annealing:
<a name="IDX188"></a>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void samin(int n, double *x, double *Fmin, optimfn fn, int maxit,
           int tmax, double temp, int trace, void *ex);
</pre></td></tr></tbody></table>
</li></ul>


<p>Many of the arguments are common to the various methods.  <code>n</code> is
the number of parameters, <code>x</code> or <code>xin</code> is the starting
parameters on entry and <code>x</code> the final parameters on exit, with
final value returned in <code>Fmin</code>.  Most of the other parameters can
be found from the help page for <code>optim</code>: see the source code
<tt>`src/appl/lbfgsb.c'</tt> for the values of <code>nbd</code>, which
specifies which bounds are to be used.
</p>

<hr size="6">
<a name="Integration"></a>
<a name="SEC125"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC124" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC126" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 6.9 Integration </h2>

<p>The C code underlying <code>integrate</code> can be accessed directly.  The
user needs to supply a <em>vectorizing</em> C function to compute the
function to be integrated, of the type
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">typedef void integr_fn(double *x, int n, void *ex);
</pre></td></tr></tbody></table>

<p>where <code>x[]</code> is both input and output and has length <code>n</code>, i.e.,
a C function, say <code>fn</code>, of type <code>integr_fn</code> must basically do
<code>for(i in 1:n) x[i] := f(x[i], ex)</code>.  The vectorization requirement
can be used to speed up the integrand instead of calling it <code>n</code>
times.  Note that in the current implementation built on QUADPACK,
<code>n</code> will be either 15 or 21.  The <code>ex</code> argument is a pointer
passed down from the calling routine, normally used to carry auxiliary
information.
</p>
<p>There are interfaces (defined in header <tt>`R_ext/Applic.h'</tt>) for
definite and for indefinite integrals.  `Indefinite' means that at least
one of the integration boundaries is not finite.
</p>
<ul>
<li> Finite:
<a name="IDX189"></a>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void Rdqags(integr_fn f, void *ex, double *a, double *b,
            double *epsabs, double *epsrel,
            double *result, double *abserr, int *neval, int *ier,
            int *limit, int *lenw, int *last,
            int *iwork, double *work);
</pre></td></tr></tbody></table>
</li><li> Indefinite:
<a name="IDX190"></a>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void Rdqagi(integr_fn f, void *ex, double *bound, int *inf,
            double *epsabs, double *epsrel,
            double *result, double *abserr, int *neval, int *ier,
            int *limit, int *lenw, int *last,
            int *iwork, double *work);
</pre></td></tr></tbody></table>
</li></ul>


<p>Only the 3rd and 4th argument differ for the two integrators; for the
definite integral, using <code>Rdqags</code>, <code>a</code> and <code>b</code> are the
integration interval bounds, whereas for an indefinite integral, using
<code>Rdqagi</code>, <code>bound</code> is the finite bound of the integration (if
the integral is not doubly-infinite) and <code>inf</code> is a code indicating
the kind of integration range,
</p>
<dl compact="compact">
<dt> <code>inf = 1</code></dt>
<dd><p>      corresponds to (bound, +Inf),
</p></dd>
<dt> <code>inf = -1</code></dt>
<dd><p>      corresponds to (-Inf, bound),
</p></dd>
<dt> <code>inf = 2</code></dt>
<dd><p>      corresponds to (-Inf, +Inf),
</p></dd>
</dl>

<p><code>f</code> and <code>ex</code> define the integrand function, see above;
<code>epsabs</code> and <code>epsrel</code> specify the absolute and relative
accuracy requested, <code>result</code>, <code>abserr</code> and <code>last</code> are the
output components <code>value</code>, <code>abs.err</code> and <code>subdivisions</code>
of the @R{} function integrate, where <code>neval</code> gives the number of
integrand function evaluations, and the error code <code>ier</code> is
translated to @R{}'s <code>integrate() $ message</code>, look at that function
definition.  <code>limit</code> corresponds to <code>integrate(...,
subdivisions = *)</code>.  It seems you should always define the two work
arrays and the length of the second one as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">    lenw = 4 * limit;
    iwork =   (int *) R_alloc(limit, sizeof(int));
    work = (double *) R_alloc(lenw,  sizeof(double));
</pre></td></tr></tbody></table>
<p>The comments in the source code in <tt>`src/appl/integrate.c'</tt> give
more details, particularly about reasons for failure (<code>ier &gt;= 1</code>).
</p>

<hr size="6">
<a name="Utility-functions"></a>
<a name="SEC126"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC125" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC127" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 6.10 Utility functions </h2>

<p>@R{} has a fairly comprehensive set of sort routines which are made
available to users' C code.  These are declared in header file
<tt>`R_ext/Utils.h'</tt> (included by <tt>`R.h'</tt>) and include the following.
</p>
<dl>
<dt><u>Function:</u> void <b>R_isort</b><i> (int* <var>x</var>, int <var>n</var>)</i>
<a name="IDX191"></a>
</dt>
<dt><u>Function:</u> void <b>R_rsort</b><i> (double* <var>x</var>, int <var>n</var>)</i>
<a name="IDX192"></a>
</dt>
<dt><u>Function:</u> void <b>R_csort</b><i> (Rcomplex* <var>x</var>, int <var>n</var>)</i>
<a name="IDX193"></a>
</dt>
<dt><u>Function:</u> void <b>rsort_with_index</b><i> (double* <var>x</var>, int* <var>index</var>, int <var>n</var>)</i>
<a name="IDX194"></a>
</dt>
<dd><p>The first three sort integer, real (double) and complex data
respectively.  (Complex numbers are sorted by the real part first then
the imaginary part.)  <code>NA</code>s are sorted last.
</p>
<p><code>rsort_with_index</code> sorts on <var>x</var>, and applies the same
permutation to <var>index</var>.  <code>NA</code>s are sorted last.
</p></dd></dl>

<dl>
<dt><u>Function:</u> void <b>revsort</b><i> (double* <var>x</var>, int* <var>index</var>, int <var>n</var>)</i>
<a name="IDX195"></a>
</dt>
<dd><p>Is similar to <code>rsort_with_index</code> but sorts into decreasing order,
and <code>NA</code>s are not handled.
</p></dd></dl>

<dl>
<dt><u>Function:</u> void <b>iPsort</b><i> (int* <var>x</var>, int <var>n</var>, int <var>k</var>)</i>
<a name="IDX196"></a>
</dt>
<dt><u>Function:</u> void <b>rPsort</b><i> (double* <var>x</var>, int <var>n</var>, int <var>k</var>)</i>
<a name="IDX197"></a>
</dt>
<dt><u>Function:</u> void <b>cPsort</b><i> (Rcomplex* <var>x</var>, int <var>n</var>, int <var>k</var>)</i>
<a name="IDX198"></a>
</dt>
<dd><p>These all provide (very) partial sorting: they permute <var>x</var> so that
<code><var>x</var>[<var>k</var>]</code> is in the correct place with smaller values to
the left, larger ones to the right.
</p></dd></dl>

<dl>
<dt><u>Function:</u> void <b>R_qsort</b><i>   (double *<var>v</var>, int <var>i</var>, int <var>j</var>)</i>
<a name="IDX199"></a>
</dt>
<dt><u>Function:</u> void <b>R_qsort_I</b><i> (double *<var>v</var>, int *<var>I</var>, int <var>i</var>, int <var>j</var>)</i>
<a name="IDX200"></a>
</dt>
<dt><u>Function:</u> void <b>R_qsort_int</b><i>   (int *<var>iv</var>, int <var>i</var>, int <var>j</var>)</i>
<a name="IDX201"></a>
</dt>
<dt><u>Function:</u> void <b>R_qsort_int_I</b><i> (int *<var>iv</var>, int *<var>I</var>, int <var>i</var>, int <var>j</var>)</i>
<a name="IDX202"></a>
</dt>
<dd><p>These routines sort <code><var>v</var>[<var>i</var>:<var>j</var>]</code> or
<code><var>iv</var>[<var>i</var>:<var>j</var>]</code> (using 1-indexing, i.e.,
<code><var>v</var>[1]</code> is the first element) calling the quicksort algorithm
as used by @R{}'s <code>sort(v, method = "quick")</code> and documented on the
help page for the @R{} function <code>sort</code>.  The <code>..._I()</code>
versions also return the <code>sort.index()</code> vector in <code>I</code>.  Note
that the ordering is <em>not</em> stable, so tied values may be permuted.
</p>
<p>Note that <code>NA</code>s are not handled (explicitly) and you should
use different sorting functions if <code>NA</code>s can be present.
</p></dd></dl>

<dl>
<dt><u>Function:</u> subroutine <b>qsort4</b><i> (double precision <var>v</var>, integer <var>indx</var>, integer <var>ii</var>, integer <var>jj</var>)</i>
<a name="IDX203"></a>
</dt>
<dt><u>Function:</u> subroutine <b>qsort3</b><i> (double precision <var>v</var>, integer <var>ii</var>, integer <var>jj</var>)</i>
<a name="IDX204"></a>
</dt>
<dd><p>The FORTRAN interface routines for sorting double precision vectors are
<code>qsort3</code> and <code>qsort4</code>, equivalent to <code>R_qsort</code> and
<code>R_qsort_I</code>, respectively.
</p></dd></dl>

<dl>
<dt><u>Function:</u> void <b>R_max_col</b><i> (double* <var>matrix</var>, int* <var>nr</var>, int* <var>nc</var>, int* <var>maxes</var>, int* <var>ties_meth</var>)</i>
<a name="IDX205"></a>
</dt>
<dd><p>Given the <var>nr</var> by <var>nc</var> matrix <code>matrix</code> in column-major
("FORTRAN")
order, <code>R_max_col()</code> returns in <code><var>maxes</var>[<var>i</var>-1]</code> the
column number of the maximal element in the <var>i</var>-th row (the same as
@R{}'s <code>max.col()</code> function).  In the case of ties (multiple maxima),
<code>*ties_meth</code> is an integer code in <code>1:3</code> determining the method:
1 = "random", 2 = "first" and 3 = "last".
See @R{}'s help page <code>?max.col</code>.
</p></dd></dl>

<dl>
<dt><u>Function:</u> int <b>findInterval</b><i> (double* <var>xt</var>, int <var>n</var>, double <var>x</var>, Rboolean <var>rightmost_closed</var>, Rboolean <var>all_inside</var>, int <var>ilo</var>, int* <var>mflag</var>)</i>
<a name="IDX206"></a>
</dt>
<dd><p>Given the ordered vector <var>xt</var> of length <var>n</var>, return the interval
or index of <var>x</var> in <code><var>xt</var>[]</code>, typically max(<em>i</em>; @eqn{1
\le i \le <var>n</var>, 1 &lt;= i &lt;= <var>n</var>} &amp; <em><var>xt</var>[i]</em> @eqn{\le, &lt;=}
<var>x</var>) where we use 1-indexing as in @R{} and FORTRAN (but not C).  If
<var>rightmost_closed</var> is true, also returns <em><var>n</var>-1</em> if <var>x</var>
equals <em><var>xt</var>[<var>n</var>]</em>.  If <var>all_inside</var> is not 0, the
result is coerced to lie in <code>1:(<var>n</var>-1)</code> even when <var>x</var> is
outside the <var>xt</var>[] range.  On return, <code>*<var>mflag</var></code> equals
<em>-1</em> if <var>x</var> &lt; <var>xt</var>[1], <em>+1</em> if <var>x</var> &gt;=
<var>xt</var>[<var>n</var>], and 0 otherwise.
</p>
<p>The algorithm is particularly fast when <var>ilo</var> is set to the last
result of <code>findInterval()</code> and <var>x</var> is a value of a sequence which
is increasing or decreasing for subsequent calls.
</p>
<p>There is also an <code>F77_CALL(interv)()</code> version of
<code>findInterval()</code> with the same arguments, but all pointers.
</p></dd></dl>

<p>The following two functions do <em>numerical</em> colorspace conversion from
HSV to RGB and back.  Note that all colours must be in [0,1].
</p>
<dl>
<dt><u>Function:</u> void <b>hsv2rgb</b><i> (double <var>h</var>, double <var>s</var>, double <var>v</var>, double *<var>r</var>, double *<var>g</var>, double *<var>b</var>)</i>
<a name="IDX207"></a>
</dt>
</dl>

<dl>
<dt><u>Function:</u> void <b>rgb2hsv</b><i> (double <var>r</var>, double <var>g</var>, double <var>b</var>, double *<var>h</var>, double *<var>s</var>, double *<var>v</var>)</i>
<a name="IDX208"></a>
</dt>
</dl>

<p>A system-independent interface to produce the name of a temporary
file is provided as
</p>
<dl>
<dt><u>Function:</u> char * <b>R_tmpnam</b><i> (const char *<var>prefix</var>)</i>
<a name="IDX209"></a>
</dt>
<dd><p>Return a pathname for a temporary file with name beginning with
<var>prefix</var>.  A <code>NULL</code> prefix is replaced by <code>""</code>.
</p></dd></dl>


<p>There is also the internal function used to expand file names in several
@R{} functions, and called directly by <code>path.expand</code>.
</p>
<dl>
<dt><u>Function:</u> const char * <b>R_ExpandFileName</b><i> (const char *<var>fn</var>)</i>
<a name="IDX210"></a>
</dt>
<dd><p>Expand a path name <var>fn</var> by replacing a leading tilde by the user's
home directory (if defined).  The precise meaning is platform-specific;
it will usually be taken from the environment variable <code>HOME</code> if
this is defined.
</p></dd></dl>

<hr size="6">
<a name="Re_002dencoding"></a>
<a name="SEC127"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC126" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC128" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 6.11 Re-encoding </h2>

<p>@R{} has its own C-level interface to the encoding conversion
capabilities provided by <code>iconv</code>, for the following reasons
</p>
<ul>
<li>
These wrapper routines do error-handling when no usable implementation
of <code>iconv</code> was available at configure time.

</li><li>
Under Windows they arrange to load the <tt>`iconv.dll'</tt> at first use.

</li><li>
There are incompatibilities between the declarations in different
implementations of <code>iconv</code>.

</li></ul>

<p>These are declared in header file <tt>`R_ext/Riconv.h'</tt>.
</p>
<dl>
<dt><u>Function:</u> void <b>*Riconv_open</b><i> (const char *<var>to</var>, const char *<var>from</var>)</i>
<a name="IDX211"></a>
</dt>
</dl>
<p>Set up a pointer to an encoding object to be used to convert between two
encodings: <code>""</code> indicates the current locale.
</p>
<dl>
<dt><u>Function:</u> size_t <b>Riconv</b><i> (void *<var>cd</var>, const char **<var>inbuf</var>, size_t *<var>inbytesleft</var>, char  **<var>outbuf</var>, size_t *<var>outbytesleft</var>)</i>
<a name="IDX212"></a>
</dt>
</dl>
<p>Convert as much as possible of <code>inbuf</code> to <code>outbuf</code>.  Initially
the <code>int</code> variables indicate the number of bytes available in the
buffers, and they are updated (and the <code>char</code> pointers are updated
to point to the next free byte in the buffer).  The return value is the
number of characters converted, or <code>(size_t)-1</code> (beware:
<code>size_t</code> is usually an unsigned type).  It should be safe to assume
that an error condition sets <code>errno</code> to one of <code>E2BIG</code> (the
output buffer is full), <code>EILSEQ</code> (the input cannot be converted,
and might be invalid in the encoding specified) or <code>EINVAL</code> (the
input does not end with a complete multi-byte character).
</p>
<dl>
<dt><u>Function:</u> int <b>Riconv_close</b><i> (void * <var>cd</var>)</i>
<a name="IDX213"></a>
</dt>
</dl>
<p>Free the resources of an encoding object.
</p>

<hr size="6">
<a name="Allowing-interrupts"></a>
<a name="SEC128"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC127" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC129" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 6.12 Allowing interrupts </h2>

<p>No port of @R{} can be interrupted whilst running long computations in
compiled code, so programmers should make provision for the code to be
interrupted at suitable points by calling from C
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R_ext/Utils.h&gt;

void R_CheckUserInterrupt(void);
</pre></td></tr></tbody></table>

<p>and from FORTRAN
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">subroutine rchkusr()
</pre></td></tr></tbody></table>
<p>These check if the user has requested an interrupt, and if so branch to
@R{}'s error handling functions.
</p>
<p>Note that it is possible that the code behind one of the entry points
defined here if called from your C or FORTRAN code could be interruptible
or generate an error and so not return to your code.
</p>

<hr size="6">
<a name="Platform-and-version-information"></a>
<a name="SEC129"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC128" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC130" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 6.13 Platform and version information </h2>

<p>The header files define <code>USING_R</code>, which can be used to test if
the code is indeed being used with @R{}.
</p>
<p>Header file <tt>`Rconfig.h'</tt> (included by <tt>`R.h'</tt>) is used to define
platform-specific macros that are mainly for use in other header files.
The macro <code>WORDS_BIGENDIAN</code> is defined on big-endian systems
(e.g. <code>sparc-sun-solaris2.6</code>) and not on little-endian systems
(such as <code>i686</code> under Linux or Windows). It can be useful when
manipulating binary files.
</p>
<p>Header file <tt>`Rversion.h'</tt> (<strong>not</strong> included by <tt>`R.h'</tt>)
defines a macro <code>R_VERSION</code> giving the version number encoded as an
integer, plus a macro <code>R_Version</code> to do the encoding.  This can be
used to test if the version of @R{} is late enough, or to include
back-compatibility features.  For protection against very old versions
of @R{} which did not have this macro, use a construction such as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#if defined(R_VERSION) &amp;&amp; R_VERSION &gt;= R_Version(1, 9, 0)
  ...
#endif
</pre></td></tr></tbody></table>
<p>More detailed information is available in the macros <code>R_MAJOR</code>,
<code>R_MINOR</code>, <code>R_YEAR</code>, <code>R_MONTH</code> and <code>R_DAY</code>: see the
header file <tt>`Rversion.h'</tt> for their format.  Note that the minor
version includes the patchlevel (as in <samp>`9.0'</samp>).
</p>
<hr size="6">
<a name="Inlining-C-functions"></a>
<a name="SEC130"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC129" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC131" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 6.14 Inlining C functions </h2>

<p>The C99 keyword <code>inline</code> is recognized by some compilers used to
build @R{} whereas others need <code>__inline__</code> or do not support
inlining.  Portable code can be written using the macro <code>R_INLINE</code>
(defined in file <tt>`Rconfig.h'</tt> included by <tt>`R.h'</tt>), as for
example from package @pkg{cluster}
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;R.h&gt;

static R_INLINE int ind_2(int l, int j)
{
...
}
</pre></td></tr></tbody></table>
<p>Be aware that using inlining with functions in more than one compilation
unit is almost impossible to do portably: see
<a href="http://www.greenend.org.uk/rjk/2003/03/inline.html">http://www.greenend.org.uk/rjk/2003/03/inline.html</a>.  All the @R{}
configure code has checked is that <code>R_INLINE</code> can be used in a
single C file with the compiler used to build @R{}.  We recommend that
packages making extensive use of inlining include their own configure code.
</p>
<hr size="6">
<a name="Controlling-visibility"></a>
<a name="SEC131"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC130" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC132" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 6.15 Controlling visibility </h2>

<p>Header <tt>`R_ext/Visibility'</tt> has some definitions for controlling the
visibility of entry points.  These are only effective when
<samp>`HAVE_VISIBILITY_ATTRIBUTE'</samp> is defined - this is checked when @R{}
is configured and recorded in header <tt>`Rconfig.h'</tt> (included by
<tt>`R_ext/Visibility.h'</tt>).  It is generally defined on modern
Unix-alikes with a recent compiler (e.g. <code>gcc4</code>), but not
supported on Windows.  Minimizing the visibility of symbols in a shared
library will both speed up its loading (unlikely to be significant) and
reduce the possibility of linking to the wrong entry points of the same
name.
</p>
<p>C/C++ entry points prefixed by <code>attribute_hidden</code> will not be
visible in the shared object.  There is no comparable mechanism for
FORTRAN entry points, but there is a more comprehensive scheme used by,
for example package @pkg{stats}.  Most compilers which allow control of
visibility will allow control of visibility for all symbols via a flag,
and where known the flag is encapsulated in the macros
<samp>`C_VISIBILITY'</samp> and <code>F77_VISIBILITY</code> for C and FORTRAN
compilers.  These are defined in <tt>`etc/Makeconf'</tt> and so available
for normal compilation of package code.  For example,
<tt>`src/Makevars'</tt> could include
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">PKG_CFLAGS=$(C_VISIBILITY)
PKG_FFLAGS=$(F77_VISIBILITY)
</pre></td></tr></tbody></table>
<p>This would end up with <strong>no</strong> visible entry points, which would be
pointless.  However, the effect of the flags can be overridden by using
the <code>attribute_visible</code> prefix.  A shared object which registers
its entry points needs only for have one visible entry point, its
initializer, so for example package @pkg{stats} has
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void attribute_visible R_init_stats(DllInfo *dll)
{
    R_registerRoutines(dll, CEntries, CallEntries, FortEntries, NULL);
    R_useDynamicSymbols(dll, FALSE);
...
}
</pre></td></tr></tbody></table>
<p>The visibility mechanism is not available on Windows, but there is an
equally effective way to control which entry points are visible, by
supplying a definitions file
<tt>`<var>pkgnme</var>/src/<var>pkgname</var>-win.def'</tt>: only entry points
listed in that file will be visible.  Again using @pkg{stats} as an
example, it has
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">LIBRARY stats.dll
EXPORTS
 R_init_stats
</pre></td></tr></tbody></table>
<hr size="6">
<a name="Standalone-Mathlib"></a>
<a name="SEC132"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC131" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC133" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 6.16 Using these functions in your own C code </h2>

<p>It is possible to build <code>Mathlib</code>, the @R{} set of mathematical
functions documented in <tt>`Rmath.h'</tt>, as a standalone library
<tt>`libRmath'</tt> under both Unix and Windows.  (This includes the
functions documented in <a href="#SEC119">Numerical analysis subroutines</a> as from
that header file.)
</p>
<p>The library is not built automatically when @R{} is installed, but can
be built in the directory <tt>`src/nmath/standalone'</tt> in the @R{}
sources: see the file <tt>`README'</tt> there.  To use the code in your own
C program include
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#define MATHLIB_STANDALONE
#include &lt;Rmath.h&gt;
</pre></td></tr></tbody></table>

<p>and link against <samp>`-lRmath'</samp> (and perhaps <samp>`-lm'</samp>.  There is an
example file <tt>`test.c'</tt>.
</p>
<p>A little care is needed to use the random-number routines. You will
need to supply the uniform random number generator
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">double unif_rand(void)
</pre></td></tr></tbody></table>

<p>or use the one supplied (and with a dynamic library or DLL you will have
to use the one supplied, which is the Marsaglia-multicarry with an entry
points
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">set_seed(unsigned int, unsigned int)
</pre></td></tr></tbody></table>

<p>to set its seeds and
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">get_seed(unsigned int *, unsigned int *)
</pre></td></tr></tbody></table>

<p>to read the seeds).
</p>
<hr size="6">
<a name="Organization-of-header-files"></a>
<a name="SEC133"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC132" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC108" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 6.17 Organization of header files </h2>

<p>The header files which @R{} installs are in directory
<tt>`<var>R_INCLUDE_DIR</var>'</tt> (default <tt>`<var>R_HOME</var>/include'</tt>).  This
currently includes
</p>
<blockquote><table>
<tbody><tr><td><p> <tt>`R.h'</tt> </p></td><td><p> includes many other files
</p></td></tr>
<tr><td><p> <tt>`S.h'</tt> </p></td><td><p> different version for code ported from @Sl{}
</p></td></tr>
<tr><td><p> <tt>`Rinternals.h'</tt> </p></td><td><p> definitions for using @R{}'s internal
structures
</p></td></tr>
<tr><td><p> <tt>`Rdefines.h'</tt> </p></td><td><p> macros for an @Sl{}-like interface to the
above
</p></td></tr>
<tr><td><p> <tt>`Rmath.h'</tt> </p></td><td><p> standalone math library
</p></td></tr>
<tr><td><p> <tt>`Rversion.h'</tt> </p></td><td><p> @R{} version information
</p></td></tr>
<tr><td><p> <tt>`Rinterface.h'</tt> </p></td><td><p> for add-on front-ends (Unix-alikes only)
</p></td></tr>
<tr><td><p> <tt>`Rembedded.h'</tt> </p></td><td><p> for add-on front-ends
</p></td></tr>
<tr><td><p> <tt>`R_ext/Applic.h'</tt> </p></td><td><p> optimization and integration
</p></td></tr>
<tr><td><p> <tt>`R_ext/BLAS.h'</tt> </p></td><td><p> C definitions for BLAS routines
</p></td></tr>
<tr><td><p> <tt>`R_ext/Callbacks.h'</tt> </p></td><td><p> C (and R function) top-level task
handlers
</p></td></tr>
<tr><td><p> <tt>`R_ext/GetX11Image.h'</tt> </p></td><td><p> X11Image interface used by package
@pkg{trkplot}
</p></td></tr>
<tr><td><p> <tt>`R_ext/Lapack.h'</tt> </p></td><td><p> C definitions for some LAPACK routines
</p></td></tr>
<tr><td><p> <tt>`R_ext/Linpack.h'</tt> </p></td><td><p> C definitions for some LINPACK
routines, not all of which are included in @R{}
</p></td></tr>
<tr><td><p> <tt>`R_ext/Parse.h'</tt> </p></td><td><p> a small part of @R{}'s parse interface
</p></td></tr>
<tr><td><p> <tt>`R_ext/RConvertors.h'</tt>
</p></td></tr>
<tr><td><p> <tt>`R_ext/Rdynload.h'</tt> </p></td><td><p> needed to register compiled code in
packages
</p></td></tr>
<tr><td><p> <tt>`R_ext/R-ftp-http.h'</tt> </p></td><td><p> interface to internal method of
<code>download.file</code>
</p></td></tr>
<tr><td><p> <tt>`R_ext/Riconv.h'</tt> </p></td><td><p> interface to <code>iconv</code>
</p></td></tr>
<tr><td><p> <tt>`R_ext/RStartup.h'</tt> </p></td><td><p> for add-on front-ends
</p></td></tr>
<tr><td><p> <tt>`R_ext/Visibility.h'</tt> </p></td><td><p> definitions controlling visibility
</p></td></tr>
<tr><td><p> <tt>`R_ext/eventloop.h'</tt> </p></td><td><p> for add-on front-ends and for
packages that need to share in the @R{} event loops (on all platforms)
</p></td></tr>
</tbody></table>
</blockquote>

<p>The following headers are included by <tt>`R.h'</tt>:
</p>
<blockquote><table>
<tbody><tr><td><p> <tt>`Rconfig.h'</tt> </p></td><td><p> configuration info that is made available
</p></td></tr>
<tr><td><p> <tt>`R_ext/Arith.h'</tt> </p></td><td><p> handling for <code>NA</code>s, <code>NaN</code>s,
<code>Inf</code>/<code>-Inf</code>
</p></td></tr>
<tr><td><p> <tt>`R_ext/Boolean.h'</tt> </p></td><td><p> <code>TRUE</code>/<code>FALSE</code> type
</p></td></tr>
<tr><td><p> <tt>`R_ext/Complex.h'</tt> </p></td><td><p> C typedefs for @R{}'s <code>complex</code>
</p></td></tr>
<tr><td><p> <tt>`R_ext/Constants.h'</tt> </p></td><td><p> constants
</p></td></tr>
<tr><td><p> <tt>`R_ext/Error.h'</tt> </p></td><td><p> error handling
</p></td></tr>
<tr><td><p> <tt>`R_ext/Memory.h'</tt> </p></td><td><p> memory allocation
</p></td></tr>
<tr><td><p> <tt>`R_ext/Print.h'</tt> </p></td><td><p> <code>Rprintf</code> and variations.
</p></td></tr>
<tr><td><p> <tt>`R_ext/Random.h'</tt> </p></td><td><p> random number generation
</p></td></tr>
<tr><td><p> <tt>`R_ext/RS.h'</tt> </p></td><td><p> definitions common to <tt>`R.h'</tt> and
<tt>`S.h'</tt>, including <code>F77_CALL</code> etc.
</p></td></tr>
<tr><td><p> <tt>`R_ext/Utils.h'</tt> </p></td><td><p> sorting and other utilities
</p></td></tr>
<tr><td><p> <tt>`R_ext/libextern.h'</tt> </p></td><td><p> definitions for exports from
<tt>`R.dll'</tt> on Windows.
</p></td></tr>
</tbody></table>
</blockquote>

<p>The graphics systems are exposed in headers
<tt>`R_ext/GraphicsEngine.h'</tt>, <tt>`R_ext/GraphicsDevice.h'</tt> (which it
includes) and <tt>`R_ext/QuartzDevice.h'</tt>.  Some entry points from the
@pkg{stats} package are in <tt>`R_ext/stats_package.h'</tt> (currently
related to the internals of <code>nls</code> and <code>nlminb</code>).
</p>

<hr size="6">
<a name="Generic-functions-and-methods"></a>
<a name="SEC134"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC133" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC135" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC108" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC136" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h1 class="chapter"> 7. Generic functions and methods </h1>

<p>@R{} programmers will often want to add methods for existing generic
functions, and may want to add new generic functions or make existing
functions generic.  In this chapter we give guidelines for doing so,
with examples of the problems caused by not adhering to them.
</p>
<p>This chapter only covers the `informal' class system copied from S3,
and not with the S4 (formal) methods of package @pkg{methods}.
</p>
<p>The key function for methods is <code>NextMethod</code>, which dispatches the
next method.  It is quite typical for a method function to make a few
changes to its arguments, dispatch to the next method, receive the
results and modify them a little.  An example is
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">t.data.frame &lt;- function(x)
{
    x &lt;- as.matrix(x)
    NextMethod("t")
}
</pre></td></tr></tbody></table>

<p>Also consider <code>predict.glm</code>: it happens that in @R{} for historical
reasons it calls <code>predict.lm</code> directly, but in principle (and in S
originally and currently) it could use <code>NextMethod</code>.
(<code>NextMethod</code> seems under-used in the @R{} sources.  Do be aware
that there are S/R differences in this area, and the example above works
because there is a <em>next</em> method, the default method, not that a
new method is selected when the class is changed.)
</p>
<p><em>Any</em> method a programmer writes may be invoked from another method
by <code>NextMethod</code>, <em>with the arguments appropriate to the
previous method</em>.  Further, the programmer cannot predict which method
<code>NextMethod</code> will pick (it might be one not yet dreamt of), and the
end user calling the generic needs to be able to pass arguments to the
next method.  For this to work
</p>
<blockquote><p><em>A method must have all the arguments of the generic, including
<code>…</code> if the generic does.</em>
</p></blockquote>

<p>It is a grave misunderstanding to think that a method needs only to
accept the arguments it needs.  The original S version of
<code>predict.lm</code> did not have a <code>…</code> argument, although
<code>predict</code> did.  It soon became clear that <code>predict.glm</code> needed
an argument <code>dispersion</code> to handle over-dispersion.  As
<code>predict.lm</code> had neither a <code>dispersion</code> nor a <code>…</code>
argument, <code>NextMethod</code> could no longer be used.  (The legacy, two
direct calls to <code>predict.lm</code>, lives on in <code>predict.glm</code> in
@R{}, which is based on the workaround for S3 written by Venables &amp;
Ripley.)
</p>
<p>Further, the user is entitled to use positional matching when calling
the generic, and the arguments to a method called by <code>UseMethod</code>
are those of the call to the generic.  Thus
</p>
<blockquote><p><em>A method must have arguments in exactly the same order as the
generic.</em>
</p></blockquote>


<p>To see the scale of this problem, consider the generic function
<code>scale</code>, defined as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">scale &lt;- function (x, center = TRUE, scale = TRUE)
    UseMethod("scale")
</pre></td></tr></tbody></table>

<p>Suppose an unthinking package writer created methods such as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">scale.foo &lt;- function(x, scale = FALSE, ...) { }
</pre></td></tr></tbody></table>

<p>Then for <code>x</code> of class <code>"foo"</code> the calls
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">scale(x, , TRUE)
scale(x, scale = TRUE)
</pre></td></tr></tbody></table>

<p>would do most likely do different things, to the justifiable
consternation of the end user.
</p>
<p>To add a further twist, which default is used when a user calls
<code>scale(x)</code> in our example?  What if
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">scale.bar &lt;- function(x, center, scale = TRUE) NextMethod("scale")
</pre></td></tr></tbody></table>

<p>and <code>x</code> has class <code>c("bar", "foo")</code>?  It is the default
specified in the method that is used, but the default
specified in the generic may be the one the user sees.
This leads to the recommendation:
</p>
<blockquote><p><em>If the generic specifies defaults, all methods should use the same defaults.</em>
</p></blockquote>


<p>An easy way to follow these recommendations is to always keep generics
simple, e.g.
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">scale &lt;- function(x, ...) UseMethod("scale")
</pre></td></tr></tbody></table>
<p>Only add parameters and defaults to the generic if they make sense in 
all possible methods implementing it.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC135">7.1 Adding new generics</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">         
</td></tr>
</tbody></table>

<hr size="6">
<a name="Adding-new-generics"></a>
<a name="SEC135"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC134" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC136" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC134" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC134" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC136" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 7.1 Adding new generics </h2>

<p>When creating a new generic function, bear in mind that its argument
list will be the maximal set of arguments for methods, including those
written elsewhere years later.  So choosing a good set of arguments may
well be an important design issue, and there need to be good arguments
<em>not</em> to include a <code>…</code> argument.
</p>
<p>If a <code>…</code> argument is supplied, some thought should be given
to its position in the argument sequence.  Arguments which follow
<code>…</code> must be named in calls to the function, and they must be
named in full (partial matching is suppressed after <code>…</code>).
Formal arguments before <code>…</code> can be partially matched, and so
may `swallow' actual arguments intended for <code>…</code>.  Although it
is commonplace to make the <code>…</code> argument the last one, that is
not always the right choice.
</p>
<p>Sometimes package writers want to make generic a function in the base
package, and request a change in @R{}.  This may be justifiable, but
making a function generic with the old definition as the default method
does have a small performance cost.  It is never necessary, as a package
can take over a function in the base package and make it generic by
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">foo &lt;- function(object, ...) UseMethod("foo")
foo.default &lt;- base::foo
</pre></td></tr></tbody></table>

<p>(If the thus defined default method needs a <samp>`...'</samp> added to its
argument list, one can e.g. use <code>formals(foo.default) &lt;-
c(formals(foo.default), alist(... = ))</code>.)
</p>
<p>The same idea can be applied for functions in other packages with name spaces.
</p>
<hr size="6">
<a name="Linking-GUIs-and-other-front_002dends-to-R"></a>
<a name="SEC136"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC135" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC137" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC134" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h1 class="chapter"> 8. Linking GUIs and other front-ends to R </h1>

<p>There are a number of ways to build front-ends to @R{}: we take this to
mean a GUI or other application that has the ability to submit commands
to @R{} and perhaps to receive results back (not necessarily in a text
format).  There are other routes besides those described here, for
example the package @pkg{Rserve} (from CRAN, see also
<a href="http://www.rforge.net/Rserve/">http://www.rforge.net/Rserve/</a>) and connections to Java in
<samp>`SJava'</samp> (see <a href="http://www.omegahat.org/RSJava/">http://www.omegahat.org/RSJava/</a> and <samp>`JRI'</samp>,
part of the @pkg{rJava} package on CRAN).
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC137">8.1 Embedding R under Unix-alikes</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC143">8.2 Embedding R under Windows</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">   
</td></tr>
</tbody></table>

<hr size="6">
<a name="Embedding-R-under-Unix_002dalikes"></a>
<a name="SEC137"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC136" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC138" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC136" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC136" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 8.1 Embedding R under Unix-alikes </h2>

<p>@R{} can be built as a shared library<a name="DOCF32" href="#FOOT32">(32)</a> if configured with <samp>`--enable-R-shlib'</samp>.  This
shared library can be used to run @R{} from alternative front-end
programs.  We will assume this has been done for the rest of this
section.  In addition, from @R{} 2.7.0 it can be built as a static
library if configured with <samp>`--enable-R-static-lib'</samp>, and this can
be used in a very similar way.
</p>
<p>The command-line @R{} front-end, <tt>`<var>R_HOME</var>/bin/exec/R'</tt> is one
such example, and the unbundled <acronym>GNOME</acronym> (see package
@pkg{gnomeGUI} on CRAN) and MacOS X consoles are others.  The source for
<tt>`<var>R_HOME</var>/bin/exec/R'</tt> is in file <tt>`src/main/Rmain.c'</tt> and is
very simple
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">int Rf_initialize_R(int ac, char **av); /* in ../unix/system.c */
void Rf_mainloop();                     /* in main.c */

extern int R_running_as_main_program;   /* in ../unix/system.c */

int main(int ac, char **av)
{
    R_running_as_main_program = 1;
    Rf_initialize_R(ac, av);
    Rf_mainloop(); /* does not return */
    return 0;
}
</pre></td></tr></tbody></table>

<p>indeed, misleadingly simple.  Remember that
<tt>`<var>R_HOME</var>/bin/exec/R'</tt> is run from a shell script
<tt>`<var>R_HOME</var>/bin/R'</tt> which sets up the environment for the
executable, and this is used for
</p>
<ul>
<li>
Setting <code>R_HOME</code> and checking it is valid, as well as the path
<code>R_SHARE_DIR</code> and <code>R_DOC_DIR</code> to the installed <tt>`share'</tt> and
<tt>`doc'</tt> directory trees.  Also setting <code>R_ARCH</code> if needed.

</li><li>
Setting <code>LD_LIBRARY_PATH</code> to include the directories used in linking
@R{}.  This is recorded as the default setting of
<code>R_LD_LIBRARY_PATH</code> in the shell script
<tt>`<var>R_HOME</var>/etc<var>R_ARCH</var>/ldpaths'</tt>.

</li><li>
Processing some of the arguments, for example to run @R{} under a
debugger and to launch alternative front-ends to provide GUIs.
</li></ul>


<p>The first two of these can be achieved for your front-end by running it
<em>via</em> <code>R CMD</code>. So, for example
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">R CMD /usr/local/lib/R/bin/exec/R
R CMD exec/R
</pre></td></tr></tbody></table>

<p>will both work in a standard @R{} installation. (<code>R CMD</code> looks
first for executables in <tt>`<var>R_HOME</var>/bin'</tt>.)  If you do not want
to run your front-end in this way, you need to ensure that <code>R_HOME</code>
is set and <code>LD_LIBRARY_PATH</code> is suitable.  (The latter might well
be, but modern Unix/Linux systems do not normally include
<tt>`/usr/local/lib'</tt> (<tt>`/usr/local/lib64'</tt> on some architectures),
and @R{} does look there for system components.)
</p>
<p>The other senses in which this example is too simple are that all the
internal defaults are used and that control is handed over to the
@R{} main loop.  There are a number of small examples<a name="DOCF33" href="#FOOT33">(33)</a> in the
<tt>`tests/Embedding'</tt> directory.  These make use of
<code>Rf_initEmbeddedR</code> in <tt>`src/main/Rembedded.c'</tt>, and essentially
use
</p><table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;Rembedded.h&gt;

int main(int ac, char **av)
{
    /* do some setup */
    Rf_initEmbeddedR(argc, argv);
    /* do some more setup */

    /* submit some code to R, which is done interactively via
        run_Rmainloop();

        A possible substitute for a pseudo-console is

        R_ReplDLLinit();
        while(R_ReplDLLdo1() &gt; 0) {
        /* add user actions here if desired */
       }
        
     */
    Rf_endEmbeddedR(0);
    /* final tidying up after R is shutdown */
    return 0;
}
</pre></td></tr></tbody></table>

<p>If you don't want to pass @R{} arguments, you can fake an <code>argv</code>
array, for example by
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">    char *argv[]= {"REmbeddedPostgres", "--silent"};
    Rf_initEmbeddedR(sizeof(argv)/sizeof(argv[0]), argv);
</pre></td></tr></tbody></table>
<p>However, to make a GUI we usually do want to run <code>run_Rmainloop</code>
after setting up various parts of @R{} to talk to our GUI, and arranging
for our GUI callbacks to be called during the @R{} mainloop.
</p>
<p>One issue to watch is that on some platforms <code>Rf_initEmbeddedR</code> and
<code>Rf_endEmbeddedR</code> change the settings of the FPU (e.g. to allow
errors to be trapped and to set extended precision registers).
</p>
<p>The standard code sets up a session temporary directory in the usual
way, <em>unless</em> <code>R_TempDir</code> is set to a non-NULL value before
<code>Rf_initEmbeddedR</code> is called.  In that case the value is assumed to
contain an existing writable directory (no check is done), and it is not
cleaned up when @R{} is shut down.
</p>
<p><code>Rf_initEmbeddedR</code> sets @R{} to be in interactive mode: you can set
<code>R_Interactive</code> (defined in <tt>`Rinterface.h'</tt>) subsequently to
change this.
</p>
<p>Note that @R{} expects to be run with the locale category
<samp>`LC_NUMERIC'</samp> set to its default value of <code>C</code>, and so should
not be embedded into an application which changes that.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC138">8.1.1 Compiling against the R library</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">  
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC139">8.1.2 Setting R callbacks</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">         
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC140">8.1.3 Registering symbols</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">         
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC141">8.1.4 Meshing event loops</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">         
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC142">8.1.5 Threading issues</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">            
</td></tr>
</tbody></table>

<hr size="6">
<a name="Compiling-against-the-R-library"></a>
<a name="SEC138"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC137" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC139" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC136" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC137" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 8.1.1 Compiling against the R library </h3>

<p>Suitable flags to compile and link against the @R{} (shared or static)
library can be found by
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">R CMD config --cppflags
R CMD config --ldflags
</pre></td></tr></tbody></table>
<p>If @R{} is installed, <code>pkg-config</code> is available and
sub-architectures have not been used, alternatives for a shared @R{}
library are
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">pkg-config --cflags libR
pkg-config --libs libR
</pre></td></tr></tbody></table>

<p>and for a static @R{} library
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">pkg-config --cflags libR
pkg-config --libs --static libR
</pre></td></tr></tbody></table>
<hr size="6">
<a name="Setting-R-callbacks"></a>
<a name="SEC139"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC138" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC140" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC136" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC137" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 8.1.2 Setting R callbacks </h3>

<p>For Unix-alkes there is a public header file <tt>`Rinterface.h'</tt> that
makes it possible to change the standard callbacks used by @R{} in a
documented way.  This defines pointers (if <code>R_INTERFACE_PTRS</code> is
defined)
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">extern void (*ptr_R_Suicide)(const char *);
extern void (*ptr_R_ShowMessage)(const char *);
extern int  (*ptr_R_ReadConsole)(const char *, unsigned char *, int, int);
extern void (*ptr_R_WriteConsole)(const char *, int);
extern void (*ptr_R_WriteConsoleEx)(const char *, int, int);
extern void (*ptr_R_ResetConsole)();
extern void (*ptr_R_FlushConsole)();
extern void (*ptr_R_ClearerrConsole)();
extern void (*ptr_R_Busy)(int);
extern void (*ptr_R_CleanUp)(SA_TYPE, int, int);
extern int  (*ptr_R_ShowFiles)(int, const char **, const char **,
                               const char *, Rboolean, const char *);
extern int  (*ptr_R_ChooseFile)(int, char *, int);
extern int  (*ptr_R_EditFile)(const char *);
extern void (*ptr_R_loadhistory)(SEXP, SEXP, SEXP, SEXP);
extern void (*ptr_R_savehistory)(SEXP, SEXP, SEXP, SEXP);
extern void (*ptr_R_addhistory)(SEXP, SEXP, SEXP, SEXP);
</pre></td></tr></tbody></table>

<p>which allow standard @R{} callbacks to be redirected to your GUI.  What
these do is generally documented in the file <tt>`src/unix/system.txt'</tt>.
</p>
<dl>
<dt><u>Function:</u> void <b>R_ShowMessage</b><i> (char *<var>message</var>)</i>
<a name="IDX214"></a>
</dt>
<dd><p>This should display the message, which may have multiple lines:  it
should be brought to the user's attention immediately.
</p></dd></dl>

<dl>
<dt><u>Function:</u> void <b>R_Busy</b><i> (int <var>which</var>)</i>
<a name="IDX215"></a>
</dt>
<dd><p>This function invokes actions (such as change of cursor) when @R{}
embarks on an extended computation (<code><var>which</var>=1</code>) and when such
a state terminates (<code><var>which</var>=0</code>).
</p></dd></dl>

<dl>
<dt><u>Function:</u> int <b>R_ReadConsole</b><i> (const char *<var>prompt</var>, unsigned char *<var>buf</var>, &nbsp;  int <var>buflen</var>, int <var>hist</var>)</i>
<a name="IDX216"></a>
</dt>
<dt><u>Function:</u> void <b>R_WriteConsole</b><i> (const char *<var>buf</var>, int <var>buflen</var>)</i>
<a name="IDX217"></a>
</dt>
<dt><u>Function:</u> void <b>R_WriteConsoleEx</b><i> (const char *<var>buf</var>, int <var>buflen</var>, int <var>otype</var>)</i>
<a name="IDX218"></a>
</dt>
<dt><u>Function:</u> void <b>R_ResetConsole</b><i> ()</i>
<a name="IDX219"></a>
</dt>
<dt><u>Function:</u> void <b>R_FlushConsole</b><i> ()</i>
<a name="IDX220"></a>
</dt>
<dt><u>Function:</u> void <b>R_ClearErrConsole</b><i> ()</i>
<a name="IDX221"></a>
</dt>
<dd><p>These functions interact with a console.
</p>
<p><code>R_ReadConsole</code> prints the given prompt at the console and then
does a <code>gets(3)</code>-like operation, transferring up to <var>buflen</var>
characters into the buffer <var>buf</var>. The last two bytes should be
set to <samp>`"\n\0"'</samp> to preserve sanity.  If <var>hist</var> is non-zero,
then the line should be added to any command history which is being
maintained.  The return value is 0 is no input is available and &gt;0
otherwise.
</p>
<p><code>R_WriteConsoleEx</code> writes the given buffer to the console,
<var>otype</var> specifies the output type (regular output or
warning/error). Call to <code>R_WriteConsole(buf, buflen)</code> is equivalent
to <code>R_WriteConsoleEx(buf, buflen, 0)</code>. To ensure backward
compatibility of the callbacks, <code>ptr_R_WriteConsoleEx</code> is used only
if <code>ptr_R_WriteConsole</code> is set to <code>NULL</code>.  To ensure that
<code>stdout()</code> and <code>stderr()</code> connections point to the console,
set the corresponding files to <code>NULL</code> <em>via</em>
</p><table><tbody><tr><td>&nbsp;</td><td><pre class="example">      R_Outputfile = NULL;
      R_Consolefile = NULL;
</pre></td></tr></tbody></table>
<p><code>R_ResetConsole</code> is called when the system is reset after an error.
<code>R_FlushConsole</code> is called to flush any pending output to the
system console.  <code>R_ClearerrConsole</code> clears any errors associated
with reading from the console.
</p></dd></dl>

<dl>
<dt><u>Function:</u> int <b>R_ShowFiles</b><i> (int <var>nfile</var>, const char **<var>file</var>, &nbsp;  const char **<var>headers</var>, const char *<var>wtitle</var>, Rboolean <var>del</var>, &nbsp;  const char *<var>pager</var>)</i>
<a name="IDX222"></a>
</dt>
<dd><p>This function is used to display the contents of files.
</p></dd></dl>

<dl>
<dt><u>Function:</u> int <b>R_ChooseFile</b><i> (int <var>new</var>, char *<var>buf</var>, &nbsp;  int <var>len</var>)</i>
<a name="IDX223"></a>
</dt>
<dd><p>Choose a file and return its name in <var>buf</var> of length <var>len</var>.
Return value is 0 for success, &gt; 0 otherwise.
</p></dd></dl>

<dl>
<dt><u>Function:</u> int <b>R_EditFile</b><i> (const char *<var>buf</var>)</i>
<a name="IDX224"></a>
</dt>
<dd><p>Send a file to an editor window.
</p></dd></dl>

<dl>
<dt><u>Function:</u> SEXP <b>R_loadhistory</b><i> (SEXP, SEXP, SEXP, SEXP);</i>
<a name="IDX225"></a>
</dt>
<dt><u>Function:</u> SEXP <b>R_savehistory</b><i> (SEXP, SEXP, SEXP, SEXP);</i>
<a name="IDX226"></a>
</dt>
<dt><u>Function:</u> SEXP <b>R_addhistory</b><i> (SEXP, SEXP, SEXP, SEXP);</i>
<a name="IDX227"></a>
</dt>
<dd><p><code>.Internal</code> functions for <code>loadhistory</code>, <code>savehistory</code>
and <code>timestamp</code>: these are called after checking the number of
arguments.
</p>
<p>If the console has no history mechanism these can be as
simple as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">SEXP R_loadhistory (SEXP call, SEXP op, SEXP args, SEXP env)
{
    errorcall(call, "loadhistory is not implemented");
    return R_NilValue;
}
SEXP R_savehistory (SEXP call, SEXP op , SEXP args, SEXP env)
{
    errorcall(call, "savehistory is not implemented");
    return R_NilValue;
}
SEXP R_addhistory (SEXP call, SEXP op , SEXP args, SEXP env)
{
    return R_NilValue;
}
</pre></td></tr></tbody></table>
<p>The <code>R_addhistory</code> function should return silently if no history
mechanism is present, as a user may be calling <code>timestamp</code> purely
to write the time stamp to the console.
</p></dd></dl>

<dl>
<dt><u>Function:</u> void <b>R_Suicide</b><i> (const char *<var>message</var>)</i>
<a name="IDX228"></a>
</dt>
<dd><p>This should abort @R{} as rapidly as possible, displaying the message.
A possible implementation is
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void R_Suicide (const char *message)
{
    char  pp[1024];
    snprintf(pp, 1024, "Fatal error: %s\n", s);
    R_ShowMessage(pp);
    R_CleanUp(SA_SUICIDE, 2, 0);
}
</pre></td></tr></tbody></table></dd></dl>

<dl>
<dt><u>Function:</u> void <b>R_CleanUp</b><i> (SA_TYPE <var>saveact</var>, int <var>status</var>, &nbsp;  int <var>RunLast</var>)</i>
<a name="IDX229"></a>
</dt>
<dd><p>This function invokes any actions which occur at system termination.
It needs to be quite complex:
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">#include &lt;Rinterface.h&gt;
#include &lt;Rembedded.h&gt;    /* for Rf_KillAllDevices */

void R_CleanUp (SA_TYPE saveact, int status, int RunLast)
{
    if(saveact == SA_DEFAULT) saveact = SaveAction;
    if(saveact == SA_SAVEASK) {
       /* ask what to do and set saveact */
    }
    switch (saveact) {
    case SA_SAVE:
        if(runLast) R_dot_Last();
        if(R_DirtyImage) R_SaveGlobalEnv();
        /* save the console history in R_HistoryFile */
        break;
    case SA_NOSAVE:
        if(runLast) R_dot_Last();
        break;
    case SA_SUICIDE:
    default:
        break;
    }

    R_RunExitFinalizers();
    /* clean up after the editor e.g. CleanEd() */

    R_CleanTempDir();

    /* close all the graphics devices */
    if(saveact != SA_SUICIDE) Rf_KillAllDevices();
    fpu_setup(FALSE);

    exit(status);
}
</pre></td></tr></tbody></table></dd></dl>

<hr size="6">
<a name="Registering-symbols"></a>
<a name="SEC140"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC139" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC141" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC136" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC137" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 8.1.3 Registering symbols </h3>

<p>An application embedding @R{} needs a different way of registering
symbols because it is not a dynamic library loaded by @R{} as would be
the case with a package.  Therefore @R{} reserves a special
<code>DllInfo</code> entry for the embedding application such that it can
register symbols to be used with <code>.C</code>, <code>.Call</code> etc.  This
entry can be obtained by calling <code>getEmbeddingDllInfo</code>, so a
typical use is
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">DllInfo *info = R_getEmbeddingDllInfo();
R_registerRoutines(info, cMethods, callMethods, NULL, NULL);
</pre></td></tr></tbody></table>
<p>The native routines defined by <code>cMethod</code> and <code>callMethods</code>
should be present in the embedding application.  See <a href="#SEC79">Registering native routines</a> for details on registering symbols in general.
</p>

<hr size="6">
<a name="Meshing-event-loops"></a>
<a name="SEC141"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC140" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC142" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC136" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC137" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 8.1.4 Meshing event loops </h3>

<p>One of the most difficult issues in interfacing @R{} to a front-end is
the handling of event loops, at least if a single thread is used.  @R{}
uses events and timers for
</p>
<ul class="toc">
<li>
Running X11 windows such as the graphics device and data editor, and
interacting with them (e.g., using <code>locator()</code>).

</li><li>
Supporting Tcl/Tk events for the @pkg{tcltk} package (for at least the
X11 version of Tk).

</li><li>
Preparing input.

</li><li>
Timing operations, for example for profiling @R{} code and
<code>Sys.sleep()</code>.

</li><li>
Interrupts, where permitted.
</li></ul>


<p>Specifically, the Unix command-line version of @R{} runs separate event
loops for
</p>
<ul class="toc">
<li>
Preparing input at the console command-line, in file
<tt>`src/unix/sys-unix.c'</tt>.

</li><li>
Waiting for a response from a socket in the internal functions
underlying FTP and HTTP transfers in <code>download.file()</code> and for
direct socket access, in files
<tt>`src/modules/internet/nanoftp.c'</tt>,
<tt>`src/modules/internet/nanohttp.c'</tt> and
<tt>`src/modules/internet/Rsock.c'</tt>

</li><li>
Mouse and window events when displaying the X11-based dataentry window,
in file <tt>`src/modules/X11/dataentry.c'</tt>.  This is regarded as
<em>modal</em>, and no other events are serviced whilst it is active.
</li></ul>

<p>There is a protocol for adding event handlers to the first two types of
event loops, using types and functions declared in the header
<tt>`R_ext/eventloop.h'</tt> and described in comments in file
<tt>`src/unix/sys-std.c'</tt>.  It is possible to add (or remove) an input
handler for events on a particular file descriptor, or to set a polling
interval (<em>via</em> <code>R_wait_usec</code>) and a function to be called
periodically via <code>R_PolledEvents</code>: the polling mechanism is used by
the @pkg{tcltk} package.
</p>
<p>An alternative front-end needs both to make provision for other @R{}
events whilst waiting for input, and to ensure that it is not frozen out
during events of the second type.  This is not handled very well in the
existing examples.  The GNOME front-end can run a own handler for polled
events by setting
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">extern int (*R_timeout_handler)();
extern long R_timeout_val;

      if (R_timeout_handler &amp;&amp; R_timeout_val)
          gtk_timeout_add(R_timeout_val, R_timeout_handler, NULL);
      gtk_main ();
</pre></td></tr></tbody></table>

<p>whilst it is waiting for console input.  This obviously handles events
for Gtk windows (such as the graphics device in the @pkg{gtkDevice}
package), but not X11 events (such as the <code>X11()</code> device) or for
other event handlers that might have been registered with @R{}.  It does
not attempt to keep itself alive whilst @R{} is waiting on sockets.  The
ability to add a polled handler as <code>R_timeout_handler</code> is used by
the @pkg{tcltk} package.
</p>

<hr size="6">
<a name="Threading-issues"></a>
<a name="SEC142"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC141" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC143" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC136" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC137" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 8.1.5 Threading issues </h3>

<p>Embedded @R{} is designed to be run in the main thread, and all the
testing is done in that context.  There is a potential issue with the
stack-checking mechanism where threads are involved.  This uses two
variables declared in <tt>`Rinterface.h'</tt> (if <code>CSTACK_DEFNS</code> is
defined) as
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">extern uintptr_t R_CStackLimit; /* C stack limit */
extern uintptr_t R_CStackStart; /* Initial stack address */
</pre></td></tr></tbody></table>

<p>Note that <code>uintptr_t</code> is a C99 type for which a substitute is
defined in @R{}, so your code needs to define <code>HAVE_UINTPTR_T</code>
appropriately.
</p>
<p>These will be set<a name="DOCF34" href="#FOOT34">(34)</a> when <code>Rf_initialize_R</code> is called, to values appropriate to
the main thread.  Stack-checking can be disabled by seting
<code>R_CStackLimit = (uintptr_t)-1</code>, but it is better to if possible
set appropriate values.  (What these are and how to determine them are
OS-specific, and the stack size limit may differ for secondary threads.
If you have a choice of stack size, at least 8Mb is recommended.)
</p>
<p>You may also want to consider how signals are handled: @R{} sets signal
handlers for several signals, including <code>SIGINT</code>, <code>SIGSEGV</code>,
<code>SIGPIPE</code>, <code>SIGUSR1</code> and <code>SIGUSR2</code>, but these can all be
suppressed by setting the variable <code>R_SignalHandlers</code> (declared in
<tt>`Rinterface.h'</tt>) to <code>0</code>.
</p>

<hr size="6">
<a name="Embedding-R-under-Windows"></a>
<a name="SEC143"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC142" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC144" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC136" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC136" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h2 class="section"> 8.2 Embedding R under Windows </h2>

<p>All Windows interfaces to @R{} call entry points in the DLL
<tt>`R.dll'</tt>, directly or indirectly.  Simpler applications may find it
easier to use the indirect route via <acronym>(D)COM</acronym>.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td valign="top" align="left"><a href="#SEC144">8.2.1 Using (D)COM</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">                
</td></tr>
<tr><td valign="top" align="left"><a href="#SEC145">8.2.2 Calling R.dll directly</a></td><td>&nbsp;&nbsp;</td><td valign="top" align="left">      
</td></tr>
</tbody></table>

<hr size="6">
<a name="NOD143"></a>
<a name="SEC144"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC143" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC145" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC136" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC143" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 8.2.1 Using (D)COM </h3>

<p><acronym>(D)COM</acronym> is a standard Windows mechanism used for communication
between Windows applications.  One application (here @R{}) is run as COM
server which offers services to clients, here the front-end calling
application.  The services are described in a `Type Library' and are
(more or less) language-independent, so the calling application can be
written in C or C++ or Visual Basic or Perl or Python and so on.
The `D' in (D)COM refers to `distributed', as the client and server can
be running on different machines.
</p>
<p>The basic @R{} distribution is not a (D)COM server, but two addons are
currently available that interface directly with @R{} and provide a
(D)COM server:
</p><ul class="toc">
<li>
There is a (D)COM server called <code>StatConnector</code> written by Thomas
Baier available on CRAN
(<a href="http://cran.r-project.org/other-software.html">http://cran.r-project.org/other-software.html</a>) which works
with <tt>`Rproxy.dll'</tt> (in the @R{} distribution) and <tt>`R.dll'</tt> to
support transfer of data to and from @R{} and remote execution of R
commands, as well as embedding of an @R{} graphics window.  The @pkg{rcom}
package on CRAN provides a (D)COM server in a running @R{} session.

</li><li>
Another (D)COM server, <code>RDCOMServer</code>, is available from
<a href="http://www.omegahat.org/">http://www.omegahat.org/</a>. Its philosophy is discussed in
<a href="http://www.omegahat.org/RDCOMServer/Docs/Paradigm.html">http://www.omegahat.org/RDCOMServer/Docs/Paradigm.html</a> and is
very different from the purpose of this section.
</li></ul>
<hr size="6">
<a name="Calling-R_002edll-directly"></a>
<a name="SEC145"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC144" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC136" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC143" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h3 class="subsection"> 8.2.2 Calling R.dll directly </h3>

<p>The <code>R</code> DLL is mainly written in C and has <code>_cdecl</code> entry
points.  Calling it directly will be tricky except from C code (or C++
with a little care).
</p>
<p>There is a version of the Unix interface callng 
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="example">int Rf_initEmbeddedR(int ac, char **av);
void Rf_endEmbeddedR(int fatal);
</pre></td></tr></tbody></table>

<p>which is an entry point in <tt>`R.dll'</tt>.  Examples of its use (and a
suitable <tt>`Makefile.win'</tt>) can be found in the <tt>`tests/Embedding'</tt>
directory of the sources.  You may need to ensure that
<tt>`<var>R_HOME</var>/bin'</tt> is in your <code>PATH</code> so the @R{} DLLs are found.
</p>
<p>Examples of calling <tt>`R.dll'</tt> directly are provided in the directory
<tt>`src/gnuwin32/front-ends'</tt>, including a simple command-line
front end <tt>`rtest.c'</tt> whose code is
</p>
<table><tbody><tr><td>&nbsp;</td><td><pre class="smallexample">#define Win32
#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;
#include &lt;Rversion.h&gt;
#define LibExtern __declspec(dllimport) extern
#include &lt;Rembedded.h&gt;
#include &lt;R_ext/RStartup.h&gt;
/* for askok and askyesnocancel */
#include &lt;graphapp.h&gt;

/* for signal-handling code */
#include &lt;psignal.h&gt;

/* simple input, simple output */

/* This version blocks all events: a real one needs to call ProcessEvents
   frequently. See rterm.c and ../system.c for one approach using
   a separate thread for input.
*/
int myReadConsole(const char *prompt, char *buf, int len, int addtohistory)
{
    fputs(prompt, stdout);
    fflush(stdout);
    if(fgets(buf, len, stdin)) return 1; else return 0;
}

void myWriteConsole(const char *buf, int len)
{
    printf("%s", buf);
}

void myCallBack(void)
{
    /* called during i/o, eval, graphics in ProcessEvents */
}

void myBusy(int which)
{
    /* set a busy cursor ... if which = 1, unset if which = 0 */
}

static void my_onintr(int sig) { UserBreak = 1; }

int main (int argc, char **argv)
{
    structRstart rp;
    Rstart Rp = &amp;rp;
    char Rversion[25], *RHome;

    sprintf(Rversion, "%s.%s", R_MAJOR, R_MINOR);
    if(strcmp(getDLLVersion(), Rversion) != 0) {
        fprintf(stderr, "Error: R.DLL version does not match\n");
        exit(1);
    }

    R_setStartTime();
    R_DefParams(Rp);
    if((RHome = get_R_HOME()) == NULL) {
         fprintf(stderr, "R_HOME must be set in the environment or Registry\n");
         exit(1);
    }
    Rp-&gt;rhome = RHome;
    Rp-&gt;home = getRUser();
    Rp-&gt;CharacterMode = LinkDLL;
    Rp-&gt;ReadConsole = myReadConsole;
    Rp-&gt;WriteConsole = myWriteConsole;
    Rp-&gt;CallBack = myCallBack;
    Rp-&gt;ShowMessage = askok;
    Rp-&gt;YesNoCancel = askyesnocancel;
    Rp-&gt;Busy = myBusy;

    Rp-&gt;R_Quiet = TRUE;        /* Default is FALSE */
    Rp-&gt;R_Interactive = FALSE; /* Default is TRUE */
    Rp-&gt;RestoreAction = SA_RESTORE;
    Rp-&gt;SaveAction = SA_NOSAVE;
    R_SetParams(Rp);
    R_set_command_line_arguments(argc, argv);

    FlushConsoleInputBuffer(GetStdHandle(STD_INPUT_HANDLE));

    signal(SIGBREAK, my_onintr);
    GA_initapp(0, 0);
    readconsolecfg();
    setup_Rmainloop();
#ifdef SIMPLE_CASE
    run_Rmainloop();
#else
    R_ReplDLLinit();
    while(R_ReplDLLdo1() &gt; 0) {
/* add user actions here if desired */
    }
/* only get here on EOF (not q()) */
#endif
    Rf_endEmbeddedR(0);
    return 0;
}
</pre></td></tr></tbody></table>
<p>The ideas are
</p>
<ul class="toc">
<li>
Check that the front-end and the linked <tt>`R.dll'</tt> match - other
front-ends may allow a looser match.

</li><li>
Find and set the @R{} home directory and the user's home directory.  The
former may be available from the Windows Registry: it will normally be
in <code>HKEY_LOCAL_MACHINE\Software\R-core\R\InstallPath</code> and can be
set there by running the program <tt>`<var>R_HOME</var>\bin\RSetReg.exe'</tt>.

</li><li>
Define startup conditions and callbacks via the <code>Rstart</code> structure.
<code>R_DefParams</code> sets the defaults, and <code>R_SetParams</code> sets
updated values.

</li><li>
Record the command-line arguments used by
<code>R_set_command_line_arguments</code> for use by the @R{} function
<code>commandArgs()</code>.

</li><li>
Set up the signal handler and the basic user interface.

</li><li>
Run the main @R{} loop, possibly with our actions intermeshed.

</li><li>
Arrange to clean up.
</li></ul>

<p>An underlying theme is the need to keep the GUI `alive', and this has
not been done in this example.  The @R{} callback <code>R_ProcessEvents</code>
needs to be called frequently to ensure that Windows events in @R{}
windows are handled expeditiously.  Conversely, @R{} needs to allow the
GUI code (which is running in the same process) to update itself as
needed - two ways are provided to allow this:
</p>
<ul class="toc">
<li>
<code>R_ProcessEvents</code> calls the callback registered by
<code>Rp-&gt;callback</code>.  A version of this is used to run package Tcl/Tk
for @pkg{tcltk} under Windows, for the code is

<table><tbody><tr><td>&nbsp;</td><td><pre class="example">void R_ProcessEvents(void)
{
    while (peekevent()) doevent(); /* Windows events for GraphApp */
    if (UserBreak) { UserBreak = FALSE; onintr(); }
    R_CallBackHook();
    if(R_tcldo) R_tcldo();
}
</pre></td></tr></tbody></table>
</li><li>
The mainloop can be split up to allow the calling application to take
some action after each line of input has been dealt with: see the
alternative code below <code>#ifdef SIMPLE_CASE</code>.
</li></ul>

<p>It may be that no @R{} GraphApp windows need to be considered, although
these include pagers, the <code>windows()</code> graphics device, the @R{}
data and script editors and various popups such as <code>choose.file()</code>
and <code>select.list()</code>.  It would be possible to replace all of these,
but it seems easier to allow GraphApp to handle most of them.
</p>
<p>It is possible to run @R{} in a GUI in a single thread (as
<tt>`RGui.exe'</tt> shows) but it will normally be easier<a name="DOCF35" href="#FOOT35">(35)</a> to
use multiple threads.
</p>
<p>Note that @R{}'s own front ends use a stack size of 10Mb, whereas MinGW
executables default to 2Mb, and Visual C++ ones to 1Mb.  The latter
stack sizes are too small for a number of @R{} applications, so
general-purpose front-ends should use a larger stack size.
</p>



<hr size="6">
<a name="Function-and-variable-index"></a>
<a name="SEC146"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC145" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC147" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC136" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="#SEC147" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h1 class="unnumbered"> Function and variable index </h1>

<table><tbody><tr><th valign="top">Jump to: &nbsp; </th><td><a href="#SEC146_0" class="summary-letter"><b>*</b></a>
 &nbsp; 
<a href="#SEC146_1" class="summary-letter"><b>.</b></a>
 &nbsp; 
<a href="#SEC146_2" class="summary-letter"><b>\</b></a>
 &nbsp; 
<br>
<a href="#SEC146_3" class="summary-letter"><b>B</b></a>
 &nbsp; 
<a href="#SEC146_4" class="summary-letter"><b>C</b></a>
 &nbsp; 
<a href="#SEC146_5" class="summary-letter"><b>D</b></a>
 &nbsp; 
<a href="#SEC146_6" class="summary-letter"><b>E</b></a>
 &nbsp; 
<a href="#SEC146_7" class="summary-letter"><b>F</b></a>
 &nbsp; 
<a href="#SEC146_8" class="summary-letter"><b>G</b></a>
 &nbsp; 
<a href="#SEC146_9" class="summary-letter"><b>H</b></a>
 &nbsp; 
<a href="#SEC146_10" class="summary-letter"><b>I</b></a>
 &nbsp; 
<a href="#SEC146_11" class="summary-letter"><b>L</b></a>
 &nbsp; 
<a href="#SEC146_12" class="summary-letter"><b>M</b></a>
 &nbsp; 
<a href="#SEC146_13" class="summary-letter"><b>N</b></a>
 &nbsp; 
<a href="#SEC146_14" class="summary-letter"><b>O</b></a>
 &nbsp; 
<a href="#SEC146_15" class="summary-letter"><b>P</b></a>
 &nbsp; 
<a href="#SEC146_16" class="summary-letter"><b>Q</b></a>
 &nbsp; 
<a href="#SEC146_17" class="summary-letter"><b>R</b></a>
 &nbsp; 
<a href="#SEC146_18" class="summary-letter"><b>S</b></a>
 &nbsp; 
<a href="#SEC146_19" class="summary-letter"><b>T</b></a>
 &nbsp; 
<a href="#SEC146_20" class="summary-letter"><b>U</b></a>
 &nbsp; 
<a href="#SEC146_21" class="summary-letter"><b>V</b></a>
 &nbsp; 
</td></tr></tbody></table>
<table class="index-vr" border="0">
<tbody><tr><td></td><th align="left">Index Entry</th><th align="left"> Section</th></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_0">*</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#IDX211"><code>*Riconv_open</code></a></td><td valign="top"><a href="#SEC127">6.11 Re-encoding</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_1">.</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC77"><code>.C</code></a></td><td valign="top"><a href="#SEC77">5.2 Interface functions <code>.C</code> and <code>.Fortran</code></a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX110"><code>.Call</code></a></td><td valign="top"><a href="#SEC86">5.9 Handling R objects in C</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC98"><code>.Call</code></a></td><td valign="top"><a href="#SEC98">5.10.1 Calling <code>.Call</code></a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX111"><code>.External</code></a></td><td valign="top"><a href="#SEC86">5.9 Handling R objects in C</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC99"><code>.External</code></a></td><td valign="top"><a href="#SEC99">5.10.2 Calling <code>.External</code></a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX6"><code>.First.lib</code></a></td><td valign="top"><a href="#SEC6">1.1.3 包的子目录</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC77"><code>.Fortran</code></a></td><td valign="top"><a href="#SEC77">5.2 Interface functions <code>.C</code> and <code>.Fortran</code></a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX7"><code>.Last.lib</code></a></td><td valign="top"><a href="#SEC6">1.1.3 包的子目录</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX26"><code>.Last.lib</code></a></td><td valign="top"><a href="#SEC21">1.6.3 Load hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX25"><code>.onAttach</code></a></td><td valign="top"><a href="#SEC21">1.6.3 Load hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX24"><code>.onLoad</code></a></td><td valign="top"><a href="#SEC21">1.6.3 Load hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX27"><code>.onUnload</code></a></td><td valign="top"><a href="#SEC21">1.6.3 Load hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC114"><code>.Random.seed</code></a></td><td valign="top"><a href="#SEC114">6.3 Random number generation</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_2">\</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#IDX76"><code>\acronym</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX36"><code>\alias</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX41"><code>\arguments</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX46"><code>\author</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX59"><code>\bold</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX75"><code>\cite</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX62"><code>\code</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX73"><code>\command</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX83"><code>\concept</code></a></td><td valign="top"><a href="#SEC48">2.8 Indices</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX55"><code>\cr</code></a></td><td valign="top"><a href="#SEC42">2.2 Sectioning</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC46"><code>\deqn</code></a></td><td valign="top"><a href="#SEC46">2.6 Mathematics</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX77"><code>\describe</code></a></td><td valign="top"><a href="#SEC44">2.4 Lists and tables</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX38"><code>\description</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX42"><code>\details</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX74"><code>\dfn</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX49"><code>\dontrun</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX50"><code>\dontshow</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX80"><code>\dots</code></a></td><td valign="top"><a href="#SEC47">2.7 Insertions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX61"><code>\dQuote</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX68"><code>\email</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX57"><code>\emph</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX82"><code>\enc</code></a></td><td valign="top"><a href="#SEC47">2.7 Insertions</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC44"><code>\enumerate</code></a></td><td valign="top"><a href="#SEC44">2.4 Lists and tables</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX71"><code>\env</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC46"><code>\eqn</code></a></td><td valign="top"><a href="#SEC46">2.6 Mathematics</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX48"><code>\examples</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX67"><code>\file</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX53"><code>\format</code></a></td><td valign="top"><a href="#SEC39">2.1.2 Documenting data sets</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC44"><code>\itemize</code></a></td><td valign="top"><a href="#SEC44">2.4 Lists and tables</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX64"><code>\kbd</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX51"><code>\keyword</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX81"><code>\ldots</code></a></td><td valign="top"><a href="#SEC47">2.7 Insertions</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC45"><code>\link</code></a></td><td valign="top"><a href="#SEC45">2.5 Cross-references</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX40"><code>\method</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX35"><code>\name</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX45"><code>\note</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX72"><code>\option</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX66"><code>\pkg</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX63"><code>\preformatted</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC47"><code>\R</code></a></td><td valign="top"><a href="#SEC47">2.7 Insertions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX44"><code>\references</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX65"><code>\samp</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX56"><code>\section</code></a></td><td valign="top"><a href="#SEC42">2.2 Sectioning</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX47"><code>\seealso</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX54"><code>\source</code></a></td><td valign="top"><a href="#SEC39">2.1.2 Documenting data sets</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX60"><code>\sQuote</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX58"><code>\strong</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX78"><code>\tabular</code></a></td><td valign="top"><a href="#SEC44">2.4 Lists and tables</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX37"><code>\title</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX69"><code>\url</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX39"><code>\usage</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX43"><code>\value</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX70"><code>\var</code></a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_3">B</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#IDX155"><code>bessel_i</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX160"><code>bessel_i</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX156"><code>bessel_j</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX161"><code>bessel_j</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX157"><code>bessel_k</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX162"><code>bessel_k</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX158"><code>bessel_y</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX163"><code>bessel_y</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX146"><code>beta</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX149"><code>beta</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX15"><code>BLAS_LIBS</code></a></td><td valign="top"><a href="#SEC9">1.2.1 Using <tt>`Makevars'</tt></a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC67"><code>browser</code></a></td><td valign="top"><a href="#SEC67">4.1 Browsing</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_4">C</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC111"><code>Calloc</code></a></td><td valign="top"><a href="#SEC111">6.1.2 User-controlled memory</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX123"><code>CAR</code></a></td><td valign="top"><a href="#SEC99">5.10.2 Calling <code>.External</code></a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX124"><code>CDR</code></a></td><td valign="top"><a href="#SEC99">5.10.2 Calling <code>.External</code></a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX186"><code>cgmin</code></a></td><td valign="top"><a href="#SEC124">6.8 Optimization</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX151"><code>choose</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX153"><code>choose</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX9"><code>CITATION</code></a></td><td valign="top"><a href="#SEC6">1.1.3 包的子目录</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX33"><code>CITATION</code></a></td><td valign="top"><a href="#SEC30">1.9.2 R messages</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX198"><code>cPsort</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_5">D</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#IDX93"><code>debug</code></a></td><td valign="top"><a href="#SEC68">4.2 Debugging R code</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX91"><code>debugger</code></a></td><td valign="top"><a href="#SEC68">4.2 Debugging R code</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX121"><code>defineVar</code></a></td><td valign="top"><a href="#SEC94">5.9.8 Finding and setting variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC121"><code>digamma</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX141"><code>digamma</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX90"><code>dump.frames</code></a></td><td valign="top"><a href="#SEC68">4.2 Debugging R code</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC96"><code>duplicate</code></a></td><td valign="top"><a href="#SEC96">5.9.10 Named objects and copying</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC78"><code>dyn.load</code></a></td><td valign="top"><a href="#SEC78">5.3 <code>dyn.load</code> and <code>dyn.unload</code></a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC78"><code>dyn.unload</code></a></td><td valign="top"><a href="#SEC78">5.3 <code>dyn.load</code> and <code>dyn.unload</code></a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_6">E</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC114"><code>exp_rand</code></a></td><td valign="top"><a href="#SEC114">6.3 Random number generation</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX169"><code>expm1</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX19"><code>export</code></a></td><td valign="top"><a href="#SEC19">1.6.1 指定导入和导出</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX29"><code>exportClasses</code></a></td><td valign="top"><a href="#SEC24">1.6.6 有正式类和方法的命名空间</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX30"><code>exportMethods</code></a></td><td valign="top"><a href="#SEC24">1.6.6 有正式类和方法的命名空间</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX20"><code>exportPattern</code></a></td><td valign="top"><a href="#SEC19">1.6.1 指定导入和导出</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_7">F</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#IDX183"><code>FALSE</code></a></td><td valign="top"><a href="#SEC123">6.7.4 Mathematical constants</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX206"><code>findInterval</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX120"><code>findVar</code></a></td><td valign="top"><a href="#SEC94">5.9.8 Finding and setting variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX14"><code>FLIBS</code></a></td><td valign="top"><a href="#SEC9">1.2.1 Using <tt>`Makevars'</tt></a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX175"><code>fmax2</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX176"><code>fmin2</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX179"><code>fprec</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC111"><code>Free</code></a></td><td valign="top"><a href="#SEC111">6.1.2 User-controlled memory</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX180"><code>fround</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX178"><code>fsign</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX181"><code>ftrunc</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_8">G</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC121"><code>gammafn</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX139"><code>gammafn</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC70"><code>gctorture</code></a></td><td valign="top"><a href="#SEC70">4.3.1 Using gctorture</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX115"><code>getAttrib</code></a></td><td valign="top"><a href="#SEC90">5.9.4 Attributes</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX131"><code>getCharCE</code></a></td><td valign="top"><a href="#SEC107">5.15 Character encoding issues</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC114"><code>GetRNGstate</code></a></td><td valign="top"><a href="#SEC114">6.3 Random number generation</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_9">H</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#IDX207"><code>hsv2rgb</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_10">I</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#IDX173"><code>imax2</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX174"><code>imin2</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX21"><code>import</code></a></td><td valign="top"><a href="#SEC19">1.6.1 指定导入和导出</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX31"><code>importClassesFrom</code></a></td><td valign="top"><a href="#SEC24">1.6.6 有正式类和方法的命名空间</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX22"><code>importFrom</code></a></td><td valign="top"><a href="#SEC19">1.6.1 指定导入和导出</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX32"><code>importMethodsFrom</code></a></td><td valign="top"><a href="#SEC24">1.6.6 有正式类和方法的命名空间</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX117"><code>install</code></a></td><td valign="top"><a href="#SEC90">5.9.4 Attributes</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX196"><code>iPsort</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX125"><code>ISNA</code></a></td><td valign="top"><a href="#SEC100">5.10.3 Missing and special values</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC115"><code>ISNA</code></a></td><td valign="top"><a href="#SEC115">6.4 Missing and <acronym>IEEE</acronym> special values</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX126"><code>ISNAN</code></a></td><td valign="top"><a href="#SEC100">5.10.3 Missing and special values</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC115"><code>ISNAN</code></a></td><td valign="top"><a href="#SEC115">6.4 Missing and <acronym>IEEE</acronym> special values</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_11">L</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#IDX16"><code>LAPACK_LIBS</code></a></td><td valign="top"><a href="#SEC9">1.2.1 Using <tt>`Makevars'</tt></a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX147"><code>lbeta</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX150"><code>lbeta</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX187"><code>lbfgsb</code></a></td><td valign="top"><a href="#SEC124">6.8 Optimization</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX152"><code>lchoose</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX154"><code>lchoose</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX170"><code>lgamma1p</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC121"><code>lgammafn</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX140"><code>lgammafn</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX8"><code>library.dynam</code></a></td><td valign="top"><a href="#SEC6">1.1.3 包的子目录</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX98"><code>library.dynam</code></a></td><td valign="top"><a href="#SEC78">5.3 <code>dyn.load</code> and <code>dyn.unload</code></a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX167"><code>log1p</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX168"><code>log1pmx</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX171"><code>logspace_add</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX172"><code>logspace_sub</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_12">M</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC123"><code>M_E</code></a></td><td valign="top"><a href="#SEC123">6.7.4 Mathematical constants</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC123"><code>M_PI</code></a></td><td valign="top"><a href="#SEC123">6.7.4 Mathematical constants</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX118"><code>mkChar</code></a></td><td valign="top"><a href="#SEC93">5.9.7 Handling character data</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX132"><code>mkCharCE</code></a></td><td valign="top"><a href="#SEC107">5.15 Character encoding issues</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX119"><code>mkCharLen</code></a></td><td valign="top"><a href="#SEC93">5.9.7 Handling character data</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX134"><code>mkCharLenCE</code></a></td><td valign="top"><a href="#SEC107">5.15 Character encoding issues</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_13">N</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC115"><code>NA_REAL</code></a></td><td valign="top"><a href="#SEC115">6.4 Missing and <acronym>IEEE</acronym> special values</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX184"><code>nmmin</code></a></td><td valign="top"><a href="#SEC124">6.8 Optimization</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC114"><code>norm_rand</code></a></td><td valign="top"><a href="#SEC114">6.3 Random number generation</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_14">O</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#IDX18"><code>OBJECTS</code></a></td><td valign="top"><a href="#SEC9">1.2.1 Using <tt>`Makevars'</tt></a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX109"><code>OBJECTS</code></a></td><td valign="top"><a href="#SEC80">5.5 Creating shared objects</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_15">P</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC121"><code>pentagamma</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX144"><code>pentagamma</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX103"><code>PKG_CFLAGS</code></a></td><td valign="top"><a href="#SEC80">5.5 Creating shared objects</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX102"><code>PKG_CPPFLAGS</code></a></td><td valign="top"><a href="#SEC80">5.5 Creating shared objects</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX104"><code>PKG_CXXFLAGS</code></a></td><td valign="top"><a href="#SEC80">5.5 Creating shared objects</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX106"><code>PKG_FCFLAGS</code></a></td><td valign="top"><a href="#SEC80">5.5 Creating shared objects</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX105"><code>PKG_FFLAGS</code></a></td><td valign="top"><a href="#SEC80">5.5 Creating shared objects</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX108"><code>PKG_LIBS</code></a></td><td valign="top"><a href="#SEC80">5.5 Creating shared objects</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX107"><code>PKG_OBJCFLAGS</code></a></td><td valign="top"><a href="#SEC80">5.5 Creating shared objects</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX52"><code>prompt</code></a></td><td valign="top"><a href="#SEC38">2.1.1 Documenting functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC87"><code>PROTECT</code></a></td><td valign="top"><a href="#SEC87">5.9.1 Handling the effects of garbage collection</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX113"><code>PROTECT_WITH_INDEX</code></a></td><td valign="top"><a href="#SEC87">5.9.1 Handling the effects of garbage collection</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC121"><code>psigamma</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX145"><code>psigamma</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC114"><code>PutRNGstate</code></a></td><td valign="top"><a href="#SEC114">6.3 Random number generation</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX166"><code>pythag</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_16">Q</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#IDX204"><code>qsort3</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX203"><code>qsort4</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_17">R</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC14"><code>R CMD build</code></a></td><td valign="top"><a href="#SEC14">1.3.2 创建包</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC13"><code>R CMD check</code></a></td><td valign="top"><a href="#SEC13">1.3.1 检查包</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX11"><code>R CMD config</code></a></td><td valign="top"><a href="#SEC8">1.2 配置和清理</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX86"><code>R CMD Rd2dvi</code></a></td><td valign="top"><a href="#SEC51">2.11 Processing Rd format</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX85"><code>R CMD Rd2txt</code></a></td><td valign="top"><a href="#SEC51">2.11 Processing Rd format</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX84"><code>R CMD Rdconv</code></a></td><td valign="top"><a href="#SEC51">2.11 Processing Rd format</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX87"><code>R CMD Sd2Rd</code></a></td><td valign="top"><a href="#SEC51">2.11 Processing Rd format</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC80"><code>R CMD SHLIB</code></a></td><td valign="top"><a href="#SEC80">5.5 Creating shared objects</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX89"><code>R CMD Stangle</code></a></td><td valign="top"><a href="#SEC51">2.11 Processing Rd format</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX88"><code>R CMD Sweave</code></a></td><td valign="top"><a href="#SEC51">2.11 Processing Rd format</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX227"><code>R_addhistory</code></a></td><td valign="top"><a href="#SEC139">8.1.2 Setting R callbacks</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC110"><code>R_alloc</code></a></td><td valign="top"><a href="#SEC110">6.1.1 Transient storage allocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX215"><code>R_Busy</code></a></td><td valign="top"><a href="#SEC139">8.1.2 Setting R callbacks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX223"><code>R_ChooseFile</code></a></td><td valign="top"><a href="#SEC139">8.1.2 Setting R callbacks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX229"><code>R_CleanUp</code></a></td><td valign="top"><a href="#SEC139">8.1.2 Setting R callbacks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX221"><code>R_ClearErrConsole</code></a></td><td valign="top"><a href="#SEC139">8.1.2 Setting R callbacks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX193"><code>R_csort</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX224"><code>R_EditFile</code></a></td><td valign="top"><a href="#SEC139">8.1.2 Setting R callbacks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX210"><code>R_ExpandFileName</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC115"><code>R_FINITE</code></a></td><td valign="top"><a href="#SEC115">6.4 Missing and <acronym>IEEE</acronym> special values</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX220"><code>R_FlushConsole</code></a></td><td valign="top"><a href="#SEC139">8.1.2 Setting R callbacks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX101"><code>R_GetCCallable</code></a></td><td valign="top"><a href="#SEC79">5.4 Registering native routines</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC130"><code>R_INLINE</code></a></td><td valign="top"><a href="#SEC130">6.14 Inlining C functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC115"><code>R_IsNaN</code></a></td><td valign="top"><a href="#SEC115">6.4 Missing and <acronym>IEEE</acronym> special values</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX191"><code>R_isort</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX12"><code>R_LIBRARY_DIR</code></a></td><td valign="top"><a href="#SEC8">1.2 配置和清理</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX225"><code>R_loadhistory</code></a></td><td valign="top"><a href="#SEC139">8.1.2 Setting R callbacks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX205"><code>R_max_col</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC115"><code>R_NegInf</code></a></td><td valign="top"><a href="#SEC115">6.4 Missing and <acronym>IEEE</acronym> special values</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX13"><code>R_PACKAGE_DIR</code></a></td><td valign="top"><a href="#SEC8">1.2 配置和清理</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX127"><code>R_ParseVector</code></a></td><td valign="top"><a href="#SEC104">5.12 Parsing R code from C</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC115"><code>R_PosInf</code></a></td><td valign="top"><a href="#SEC115">6.4 Missing and <acronym>IEEE</acronym> special values</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX164"><code>R_pow</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX165"><code>R_pow_di</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX199"><code>R_qsort</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX200"><code>R_qsort_I</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX201"><code>R_qsort_int</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX202"><code>R_qsort_int_I</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX216"><code>R_ReadConsole</code></a></td><td valign="top"><a href="#SEC139">8.1.2 Setting R callbacks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX100"><code>R_RegisterCCallable</code></a></td><td valign="top"><a href="#SEC79">5.4 Registering native routines</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX99"><code>R_registerRoutines</code></a></td><td valign="top"><a href="#SEC79">5.4 Registering native routines</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX219"><code>R_ResetConsole</code></a></td><td valign="top"><a href="#SEC139">8.1.2 Setting R callbacks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX192"><code>R_rsort</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX226"><code>R_savehistory</code></a></td><td valign="top"><a href="#SEC139">8.1.2 Setting R callbacks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX222"><code>R_ShowFiles</code></a></td><td valign="top"><a href="#SEC139">8.1.2 Setting R callbacks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX214"><code>R_ShowMessage</code></a></td><td valign="top"><a href="#SEC139">8.1.2 Setting R callbacks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX228"><code>R_Suicide</code></a></td><td valign="top"><a href="#SEC139">8.1.2 Setting R callbacks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX209"><code>R_tmpnam</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC129"><code>R_Version</code></a></td><td valign="top"><a href="#SEC129">6.13 Platform and version information</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX217"><code>R_WriteConsole</code></a></td><td valign="top"><a href="#SEC139">8.1.2 Setting R callbacks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX218"><code>R_WriteConsoleEx</code></a></td><td valign="top"><a href="#SEC139">8.1.2 Setting R callbacks</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX135"><code>rcont2</code></a></td><td valign="top"><a href="#SEC114">6.3 Random number generation</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX190"><code>Rdqagi</code></a></td><td valign="top"><a href="#SEC125">6.9 Integration</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX189"><code>Rdqags</code></a></td><td valign="top"><a href="#SEC125">6.9 Integration</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC111"><code>Realloc</code></a></td><td valign="top"><a href="#SEC111">6.1.2 User-controlled memory</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX92"><code>recover</code></a></td><td valign="top"><a href="#SEC68">4.2 Debugging R code</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX133"><code>reEnc</code></a></td><td valign="top"><a href="#SEC107">5.15 Character encoding issues</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC116"><code>REprintf</code></a></td><td valign="top"><a href="#SEC116">6.5 Printing</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX114"><code>REPROTECT</code></a></td><td valign="top"><a href="#SEC87">5.9.1 Handling the effects of garbage collection</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC116"><code>REvprintf</code></a></td><td valign="top"><a href="#SEC116">6.5 Printing</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX195"><code>revsort</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX208"><code>rgb2hsv</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX212"><code>Riconv</code></a></td><td valign="top"><a href="#SEC127">6.11 Re-encoding</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX213"><code>Riconv_close</code></a></td><td valign="top"><a href="#SEC127">6.11 Re-encoding</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC116"><code>Rprintf</code></a></td><td valign="top"><a href="#SEC116">6.5 Printing</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC55"><code>Rprof</code></a></td><td valign="top"><a href="#SEC55">3.2 Profiling R code for speed</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC57"><code>Rprof</code></a></td><td valign="top"><a href="#SEC57">3.3.1 Memory statistics from <code>Rprof</code></a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC58"><code>Rprofmem</code></a></td><td valign="top"><a href="#SEC58">3.3.2 Tracking memory allocations</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX197"><code>rPsort</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX194"><code>rsort_with_index</code></a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC116"><code>Rvprintf</code></a></td><td valign="top"><a href="#SEC116">6.5 Printing</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_18">S</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#IDX23"><code>S3method</code></a></td><td valign="top"><a href="#SEC20">1.6.2 Registering S3 methods</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC110"><code>S_alloc</code></a></td><td valign="top"><a href="#SEC110">6.1.1 Transient storage allocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC110"><code>S_realloc</code></a></td><td valign="top"><a href="#SEC110">6.1.1 Transient storage allocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX17"><code>SAFE_FFLAGS</code></a></td><td valign="top"><a href="#SEC9">1.2.1 Using <tt>`Makevars'</tt></a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX188"><code>samin</code></a></td><td valign="top"><a href="#SEC124">6.8 Optimization</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC114"><code>seed_in</code></a></td><td valign="top"><a href="#SEC114">6.3 Random number generation</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC114"><code>seed_out</code></a></td><td valign="top"><a href="#SEC114">6.3 Random number generation</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX116"><code>setAttrib</code></a></td><td valign="top"><a href="#SEC90">5.9.4 Attributes</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX122"><code>setVar</code></a></td><td valign="top"><a href="#SEC94">5.9.8 Finding and setting variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX177"><code>sign</code></a></td><td valign="top"><a href="#SEC122">6.7.3 Numerical Utilities</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC57"><code>summaryRprof</code></a></td><td valign="top"><a href="#SEC57">3.3.1 Memory statistics from <code>Rprof</code></a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX96"><code>system</code></a></td><td valign="top"><a href="#SEC76">5.1 Operating system access</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX97"><code>system.time</code></a></td><td valign="top"><a href="#SEC76">5.1 Operating system access</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_19">T</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC121"><code>tetragamma</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX143"><code>tetragamma</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX95"><code>trace</code></a></td><td valign="top"><a href="#SEC68">4.2 Debugging R code</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC68"><code>traceback</code></a></td><td valign="top"><a href="#SEC68">4.2 Debugging R code</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC59"><code>tracemem</code></a></td><td valign="top"><a href="#SEC59">3.3.3 Tracing copies of an object</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC107"><code>translateChar</code></a></td><td valign="top"><a href="#SEC107">5.15 Character encoding issues</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC107"><code>translateCharUTF8</code></a></td><td valign="top"><a href="#SEC107">5.15 Character encoding issues</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC121"><code>trigamma</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX142"><code>trigamma</code></a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX182"><code>TRUE</code></a></td><td valign="top"><a href="#SEC123">6.7.4 Mathematical constants</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_20">U</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#IDX94"><code>undebug</code></a></td><td valign="top"><a href="#SEC68">4.2 Debugging R code</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC114"><code>unif_rand</code></a></td><td valign="top"><a href="#SEC114">6.3 Random number generation</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC87"><code>UNPROTECT</code></a></td><td valign="top"><a href="#SEC87">5.9.1 Handling the effects of garbage collection</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX112"><code>UNPROTECT_PTR</code></a></td><td valign="top"><a href="#SEC87">5.9.1 Handling the effects of garbage collection</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC59"><code>untracemem</code></a></td><td valign="top"><a href="#SEC59">3.3.3 Tracing copies of an object</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX28"><code>useDynLib</code></a></td><td valign="top"><a href="#SEC21">1.6.3 Load hooks</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC146_21">V</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC110"><code>vmaxget</code></a></td><td valign="top"><a href="#SEC110">6.1.1 Transient storage allocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC110"><code>vmaxset</code></a></td><td valign="top"><a href="#SEC110">6.1.1 Transient storage allocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX185"><code>vmmin</code></a></td><td valign="top"><a href="#SEC124">6.8 Optimization</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
</tbody></table>
<table><tbody><tr><th valign="top">Jump to: &nbsp; </th><td><a href="#SEC146_0" class="summary-letter"><b>*</b></a>
 &nbsp; 
<a href="#SEC146_1" class="summary-letter"><b>.</b></a>
 &nbsp; 
<a href="#SEC146_2" class="summary-letter"><b>\</b></a>
 &nbsp; 
<br>
<a href="#SEC146_3" class="summary-letter"><b>B</b></a>
 &nbsp; 
<a href="#SEC146_4" class="summary-letter"><b>C</b></a>
 &nbsp; 
<a href="#SEC146_5" class="summary-letter"><b>D</b></a>
 &nbsp; 
<a href="#SEC146_6" class="summary-letter"><b>E</b></a>
 &nbsp; 
<a href="#SEC146_7" class="summary-letter"><b>F</b></a>
 &nbsp; 
<a href="#SEC146_8" class="summary-letter"><b>G</b></a>
 &nbsp; 
<a href="#SEC146_9" class="summary-letter"><b>H</b></a>
 &nbsp; 
<a href="#SEC146_10" class="summary-letter"><b>I</b></a>
 &nbsp; 
<a href="#SEC146_11" class="summary-letter"><b>L</b></a>
 &nbsp; 
<a href="#SEC146_12" class="summary-letter"><b>M</b></a>
 &nbsp; 
<a href="#SEC146_13" class="summary-letter"><b>N</b></a>
 &nbsp; 
<a href="#SEC146_14" class="summary-letter"><b>O</b></a>
 &nbsp; 
<a href="#SEC146_15" class="summary-letter"><b>P</b></a>
 &nbsp; 
<a href="#SEC146_16" class="summary-letter"><b>Q</b></a>
 &nbsp; 
<a href="#SEC146_17" class="summary-letter"><b>R</b></a>
 &nbsp; 
<a href="#SEC146_18" class="summary-letter"><b>S</b></a>
 &nbsp; 
<a href="#SEC146_19" class="summary-letter"><b>T</b></a>
 &nbsp; 
<a href="#SEC146_20" class="summary-letter"><b>U</b></a>
 &nbsp; 
<a href="#SEC146_21" class="summary-letter"><b>V</b></a>
 &nbsp; 
</td></tr></tbody></table>

<hr size="6">
<a name="Concept-index"></a>
<a name="SEC147"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC146" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[ &gt; ]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC146" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[ &gt;&gt; ]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h1 class="unnumbered"> Concept index </h1>

<table><tbody><tr><th valign="top">Jump to: &nbsp; </th><td><a href="#SEC147_0" class="summary-letter"><b>\</b></a>
 &nbsp; 
<a href="#SEC147_1" class="summary-letter"><b>&#65533;</b></a>
 &nbsp; 
<a href="#SEC147_2" class="summary-letter"><b>&#65533;</b></a>
 &nbsp; 
<a href="#SEC147_3" class="summary-letter"><b>&#65533;</b></a>
 &nbsp; 
<a href="#SEC147_4" class="summary-letter"><b>&#65533;</b></a>
 &nbsp; 
<br>
<a href="#SEC147_5" class="summary-letter"><b>A</b></a>
 &nbsp; 
<a href="#SEC147_6" class="summary-letter"><b>B</b></a>
 &nbsp; 
<a href="#SEC147_7" class="summary-letter"><b>C</b></a>
 &nbsp; 
<a href="#SEC147_8" class="summary-letter"><b>D</b></a>
 &nbsp; 
<a href="#SEC147_9" class="summary-letter"><b>E</b></a>
 &nbsp; 
<a href="#SEC147_10" class="summary-letter"><b>F</b></a>
 &nbsp; 
<a href="#SEC147_11" class="summary-letter"><b>G</b></a>
 &nbsp; 
<a href="#SEC147_12" class="summary-letter"><b>H</b></a>
 &nbsp; 
<a href="#SEC147_13" class="summary-letter"><b>I</b></a>
 &nbsp; 
<a href="#SEC147_14" class="summary-letter"><b>L</b></a>
 &nbsp; 
<a href="#SEC147_15" class="summary-letter"><b>M</b></a>
 &nbsp; 
<a href="#SEC147_16" class="summary-letter"><b>N</b></a>
 &nbsp; 
<a href="#SEC147_17" class="summary-letter"><b>O</b></a>
 &nbsp; 
<a href="#SEC147_18" class="summary-letter"><b>P</b></a>
 &nbsp; 
<a href="#SEC147_19" class="summary-letter"><b>R</b></a>
 &nbsp; 
<a href="#SEC147_20" class="summary-letter"><b>S</b></a>
 &nbsp; 
<a href="#SEC147_21" class="summary-letter"><b>T</b></a>
 &nbsp; 
<a href="#SEC147_22" class="summary-letter"><b>V</b></a>
 &nbsp; 
<a href="#SEC147_23" class="summary-letter"><b>W</b></a>
 &nbsp; 
<a href="#SEC147_24" class="summary-letter"><b>Z</b></a>
 &nbsp; 
</td></tr></tbody></table>
<table class="index-cp" border="0">
<tbody><tr><td></td><th align="left">Index Entry</th><th align="left"> Section</th></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_0">\</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#IDX79">\linkS4class</a></td><td valign="top"><a href="#SEC45">2.5 Cross-references</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_1">&#65533;</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC6">包的子目录</a></td><td valign="top"><a href="#SEC6">1.1.3 包的子目录</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC3">包结构</a></td><td valign="top"><a href="#SEC3">1.1 包结构</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC7">包束</a></td><td valign="top"><a href="#SEC7">1.1.4 包束</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_2">&#65533;</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC2">创建R的包</a></td><td valign="top"><a href="#SEC2">1. 创建R的包</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC14">创建包</a></td><td valign="top"><a href="#SEC14">1.3.2 创建包</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_3">&#65533;</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC13">检查包</a></td><td valign="top"><a href="#SEC13">1.3.1 检查包</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_4">&#65533;</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC18">命名空间</a></td><td valign="top"><a href="#SEC18">1.6 包命名空间</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_5">A</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC88">Allocating storage</a></td><td valign="top"><a href="#SEC88">5.9.2 Allocating storage</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC90">Attributes</a></td><td valign="top"><a href="#SEC90">5.9.4 Attributes</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_6">B</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#IDX159">Bessel functions</a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX148">Beta function</a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_7">C</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC81">C++ code, interfacing</a></td><td valign="top"><a href="#SEC81">5.6 Interfacing C++ code</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC118">Calling C from FORTRAN and vice versa</a></td><td valign="top"><a href="#SEC118">6.6 Calling C from FORTRAN and vice versa</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX10">citation</a></td><td valign="top"><a href="#SEC6">1.1.3 包的子目录</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX34">citation</a></td><td valign="top"><a href="#SEC30">1.9.2 R messages</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC91">Classes</a></td><td valign="top"><a href="#SEC91">5.9.5 Classes</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX2">cleanup file</a></td><td valign="top"><a href="#SEC3">1.1 包结构</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX1">configure file</a></td><td valign="top"><a href="#SEC3">1.1 包结构</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX5">COPYING file</a></td><td valign="top"><a href="#SEC3">1.1 包结构</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC96">Copying objects</a></td><td valign="top"><a href="#SEC96">5.9.10 Named objects and copying</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC17">CRAN</a></td><td valign="top"><a href="#SEC17">1.5 提交包到<acronym>CRAN</acronym></a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC17">CRAN submission</a></td><td valign="top"><a href="#SEC17">1.5 提交包到<acronym>CRAN</acronym></a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC80">Creating shared objects</a></td><td valign="top"><a href="#SEC80">5.5 Creating shared objects</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC45">Cross-references in documentation</a></td><td valign="top"><a href="#SEC45">2.5 Cross-references</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX137">cumulative hazard</a></td><td valign="top"><a href="#SEC120">6.7.1 Distribution functions</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_8">D</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC72">Debugging</a></td><td valign="top"><a href="#SEC72">4.4 Debugging compiled code</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC4">DESCRIPTION文件</a></td><td valign="top"><a href="#SEC4">1.1.1 <tt>`DESCRIPTION'</tt>文件</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC89">Details of R types</a></td><td valign="top"><a href="#SEC89">5.9.3 Details of R types</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC120">Distribution functions from C</a></td><td valign="top"><a href="#SEC120">6.7.1 Distribution functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC36">Documentation, writing</a></td><td valign="top"><a href="#SEC36">2. Writing R documentation files</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC78">Dynamic loading</a></td><td valign="top"><a href="#SEC78">5.3 <code>dyn.load</code> and <code>dyn.unload</code></a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_9">E</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC50">encoding</a></td><td valign="top"><a href="#SEC50">2.10 Encoding</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC112">Error handling from C</a></td><td valign="top"><a href="#SEC112">6.2 Error handling</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC113">Error handling from FORTRAN</a></td><td valign="top"><a href="#SEC113">6.2.1 Error handling from FORTRAN</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC101">Evaluating R expressions from C</a></td><td valign="top"><a href="#SEC101">5.11 Evaluating R expressions from C</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX128">external pointer</a></td><td valign="top"><a href="#SEC105">5.13 External pointers and weak references</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_10">F</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#IDX129">finalizer</a></td><td valign="top"><a href="#SEC105">5.13 External pointers and weak references</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC94">Finding variables</a></td><td valign="top"><a href="#SEC94">5.9.8 Finding and setting variables</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_11">G</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC121">Gamma function</a></td><td valign="top"><a href="#SEC121">6.7.2 Mathematical functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC87">Garbage collection</a></td><td valign="top"><a href="#SEC87">5.9.1 Handling the effects of garbage collection</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC134">Generic functions</a></td><td valign="top"><a href="#SEC134">7. Generic functions and methods</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_12">H</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC93">handling character data</a></td><td valign="top"><a href="#SEC93">5.9.7 Handling character data</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC92">Handling lists</a></td><td valign="top"><a href="#SEC92">5.9.6 Handling lists</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC86">Handling R objects in C</a></td><td valign="top"><a href="#SEC86">5.9 Handling R objects in C</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_13">I</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC100">IEEE special values</a></td><td valign="top"><a href="#SEC100">5.10.3 Missing and special values</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC115">IEEE special values</a></td><td valign="top"><a href="#SEC115">6.4 Missing and <acronym>IEEE</acronym> special values</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC5"><tt>`INDEX'</tt>文件</a></td><td valign="top"><a href="#SEC5">1.1.2 <tt>`INDEX'</tt>文件</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC48">Indices</a></td><td valign="top"><a href="#SEC48">2.8 Indices</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC74">Inspecting R objects when debugging</a></td><td valign="top"><a href="#SEC74">4.4.2 Inspecting R objects when debugging</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC125">integration</a></td><td valign="top"><a href="#SEC125">6.9 Integration</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC77">Interfaces to compiled code</a></td><td valign="top"><a href="#SEC77">5.2 Interface functions <code>.C</code> and <code>.Fortran</code></a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC97">Interfaces to compiled code</a></td><td valign="top"><a href="#SEC97">5.10 Interface functions <code>.Call</code> and <code>.External</code></a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC81">Interfacing C++ code</a></td><td valign="top"><a href="#SEC81">5.6 Interfacing C++ code</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC128">Interrupts</a></td><td valign="top"><a href="#SEC128">6.12 Allowing interrupts</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_14">L</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#IDX4">LICENCE file</a></td><td valign="top"><a href="#SEC3">1.1 包结构</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX3">LICENSE file</a></td><td valign="top"><a href="#SEC3">1.1 包结构</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC44">Lists and tables in documentation</a></td><td valign="top"><a href="#SEC44">2.4 Lists and tables</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_15">M</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC43">Marking text in documentation</a></td><td valign="top"><a href="#SEC43">2.3 Marking text</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC46">Mathematics in documentation</a></td><td valign="top"><a href="#SEC46">2.6 Mathematics</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC109">Memory allocation from C</a></td><td valign="top"><a href="#SEC109">6.1 Memory allocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC56">Memory use</a></td><td valign="top"><a href="#SEC56">3.3 Profiling R code for memory use</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC134">Method functions</a></td><td valign="top"><a href="#SEC134">7. Generic functions and methods</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC100">Missing values</a></td><td valign="top"><a href="#SEC100">5.10.3 Missing and special values</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC115">Missing values</a></td><td valign="top"><a href="#SEC115">6.4 Missing and <acronym>IEEE</acronym> special values</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_16">N</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC119">Numerical analysis subroutines from C</a></td><td valign="top"><a href="#SEC119">6.7 Numerical analysis subroutines</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC103">Numerical derivatives</a></td><td valign="top"><a href="#SEC103">5.11.2 Calculating numerical derivatives</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_17">O</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC76">Operating system access</a></td><td valign="top"><a href="#SEC76">5.1 Operating system access</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC124">optimization</a></td><td valign="top"><a href="#SEC124">6.8 Optimization</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_18">P</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC14">Package builder</a></td><td valign="top"><a href="#SEC14">1.3.2 创建包</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC2">Packages</a></td><td valign="top"><a href="#SEC2">1. 创建R的包</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC104">Parsing R code from C</a></td><td valign="top"><a href="#SEC104">5.12 Parsing R code from C</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC49">Platform-specific documentation</a></td><td valign="top"><a href="#SEC49">2.9 Platform-specific documentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC116">Printing from C</a></td><td valign="top"><a href="#SEC116">6.5 Printing</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC117">Printing from FORTRAN</a></td><td valign="top"><a href="#SEC117">6.5.1 Printing from FORTRAN</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC51">Processing Rd format</a></td><td valign="top"><a href="#SEC51">2.11 Processing Rd format</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC55">Profiling</a></td><td valign="top"><a href="#SEC55">3.2 Profiling R code for speed</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC56">Profiling</a></td><td valign="top"><a href="#SEC56">3.3 Profiling R code for memory use</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC60">Profiling</a></td><td valign="top"><a href="#SEC60">3.4 Profiling compiled code</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_19">R</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC114">Random numbers in C</a></td><td valign="top"><a href="#SEC114">6.3 Random number generation</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX138">Random numbers in C</a></td><td valign="top"><a href="#SEC120">6.7.1 Distribution functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#IDX136">Random numbers in FORTRAN</a></td><td valign="top"><a href="#SEC118">6.6 Calling C from FORTRAN and vice versa</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC79">Registering native routines</a></td><td valign="top"><a href="#SEC79">5.4 Registering native routines</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_20">S</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC94">Setting variables</a></td><td valign="top"><a href="#SEC94">5.9.8 Finding and setting variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC126">Sort functions from C</a></td><td valign="top"><a href="#SEC126">6.10 Utility functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC17">Submitting to CRAN</a></td><td valign="top"><a href="#SEC17">1.5 提交包到<acronym>CRAN</acronym></a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC16">Sweave</a></td><td valign="top"><a href="#SEC16">1.4 写包的vignettes</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_21">T</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC54">Tidying R code</a></td><td valign="top"><a href="#SEC54">3.1 Tidying R code</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_22">V</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC129">Version information from C</a></td><td valign="top"><a href="#SEC129">6.13 Platform and version information</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC16">vignettes</a></td><td valign="top"><a href="#SEC16">1.4 写包的vignettes</a></td></tr>
<tr><td></td><td valign="top"><a href="#SEC131">Visibility</a></td><td valign="top"><a href="#SEC131">6.15 Controlling visibility</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_23">W</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#IDX130">weak reference</a></td><td valign="top"><a href="#SEC105">5.13 External pointers and weak references</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
<tr><th><a name="SEC147_24">Z</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#SEC102">Zero-finding</a></td><td valign="top"><a href="#SEC102">5.11.1 Zero-finding</a></td></tr>
<tr><td colspan="3"> <hr></td></tr>
</tbody></table>
<table><tbody><tr><th valign="top">Jump to: &nbsp; </th><td><a href="#SEC147_0" class="summary-letter"><b>\</b></a>
 &nbsp; 
<a href="#SEC147_1" class="summary-letter"><b>&#65533;</b></a>
 &nbsp; 
<a href="#SEC147_2" class="summary-letter"><b>&#65533;</b></a>
 &nbsp; 
<a href="#SEC147_3" class="summary-letter"><b>&#65533;</b></a>
 &nbsp; 
<a href="#SEC147_4" class="summary-letter"><b>&#65533;</b></a>
 &nbsp; 
<br>
<a href="#SEC147_5" class="summary-letter"><b>A</b></a>
 &nbsp; 
<a href="#SEC147_6" class="summary-letter"><b>B</b></a>
 &nbsp; 
<a href="#SEC147_7" class="summary-letter"><b>C</b></a>
 &nbsp; 
<a href="#SEC147_8" class="summary-letter"><b>D</b></a>
 &nbsp; 
<a href="#SEC147_9" class="summary-letter"><b>E</b></a>
 &nbsp; 
<a href="#SEC147_10" class="summary-letter"><b>F</b></a>
 &nbsp; 
<a href="#SEC147_11" class="summary-letter"><b>G</b></a>
 &nbsp; 
<a href="#SEC147_12" class="summary-letter"><b>H</b></a>
 &nbsp; 
<a href="#SEC147_13" class="summary-letter"><b>I</b></a>
 &nbsp; 
<a href="#SEC147_14" class="summary-letter"><b>L</b></a>
 &nbsp; 
<a href="#SEC147_15" class="summary-letter"><b>M</b></a>
 &nbsp; 
<a href="#SEC147_16" class="summary-letter"><b>N</b></a>
 &nbsp; 
<a href="#SEC147_17" class="summary-letter"><b>O</b></a>
 &nbsp; 
<a href="#SEC147_18" class="summary-letter"><b>P</b></a>
 &nbsp; 
<a href="#SEC147_19" class="summary-letter"><b>R</b></a>
 &nbsp; 
<a href="#SEC147_20" class="summary-letter"><b>S</b></a>
 &nbsp; 
<a href="#SEC147_21" class="summary-letter"><b>T</b></a>
 &nbsp; 
<a href="#SEC147_22" class="summary-letter"><b>V</b></a>
 &nbsp; 
<a href="#SEC147_23" class="summary-letter"><b>W</b></a>
 &nbsp; 
<a href="#SEC147_24" class="summary-letter"><b>Z</b></a>
 &nbsp; 
</td></tr></tbody></table>

<hr size="6">
<a name="SEC_Foot"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h1>Footnotes</h1>
<h3><a name="FOOT1" href="#DOCF1">(1)</a></h3>
<p>译者注：'包束'的原文是bundle，是由多个用途相近
的包组成的包的集合。如：<samp>`VR'</samp>这个包束包括了四个包：<samp>`MASS'</samp>、<samp>`class'</samp>、
<samp>`nnet'</samp>和<samp>`spatial'</samp>。
</p><h3><a name="FOOT2" href="#DOCF2">(2)</a></h3>
<p>false positives are possible, but only one has been seen so far.
</p><h3><a name="FOOT3" href="#DOCF3">(3)</a></h3>
<p>This is true for OSes which implement the
<samp>`C'</samp> locale, unless neither lazy-loading nor saving an image are
used, in which case it would fail if loaded in a <samp>`C'</samp>
locale. (Windows' idea of the <samp>`C'</samp> locale uses the WinAnsi
charset.)
</p><h3><a name="FOOT4" href="#DOCF4">(4)</a></h3>
<p>It is good practice to encode them as octal or hex
escape sequences.
</p><h3><a name="FOOT5" href="#DOCF5">(5)</a></h3>
<p>更准确地说，文件名能用英文的文字数字
或符号<samp>`$ - _ . + ! ' ( ) , ; &nbsp;= &amp;'</samp>.
</p><h3><a name="FOOT6" href="#DOCF6">(6)</a></h3>
<p>注意不支持Ratfor。如果你有Ratfor源代码，必须转换
成FORTRAN代码。所有平台都支持FORTRAN-77（大写），大多数平台支持Fortran-95。如果
你想使用Ratfor文件，请将这些文件放在<tt>`src'</tt>目录下的一个子目录里，而不是直接放
在<tt>`src'</tt>目录里。
</p><h3><a name="FOOT7" href="#DOCF7">(7)</a></h3>
<p>尽管<tt>`.hpp'</tt>文件用的更多，
但移植性可能不好
</p><h3><a name="FOOT8" href="#DOCF8">(8)</a></h3>

<p>译者注：这里的"顶层文件"指直接放在包目录下的文件
</p><h3><a name="FOOT9" href="#DOCF9">(9)</a></h3>
<p>Windows在链接时处理这样的依赖关系
</p><h3><a name="FOOT10" href="#DOCF10">(10)</a></h3>
<p>可能需要GNU命令<code>tar</code>：由环境变量<code>TAR</code>设置。
</p><h3><a name="FOOT11" href="#DOCF11">(11)</a></h3>
<p>译者注：压缩过的TAR档案
文件
</p><h3><a name="FOOT12" href="#DOCF12">(12)</a></h3>
<p>称为<tt>`CVS'</tt>、
<tt>`.svn'</tt>、<tt>`.arch-ids'</tt>、<tt>`.bzr'</tt>或<tt>`git'</tt>。
</p><h3><a name="FOOT13" href="#DOCF13">(13)</a></h3>
<p>假定满足许可（licence）中的条件：许多可能与开源许可矛盾。
</p><h3><a name="FOOT14" href="#DOCF14">(14)</a></h3>
<p>There can be exceptions: for example Rd
files are not allowed to start with a dot, and have to be uniquely named
on a case-insensitive file system.
</p><h3><a name="FOOT15" href="#DOCF15">(15)</a></h3>
<p>Currently it is
rendered differently only in HTML conversions, and latex conversion
outside <samp>`\usage'</samp> and <samp>`\examples'</samp> environments.
</p><h3><a name="FOOT16" href="#DOCF16">(16)</a></h3>
<p>a common
example in CRAN packages is <code>\link[mgcv]{gam}</code>.
</p><h3><a name="FOOT17" href="#DOCF17">(17)</a></h3>
<p>See the
examples section in the file <tt>`Paren.Rd'</tt> for an example.
</p><h3><a name="FOOT18" href="#DOCF18">(18)</a></h3>
<p>@R{}
has to be built to enable this, but the option
<samp>`--enable-R-profiling'</samp> is the default.
</p><h3><a name="FOOT19" href="#DOCF19">(19)</a></h3>
<p>For Unix-alikes these are intervals of CPU
time, and for Windows of elapsed time.
</p><h3><a name="FOOT20" href="#DOCF20">(20)</a></h3>
<p>With the exceptions of the commands
listed below: an object of such a name can be printed <em>via</em> an
explicit call to <code>print</code>.
</p><h3><a name="FOOT21" href="#DOCF21">(21)</a></h3>
<p>Although this is supposed to have been improved,
<code>valgrind</code> 3.2.0 still aborts using optimized BLASes on an
Opteron.
</p><h3><a name="FOOT22" href="#DOCF22">(22)</a></h3>
<p>and we provide an emulation on Windows 2000): see
<samp>`?dyn.oad'</samp>.
</p><h3><a name="FOOT23" href="#DOCF23">(23)</a></h3>
<p>or the version
specific to a sub-architecture
</p><h3><a name="FOOT24" href="#DOCF24">(24)</a></h3>
<p>The files in the @R{} binary Windows distribution
for installing source packages need to be installed.
</p><h3><a name="FOOT25" href="#DOCF25">(25)</a></h3>
<p><code>dyld</code> on Mac
OS X, and <code>DYLD_LIBRARY_PATHS</code> below.
</p><h3><a name="FOOT26" href="#DOCF26">(26)</a></h3>
<p> see section <a href="#SEC108">The R <acronym>API</acronym>: entry points for C code</a>:
note that these are not all part of the API.
</p><h3><a name="FOOT27" href="#DOCF27">(27)</a></h3>
<p>SEXP is an acronym for <em>S</em>imple
<em>EXP</em>ression, common in LISP-like language syntaxes.
</p><h3><a name="FOOT28" href="#DOCF28">(28)</a></h3>
<p>You can assign a <em>copy</em> of the object in the
environment frame <code>rho</code> using <code>defineVar(symbol,
duplicate(value), rho)</code>).
</p><h3><a name="FOOT29" href="#DOCF29">(29)</a></h3>
<p>see section <a href="#SEC107">Character encoding issues</a> for why this
might not be what is required.
</p><h3><a name="FOOT30" href="#DOCF30">(30)</a></h3>
<p>This is only guaranteed to show the
current interface: it is liable to change.
</p><h3><a name="FOOT31" href="#DOCF31">(31)</a></h3>
<p>Known problems are redefining
<code>error</code>, <code>length</code>, <code>vector</code> and <code>warning</code>
</p><h3><a name="FOOT32" href="#DOCF32">(32)</a></h3>
<p>In the parlance of MacOS
X this is a <em>dynamic</em> library, and is the normal way to build @R{} on
that platform.
</p><h3><a name="FOOT33" href="#DOCF33">(33)</a></h3>
<p>but these
are not part of the automated test procedures and so little tested.
</p><h3><a name="FOOT34" href="#DOCF34">(34)</a></h3>
<p>at least on platforms where the values are
available, that is having <code>getrlimit</code> and on Linux or having
<code>sysctl</code> supporting <code>KERN_USRSTACK</code>, including FreeBSD and
MacOS X.
</p><h3><a name="FOOT35" href="#DOCF35">(35)</a></h3>
<p>An
attempt to use only threads in the late 1990s failed to work correctly
under Windows 95, the predominant version of Windows at that time.
</p><hr size="1">
<a name="SEC_Contents"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h1>Table of Contents</h1>
<div class="contents">

<ul class="toc">
  <li><a name="TOC1" href="#SEC1">致谢</a></li>
  <li><a name="TOC2" href="#SEC2">1. 创建R的包</a>
  <ul class="toc">
    <li><a name="TOC3" href="#SEC3">1.1 包结构</a>
    <ul class="toc">
      <li><a name="TOC4" href="#SEC4">1.1.1 <tt>`DESCRIPTION'</tt>文件</a></li>
      <li><a name="TOC5" href="#SEC5">1.1.2 <tt>`INDEX'</tt>文件</a></li>
      <li><a name="TOC6" href="#SEC6">1.1.3 包的子目录</a></li>
      <li><a name="TOC7" href="#SEC7">1.1.4 包束</a></li>
    </ul></li>
    <li><a name="TOC8" href="#SEC8">1.2 配置和清理</a>
    <ul class="toc">
      <li><a name="TOC9" href="#SEC9">1.2.1 Using <tt>`Makevars'</tt></a></li>
      <li><a name="TOC10" href="#SEC10">1.2.2 配置实例</a></li>
      <li><a name="TOC11" href="#SEC11">1.2.3 用F95代码</a></li>
    </ul></li>
    <li><a name="TOC12" href="#SEC12">1.3 检查和创建包</a>
    <ul class="toc">
      <li><a name="TOC13" href="#SEC13">1.3.1 检查包</a></li>
      <li><a name="TOC14" href="#SEC14">1.3.2 创建包</a></li>
      <li><a name="TOC15" href="#SEC15">1.3.3 定制检查和创建</a></li>
    </ul></li>
    <li><a name="TOC16" href="#SEC16">1.4 写包的vignettes</a></li>
    <li><a name="TOC17" href="#SEC17">1.5 提交包到<acronym>CRAN</acronym></a></li>
    <li><a name="TOC18" href="#SEC18">1.6 包命名空间</a>
    <ul class="toc">
      <li><a name="TOC19" href="#SEC19">1.6.1 指定导入和导出</a></li>
      <li><a name="TOC20" href="#SEC20">1.6.2 Registering S3 methods</a></li>
      <li><a name="TOC21" href="#SEC21">1.6.3 Load hooks</a></li>
      <li><a name="TOC22" href="#SEC22">1.6.4 实例</a></li>
      <li><a name="TOC23" href="#SEC23">1.6.5 总结 - 转换一个已存在的包</a></li>
      <li><a name="TOC24" href="#SEC24">1.6.6 有正式类和方法的命名空间</a></li>
    </ul></li>
    <li><a name="TOC25" href="#SEC25">1.7 写可移植的包</a>
    <ul class="toc">
      <li><a name="TOC26" href="#SEC26">1.7.1 Encoding issues</a></li>
    </ul></li>
    <li><a name="TOC27" href="#SEC27">1.8 Diagnostic messages</a></li>
    <li><a name="TOC28" href="#SEC28">1.9 Internationalization</a>
    <ul class="toc">
      <li><a name="TOC29" href="#SEC29">1.9.1 C-level messages</a></li>
      <li><a name="TOC30" href="#SEC30">1.9.2 R messages</a></li>
    </ul></li>
    <li><a name="TOC31" href="#SEC31">1.10 CITATION files</a></li>
    <li><a name="TOC32" href="#SEC32">1.11 Package types</a>
    <ul class="toc">
      <li><a name="TOC33" href="#SEC33">1.11.1 Frontend</a></li>
      <li><a name="TOC34" href="#SEC34">1.11.2 Translation</a></li>
    </ul></li>
    <li><a name="TOC35" href="#SEC35">1.12 Services</a></li>
  </ul></li>
  <li><a name="TOC36" href="#SEC36">2. Writing R documentation files</a>
  <ul class="toc">
    <li><a name="TOC37" href="#SEC37">2.1 Rd format</a>
    <ul class="toc">
      <li><a name="TOC38" href="#SEC38">2.1.1 Documenting functions</a></li>
      <li><a name="TOC39" href="#SEC39">2.1.2 Documenting data sets</a></li>
      <li><a name="TOC40" href="#SEC40">2.1.3 Documenting S4 classes and methods</a></li>
      <li><a name="TOC41" href="#SEC41">2.1.4 Documenting packages</a></li>
    </ul></li>
    <li><a name="TOC42" href="#SEC42">2.2 Sectioning</a></li>
    <li><a name="TOC43" href="#SEC43">2.3 Marking text</a></li>
    <li><a name="TOC44" href="#SEC44">2.4 Lists and tables</a></li>
    <li><a name="TOC45" href="#SEC45">2.5 Cross-references</a></li>
    <li><a name="TOC46" href="#SEC46">2.6 Mathematics</a></li>
    <li><a name="TOC47" href="#SEC47">2.7 Insertions</a></li>
    <li><a name="TOC48" href="#SEC48">2.8 Indices</a></li>
    <li><a name="TOC49" href="#SEC49">2.9 Platform-specific documentation</a></li>
    <li><a name="TOC50" href="#SEC50">2.10 Encoding</a></li>
    <li><a name="TOC51" href="#SEC51">2.11 Processing Rd format</a></li>
    <li><a name="TOC52" href="#SEC52">2.12 Back-compatibility issues</a></li>
  </ul></li>
  <li><a name="TOC53" href="#SEC53">3. Tidying and profiling R code</a>
  <ul class="toc">
    <li><a name="TOC54" href="#SEC54">3.1 Tidying R code</a></li>
    <li><a name="TOC55" href="#SEC55">3.2 Profiling R code for speed</a></li>
    <li><a name="TOC56" href="#SEC56">3.3 Profiling R code for memory use</a>
    <ul class="toc">
      <li><a name="TOC57" href="#SEC57">3.3.1 Memory statistics from <code>Rprof</code></a></li>
      <li><a name="TOC58" href="#SEC58">3.3.2 Tracking memory allocations</a></li>
      <li><a name="TOC59" href="#SEC59">3.3.3 Tracing copies of an object</a></li>
    </ul></li>
    <li><a name="TOC60" href="#SEC60">3.4 Profiling compiled code</a>
    <ul class="toc">
      <li><a name="TOC61" href="#SEC61">3.4.1 Linux</a>
      <ul class="toc">
        <li><a name="TOC62" href="#SEC62">3.4.1.1 sprof</a></li>
        <li><a name="TOC63" href="#SEC63">3.4.1.2 oprofile</a></li>
      </ul></li>
      <li><a name="TOC64" href="#SEC64">3.4.2 Solaris</a></li>
      <li><a name="TOC65" href="#SEC65">3.4.3 MacOS X</a></li>
    </ul>
</li>
  </ul></li>
  <li><a name="TOC66" href="#SEC66">4. Debugging</a>
  <ul class="toc">
    <li><a name="TOC67" href="#SEC67">4.1 Browsing</a></li>
    <li><a name="TOC68" href="#SEC68">4.2 Debugging R code</a></li>
    <li><a name="TOC69" href="#SEC69">4.3 Using gctorture and valgrind</a>
    <ul class="toc">
      <li><a name="TOC70" href="#SEC70">4.3.1 Using gctorture</a></li>
      <li><a name="TOC71" href="#SEC71">4.3.2 Using valgrind</a></li>
    </ul></li>
    <li><a name="TOC72" href="#SEC72">4.4 Debugging compiled code</a>
    <ul class="toc">
      <li><a name="TOC73" href="#SEC73">4.4.1 Finding entry points in dynamically loaded code</a></li>
      <li><a name="TOC74" href="#SEC74">4.4.2 Inspecting R objects when debugging</a></li>
    </ul>
</li>
  </ul></li>
  <li><a name="TOC75" href="#SEC75">5. System and foreign language interfaces</a>
  <ul class="toc">
    <li><a name="TOC76" href="#SEC76">5.1 Operating system access</a></li>
    <li><a name="TOC77" href="#SEC77">5.2 Interface functions <code>.C</code> and <code>.Fortran</code></a></li>
    <li><a name="TOC78" href="#SEC78">5.3 <code>dyn.load</code> and <code>dyn.unload</code></a></li>
    <li><a name="TOC79" href="#SEC79">5.4 Registering native routines</a></li>
    <li><a name="TOC80" href="#SEC80">5.5 Creating shared objects</a></li>
    <li><a name="TOC81" href="#SEC81">5.6 Interfacing C++ code</a></li>
    <li><a name="TOC82" href="#SEC82">5.7 Fortran I/O</a></li>
    <li><a name="TOC83" href="#SEC83">5.8 Linking to other packages</a>
    <ul class="toc">
      <li><a name="TOC84" href="#SEC84">5.8.1 Unix-alikes</a></li>
      <li><a name="TOC85" href="#SEC85">5.8.2 Windows</a></li>
    </ul></li>
    <li><a name="TOC86" href="#SEC86">5.9 Handling R objects in C</a>
    <ul class="toc">
      <li><a name="TOC87" href="#SEC87">5.9.1 Handling the effects of garbage collection</a></li>
      <li><a name="TOC88" href="#SEC88">5.9.2 Allocating storage</a></li>
      <li><a name="TOC89" href="#SEC89">5.9.3 Details of R types</a></li>
      <li><a name="TOC90" href="#SEC90">5.9.4 Attributes</a></li>
      <li><a name="TOC91" href="#SEC91">5.9.5 Classes</a></li>
      <li><a name="TOC92" href="#SEC92">5.9.6 Handling lists</a></li>
      <li><a name="TOC93" href="#SEC93">5.9.7 Handling character data</a></li>
      <li><a name="TOC94" href="#SEC94">5.9.8 Finding and setting variables</a></li>
      <li><a name="TOC95" href="#SEC95">5.9.9 Some convenience functions</a></li>
      <li><a name="TOC96" href="#SEC96">5.9.10 Named objects and copying</a></li>
    </ul></li>
    <li><a name="TOC97" href="#SEC97">5.10 Interface functions <code>.Call</code> and <code>.External</code></a>
    <ul class="toc">
      <li><a name="TOC98" href="#SEC98">5.10.1 Calling <code>.Call</code></a></li>
      <li><a name="TOC99" href="#SEC99">5.10.2 Calling <code>.External</code></a></li>
      <li><a name="TOC100" href="#SEC100">5.10.3 Missing and special values</a></li>
    </ul></li>
    <li><a name="TOC101" href="#SEC101">5.11 Evaluating R expressions from C</a>
    <ul class="toc">
      <li><a name="TOC102" href="#SEC102">5.11.1 Zero-finding</a></li>
      <li><a name="TOC103" href="#SEC103">5.11.2 Calculating numerical derivatives</a></li>
    </ul></li>
    <li><a name="TOC104" href="#SEC104">5.12 Parsing R code from C</a></li>
    <li><a name="TOC105" href="#SEC105">5.13 External pointers and weak references</a></li>
    <li><a name="TOC106" href="#SEC106">5.14 Vector accessor functions</a></li>
    <li><a name="TOC107" href="#SEC107">5.15 Character encoding issues</a></li>
  </ul></li>
  <li><a name="TOC108" href="#SEC108">6. The R <acronym>API</acronym>: entry points for C code</a>
  <ul class="toc">
    <li><a name="TOC109" href="#SEC109">6.1 Memory allocation</a>
    <ul class="toc">
      <li><a name="TOC110" href="#SEC110">6.1.1 Transient storage allocation</a></li>
      <li><a name="TOC111" href="#SEC111">6.1.2 User-controlled memory</a></li>
    </ul></li>
    <li><a name="TOC112" href="#SEC112">6.2 Error handling</a>
    <ul class="toc">
      <li><a name="TOC113" href="#SEC113">6.2.1 Error handling from FORTRAN</a></li>
    </ul></li>
    <li><a name="TOC114" href="#SEC114">6.3 Random number generation</a></li>
    <li><a name="TOC115" href="#SEC115">6.4 Missing and <acronym>IEEE</acronym> special values</a></li>
    <li><a name="TOC116" href="#SEC116">6.5 Printing</a>
    <ul class="toc">
      <li><a name="TOC117" href="#SEC117">6.5.1 Printing from FORTRAN</a></li>
    </ul></li>
    <li><a name="TOC118" href="#SEC118">6.6 Calling C from FORTRAN and vice versa</a></li>
    <li><a name="TOC119" href="#SEC119">6.7 Numerical analysis subroutines</a>
    <ul class="toc">
      <li><a name="TOC120" href="#SEC120">6.7.1 Distribution functions</a></li>
      <li><a name="TOC121" href="#SEC121">6.7.2 Mathematical functions</a></li>
      <li><a name="TOC122" href="#SEC122">6.7.3 Numerical Utilities</a></li>
      <li><a name="TOC123" href="#SEC123">6.7.4 Mathematical constants</a></li>
    </ul></li>
    <li><a name="TOC124" href="#SEC124">6.8 Optimization</a></li>
    <li><a name="TOC125" href="#SEC125">6.9 Integration</a></li>
    <li><a name="TOC126" href="#SEC126">6.10 Utility functions</a></li>
    <li><a name="TOC127" href="#SEC127">6.11 Re-encoding</a></li>
    <li><a name="TOC128" href="#SEC128">6.12 Allowing interrupts</a></li>
    <li><a name="TOC129" href="#SEC129">6.13 Platform and version information</a></li>
    <li><a name="TOC130" href="#SEC130">6.14 Inlining C functions</a></li>
    <li><a name="TOC131" href="#SEC131">6.15 Controlling visibility</a></li>
    <li><a name="TOC132" href="#SEC132">6.16 Using these functions in your own C code</a></li>
    <li><a name="TOC133" href="#SEC133">6.17 Organization of header files</a></li>
  </ul></li>
  <li><a name="TOC134" href="#SEC134">7. Generic functions and methods</a>
  <ul class="toc">
    <li><a name="TOC135" href="#SEC135">7.1 Adding new generics</a></li>
  </ul></li>
  <li><a name="TOC136" href="#SEC136">8. Linking GUIs and other front-ends to R</a>
  <ul class="toc">
    <li><a name="TOC137" href="#SEC137">8.1 Embedding R under Unix-alikes</a>
    <ul class="toc">
      <li><a name="TOC138" href="#SEC138">8.1.1 Compiling against the R library</a></li>
      <li><a name="TOC139" href="#SEC139">8.1.2 Setting R callbacks</a></li>
      <li><a name="TOC140" href="#SEC140">8.1.3 Registering symbols</a></li>
      <li><a name="TOC141" href="#SEC141">8.1.4 Meshing event loops</a></li>
      <li><a name="TOC142" href="#SEC142">8.1.5 Threading issues</a></li>
    </ul></li>
    <li><a name="TOC143" href="#SEC143">8.2 Embedding R under Windows</a>
    <ul class="toc">
      <li><a name="TOC144" href="#SEC144">8.2.1 Using (D)COM</a></li>
      <li><a name="TOC145" href="#SEC145">8.2.2 Calling R.dll directly</a></li>
    </ul>
</li>
  </ul></li>
  <li><a name="TOC146" href="#SEC146">Function and variable index</a></li>
  <li><a name="TOC147" href="#SEC147">Concept index</a></li>
</ul>
</div>
<hr size="1">
<a name="SEC_About"></a>
<table border="0" cellspacing="1" cellpadding="1">
<tbody><tr><td valign="middle" align="left">[<a href="#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="#SEC146" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="#SEC_About" title="About (help)"> ? </a>]</td>
</tr></tbody></table>
<h1>About This Document</h1>
<p>
  This document was generated by <em>LI Hong </em> on <em>October, 8 2017</em> using <a href="http://texi2html.cvshome.org/"><em>texi2html 1.76</em></a>.
</p>
<p>
  The buttons in the navigation panels have the following meaning:
</p>
<table border="1">
  <tbody><tr>
    <th> Button </th>
    <th> Name </th>
    <th> Go to </th>
    <th> From 1.2.3 go to</th>
  </tr>
  <tr>
    <td align="center"> [ &lt; ] </td>
    <td align="center">Back</td>
    <td>previous section in reading order</td>
    <td>1.2.2</td>
  </tr>
  <tr>
    <td align="center"> [ &gt; ] </td>
    <td align="center">Forward</td>
    <td>next section in reading order</td>
    <td>1.2.4</td>
  </tr>
  <tr>
    <td align="center"> [ &lt;&lt; ] </td>
    <td align="center">FastBack</td>
    <td>beginning of this chapter or previous chapter</td>
    <td>1</td>
  </tr>
  <tr>
    <td align="center"> [ Up ] </td>
    <td align="center">Up</td>
    <td>up section</td>
    <td>1.2</td>
  </tr>
  <tr>
    <td align="center"> [ &gt;&gt; ] </td>
    <td align="center">FastForward</td>
    <td>next chapter</td>
    <td>2</td>
  </tr>
  <tr>
    <td align="center"> [Top] </td>
    <td align="center">Top</td>
    <td>cover (top) of document</td>
    <td> &nbsp; </td>
  </tr>
  <tr>
    <td align="center"> [Contents] </td>
    <td align="center">Contents</td>
    <td>table of contents</td>
    <td> &nbsp; </td>
  </tr>
  <tr>
    <td align="center"> [Index] </td>
    <td align="center">Index</td>
    <td>index</td>
    <td> &nbsp; </td>
  </tr>
  <tr>
    <td align="center"> [ ? ] </td>
    <td align="center">About</td>
    <td>about (help)</td>
    <td> &nbsp; </td>
  </tr>
</tbody></table>

<p>
  where the <strong> Example </strong> assumes that the current position is at <strong> Subsubsection One-Two-Three </strong> of a document of the following structure:
</p>

<ul>
  <li> 1. Section One
    <ul>
      <li>1.1 Subsection One-One
        <ul>
          <li>...</li>
        </ul>
      </li>
      <li>1.2 Subsection One-Two
        <ul>
          <li>1.2.1 Subsubsection One-Two-One</li>
          <li>1.2.2 Subsubsection One-Two-Two</li>
          <li>1.2.3 Subsubsection One-Two-Three &nbsp; &nbsp;
            <strong>&lt;== Current Position </strong></li>
          <li>1.2.4 Subsubsection One-Two-Four</li>
        </ul>
      </li>
      <li>1.3 Subsection One-Three
        <ul>
          <li>...</li>
        </ul>
      </li>
      <li>1.4 Subsection One-Four</li>
    </ul>
  </li>
</ul>

<hr size="1">
<p>
 <font size="-1">
  This document was generated by <em>LI Hong </em> on <em>October, 8 2017</em> using <a href="http://texi2html.cvshome.org/"><em>texi2html 1.76</em></a>.
 </font>
 <br>

</p>


</body></html>